---
# Source: reg-helm-charts/charts/arpf/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmarpf
  labels:
    app.kubernetes.io/version: arpf-225.280.0
    app.kubernetes.io/component: UDM-ARPF
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmarpf
---
# Source: reg-helm-charts/charts/ccasapache/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-ccasapache
  labels:
    app: udm2-ccasapache
    release: "udm2"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: udm2-ccasapache
      release: "udm2"
---
# Source: reg-helm-charts/charts/clustermonitoragent/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-clustermonitoragent
  labels:
    app.kubernetes.io/version: clustermonitoragent-225.280.0
    app.kubernetes.io/component: CLUSTERMONITORAGENT
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 100%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-clustermonitoragent
---
# Source: reg-helm-charts/charts/ee/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmee
  labels:
    app.kubernetes.io/version: ee-225.280.0
    app.kubernetes.io/component: UDM-EE
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmee
---
# Source: reg-helm-charts/charts/http2lb/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-http2lb
  labels:
    app.kubernetes.io/version: http2lb-225.280.0
    app.kubernetes.io/component: HTTP2LB
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: http2lb
      release: udm2
      app.kubernetes.io/name: udm2-http2lb
---
# Source: reg-helm-charts/charts/mt/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmmt
  labels:
    app.kubernetes.io/version: mt-225.280.0
    app.kubernetes.io/component: UDM-MT
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmmt
---
# Source: reg-helm-charts/charts/nim/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmnim
  labels:
    app.kubernetes.io/version: nim-225.280.0
    app.kubernetes.io/component: NIM
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmnim
---
# Source: reg-helm-charts/charts/sdm/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmsdm
  labels:
    app.kubernetes.io/version: sdm-225.280.0
    app.kubernetes.io/component: UDM-SDM
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmsdm
---
# Source: reg-helm-charts/charts/sim/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmsim
  labels:
    app.kubernetes.io/version: sim-225.280.0
    app.kubernetes.io/component: SIM
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmsim
---
# Source: reg-helm-charts/charts/trigger/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmtrigger
  labels:
    app.kubernetes.io/version: trigger-225.280.0
    app.kubernetes.io/component: UDM-TRIGGER
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmtrigger
---
# Source: reg-helm-charts/charts/udmueauth/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmueau
  labels:
    app.kubernetes.io/version: udmueauth-225.280.0
    app.kubernetes.io/component: UDM-UEAU
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmueau
---
# Source: reg-helm-charts/charts/ueauthn/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-ausfauth
  labels:
    app.kubernetes.io/version: ueauthn-225.280.0
    app.kubernetes.io/component: AUSF-AUTH
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-ausfauth
---
# Source: reg-helm-charts/charts/uecm/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-udmuecm
  labels:
    app.kubernetes.io/version: uecm-225.280.0
    app.kubernetes.io/component: UDM-UECM
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmuecm
---
# Source: reg-helm-charts/charts/vnfclusterenvoylb/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: udm2-vnfclusterenvoylb
  labels:
    app.kubernetes.io/version: vnfclusterenvoylb-225.280.0
    app.kubernetes.io/component: VNFCLUSTERENVOYLB
    app.kubernetes.io/managed-by: helm
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-vnfclusterenvoylb
      app: vnfclusterenvoylb-label
      release: udm2
---
# Source: reg-helm-charts/charts/commonudm/templates/udm_sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: udm2-sa
  namespace: udm2
  labels:
    app.kubernetes.io/managed-by: helm
---
# Source: reg-helm-charts/charts/arpf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: arpfconfigmap
  namespace: udm2
  labels:
    app: arpfconfigmap
    app.kubernetes.io/managed-by: helm
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: arpf_envoy_0
      cluster: arpf_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_arpf
                virtual_hosts:
                - name: grpc_arpf
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/lag", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: external_listener
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8082}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_in_arpf
                virtual_hosts:
                - name: grpc_in_arpf
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/RtpInterface.RtpService/sendRtpRequest", case_sensitive: false }
                    route: { cluster: arpf-apps, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain:
                    filename: "/certs/cert.pem"
                  private_key:
                    filename: "/certs/key.pem"
          filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: arpf-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: arpf-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20000 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20001 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20002 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20003 } }
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
            max_pending_requests: 5000
            max_requests: 5000
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/ccasapache/templates/cassandra-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-ccasapache
  namespace: udm2
  labels:
    app: udm2-ccasapache
    chart: "ccasapache-225.280.0"
    release: udm2
    heritage: Helm
    
data:

  logback.xml: |
    <!--
     Licensed to the Apache Software Foundation (ASF) under one
     or more contributor license agreements.  See the NOTICE file
     distributed with this work for additional information
     regarding copyright ownership.  The ASF licenses this file
     to you under the Apache License, Version 2.0 (the
     "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at
    
       http://www.apache.org/licenses/LICENSE-2.0
    
     Unless required by applicable law or agreed to in writing,
     software distributed under the License is distributed on an
     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
     KIND, either express or implied.  See the License for the
     specific language governing permissions and limitations
     under the License.
    -->
    
    <!--
    In order to disable debug.log, comment-out the ASYNCDEBUGLOG
    appender reference in the root level section below.
    -->
    
    <configuration scan="true">
      <jmxConfigurator />
    
      <!-- No shutdown hook; we run it ourselves in StorageService after shutdown -->
    
      <!-- SYSTEMLOG rolling file appender to system.log (INFO level) -->
    
      <appender name="SYSTEMLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>INFO</level>
        </filter>
        <file>${cassandra.logdir}/system.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <fileNamePattern>${cassandra.logdir}/system.log.%i.zip</fileNamePattern>
          <minIndex>1</minIndex>
          <maxIndex>20</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
          <maxFileSize>20MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
          <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
        </encoder>
      </appender>
    
      <!-- DEBUGLOG rolling file appender to debug.log (all levels) -->
    
      <appender name="DEBUGLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${cassandra.logdir}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <fileNamePattern>${cassandra.logdir}/debug.log.%i.zip</fileNamePattern>
          <minIndex>1</minIndex>
          <maxIndex>20</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
          <maxFileSize>20MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
          <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
        </encoder>
      </appender>
    
      <!-- ASYNCLOG assynchronous appender to debug.log (all levels) -->
    
      <appender name="ASYNCDEBUGLOG" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>1024</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="DEBUGLOG" />
      </appender>
    
      <!-- STDOUT console appender to stdout (INFO level) Commented out to remove duplicate logs
    
      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
          <level>INFO</level>
        </filter>
        <encoder>
          <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
        </encoder>
      </appender>
      -->
    
      <!-- Uncomment bellow and corresponding appender-ref to activate logback metrics
      <appender name="LogbackMetrics" class="com.codahale.metrics.logback.InstrumentedAppender" />
       -->
    
      <root level="INFO">
        <appender-ref ref="SYSTEMLOG" />
        <!--  Commented out to remove duplicate logs
        <appender-ref ref="STDOUT" />
        -->
        <appender-ref ref="ASYNCDEBUGLOG" /> <!-- Comment this line to disable debug.log -->
        <!--
        <appender-ref ref="LogbackMetrics" />
        -->
      </root>
    
      <logger name="org.apache.cassandra" level="DEBUG"/>
      <logger name="com.thinkaurelius.thrift" level="ERROR"/>
    </configuration>
    


  jvm.options: |
    ###########################################################################
    #                             jvm.options                                 #
    #                                                                         #
    # - all flags defined here will be used by cassandra to startup the JVM   #
    # - one flag should be specified per line                                 #
    # - lines that do not start with '-' will be ignored                      #
    # - only static flags are accepted (no variables or parameters)           #
    # - dynamic flags will be appended to these on cassandra-env              #
    ###########################################################################
    
    ######################
    # STARTUP PARAMETERS #
    ######################
    
    # Uncomment any of the following properties to enable specific startup parameters
    
    # In a multi-instance deployment, multiple Cassandra instances will independently assume that all
    # CPU processors are available to it. This setting allows you to specify a smaller set of processors
    # and perhaps have affinity.
    #-Dcassandra.available_processors=number_of_processors
    
    # The directory location of the cassandra.yaml file.
    #-Dcassandra.config=directory
    
    # Sets the initial partitioner token for a node the first time the node is started.
    #-Dcassandra.initial_token=token
    
    # Set to false to start Cassandra on a node but not have the node join the cluster.
    #-Dcassandra.join_ring=true|false
    
    # Set to false to clear all gossip state for the node on restart. Use when you have changed node
    # information in cassandra.yaml (such as listen_address).
    #-Dcassandra.load_ring_state=true|false
    
    # Enable pluggable metrics reporter. See Pluggable metrics reporting in Cassandra 2.0.2.
    #-Dcassandra.metricsReporterConfigFile=file
    
    # Set the port on which the CQL native transport listens for clients. (Default: 9042)
    #-Dcassandra.native_transport_port=port
    
    # Overrides the partitioner. (Default: org.apache.cassandra.dht.Murmur3Partitioner)
    #-Dcassandra.partitioner=partitioner
    
    # To replace a node that has died, restart a new node in its place specifying the address of the
    # dead node. The new node must not have any data in its data directory, that is, it must be in the
    # same state as before bootstrapping.
    #-Dcassandra.replace_address=listen_address or broadcast_address of dead node
    
    # Allow restoring specific tables from an archived commit log.
    #-Dcassandra.replayList=table
    
    # Allows overriding of the default RING_DELAY (30000ms), which is the amount of time a node waits
    # before joining the ring.
    #-Dcassandra.ring_delay_ms=ms
    
    # Set the port for the Thrift RPC service, which is used for client connections. (Default: 9160)
    #-Dcassandra.rpc_port=port
    
    # Set the SSL port for encrypted communication. (Default: 7001)
    #-Dcassandra.ssl_storage_port=port
    
    # Enable or disable the native transport server. See start_native_transport in cassandra.yaml.
    # cassandra.start_native_transport=true|false
    
    # Enable or disable the Thrift RPC server. (Default: true)
    #-Dcassandra.start_rpc=true/false
    
    # Set the port for inter-node communication. (Default: 7000)
    #-Dcassandra.storage_port=port
    
    # Set the default location for the trigger JARs. (Default: conf/triggers)
    #-Dcassandra.triggers_dir=directory
    
    # For testing new compaction and compression strategies. It allows you to experiment with different
    # strategies and benchmark write performance differences without affecting the production workload. 
    #-Dcassandra.write_survey=true
    
    # To disable configuration via JMX of auth caches (such as those for credentials, permissions and
    # roles). This will mean those config options can only be set (persistently) in cassandra.yaml
    # and will require a restart for new values to take effect.
    #-Dcassandra.disable_auth_caches_remote_configuration=true
    
    # To disable dynamic calculation of the page size used when indexing an entire partition (during
    # initial index build/rebuild). If set to true, the page size will be fixed to the default of
    # 10000 rows per page.
    #-Dcassandra.force_default_indexing_page_size=true
    
    ########################
    # GENERAL JVM SETTINGS #
    ########################
    
    # enable assertions. highly suggested for correct application functionality.
    -ea
    
    # enable thread priorities, primarily so we can give periodic tasks
    # a lower priority to avoid interfering with client workload
    -XX:+UseThreadPriorities
    
    # allows lowering thread priority without being root on linux - probably
    # not necessary on Windows but doesn't harm anything.
    # see http://tech.stolsvik.com/2010/01/linux-java-thread-priorities-workar
    -XX:ThreadPriorityPolicy=42
    
    # Enable heap-dump if there's an OOM
    -XX:+HeapDumpOnOutOfMemoryError
    
    # Per-thread stack size.
    -Xss256k
    
    # Larger interned string table, for gossip's benefit (CASSANDRA-6410)
    -XX:StringTableSize=1000003
    
    # Make sure all memory is faulted and zeroed on startup.
    # This helps prevent soft faults in containers and makes
    # transparent hugepage allocation more effective.
    -XX:+AlwaysPreTouch
    
    # Disable biased locking as it does not benefit Cassandra.
    -XX:-UseBiasedLocking
    
    # Enable thread-local allocation blocks and allow the JVM to automatically
    # resize them at runtime.
    -XX:+UseTLAB
    -XX:+ResizeTLAB
    -XX:+UseNUMA
    
    # http://www.evanjones.ca/jvm-mmap-pause.html
    -XX:+PerfDisableSharedMem
    
    ### Debug options
    
    # uncomment to enable flight recorder
    #-XX:+UnlockCommercialFeatures
    #-XX:+FlightRecorder
    
    # uncomment to have Cassandra JVM listen for remote debuggers/profilers on port 1414
    #-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1414
    
    # uncomment to have Cassandra JVM log internal method compilation (developers only)
    #-XX:+UnlockDiagnosticVMOptions
    #-XX:+LogCompilation
    
    #################
    # HEAP SETTINGS #
    #################
    
    # Heap size is automatically calculated by cassandra-env based on this
    # formula: max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB))
    # That is:
    # - calculate 1/2 ram and cap to 1024MB
    # - calculate 1/4 ram and cap to 8192MB
    # - pick the max
    #
    # For production use you may wish to adjust this for your environment.
    # If that's the case, uncomment the -Xmx and Xms options below to override the
    # automatic calculation of JVM heap memory.
    #
    # It is recommended to set min (-Xms) and max (-Xmx) heap sizes to
    # the same value to avoid stop-the-world GC pauses during resize, and
    # so that we can lock the heap in memory on startup to prevent any
    # of it from being swapped out.
    #-Xms4G
    #-Xmx4G
    
    # Young generation size is automatically calculated by cassandra-env
    # based on this formula: min(100 * num_cores, 1/4 * heap size)
    #
    # The main trade-off for the young generation is that the larger it
    # is, the longer GC pause times will be. The shorter it is, the more
    # expensive GC will be (usually).
    #
    # It is not recommended to set the young generation size if using the
    # G1 GC, since that will override the target pause-time goal.
    # More info: http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html
    #
    # The example below assumes a modern 8-core+ machine for decent
    # times. If in doubt, and if you do not particularly want to tweak, go
    # 100 MB per physical CPU core.
    #-Xmn800M
    
    ###################################
    # EXPIRATION DATE OVERFLOW POLICY #
    ###################################
    
    # Defines how to handle INSERT requests with TTL exceeding the maximum supported expiration date:
    # * REJECT: this is the default policy and will reject any requests with expiration date timestamp after 2038-01-19T03:14:06+00:00.
    # * CAP: any insert with TTL expiring after 2038-01-19T03:14:06+00:00 will expire on 2038-01-19T03:14:06+00:00 and the client will receive a warning.
    # * CAP_NOWARN: same as previous, except that the client warning will not be emitted.
    #
    #-Dcassandra.expiration_date_overflow_policy=REJECT
    
    #################
    #  GC SETTINGS  #
    #################
    
    ### CMS Settings
    
    -XX:+UseParNewGC
    -XX:+UseConcMarkSweepGC
    -XX:+CMSParallelRemarkEnabled
    -XX:SurvivorRatio=8
    -XX:MaxTenuringThreshold=1
    -XX:CMSInitiatingOccupancyFraction=75
    -XX:+UseCMSInitiatingOccupancyOnly
    -XX:CMSWaitDuration=10000
    -XX:+CMSParallelInitialMarkEnabled
    -XX:+CMSEdenChunksRecordAlways
    # some JVMs will fill up their heap when accessed via JMX, see CASSANDRA-6541
    -XX:+CMSClassUnloadingEnabled
    
    ### G1 Settings (experimental, comment previous section and uncomment section below to enable)
    
    ## Use the Hotspot garbage-first collector.
    #-XX:+UseG1GC
    #
    ## Have the JVM do less remembered set work during STW, instead
    ## preferring concurrent GC. Reduces p99.9 latency.
    #-XX:G1RSetUpdatingPauseTimePercent=5
    #
    ## Main G1GC tunable: lowering the pause target will lower throughput and vise versa.
    ## 200ms is the JVM default and lowest viable setting
    ## 1000ms increases throughput. Keep it smaller than the timeouts in cassandra.yaml.
    #-XX:MaxGCPauseMillis=500
    
    ## Optional G1 Settings
    
    # Save CPU time on large (>= 16GB) heaps by delaying region scanning
    # until the heap is 70% full. The default in Hotspot 8u40 is 40%.
    #-XX:InitiatingHeapOccupancyPercent=70
    
    # For systems with > 8 cores, the default ParallelGCThreads is 5/8 the number of logical cores.
    # Otherwise equal to the number of cores when 8 or less.
    # Machines with > 10 cores should try setting these to <= full cores.
    #-XX:ParallelGCThreads=16
    # By default, ConcGCThreads is 1/4 of ParallelGCThreads.
    # Setting both to the same value can reduce STW durations.
    #-XX:ConcGCThreads=16
    
    ### GC logging options -- uncomment to enable
    
    -XX:+PrintGCDetails
    -XX:+PrintGCDateStamps
    -XX:+PrintHeapAtGC
    -XX:+PrintTenuringDistribution
    -XX:+PrintGCApplicationStoppedTime
    -XX:+PrintPromotionFailure
    #-XX:PrintFLSStatistics=1
    #-Xloggc:/var/log/cassandra/gc.log
    -XX:+UseGCLogFileRotation
    -XX:NumberOfGCLogFiles=10
    -XX:GCLogFileSize=10M
    
    -Dcassandra.commitlog.ignorereplayerrors=true -Dcassandra.override_decommission=true
    -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv6Addresses=false


  cassandra.yaml: |
    # Cassandra storage config YAML
    
    # NOTE:
    #   See http://wiki.apache.org/cassandra/StorageConfiguration for
    #   full explanations of configuration directives
    # /NOTE
    
    # The name of the cluster. This is mainly used to prevent machines in
    # one logical cluster from joining another.
    cluster_name: 'Test Cluster'
    
    # This defines the number of tokens randomly assigned to this node on the ring
    # The more tokens, relative to other nodes, the larger the proportion of data
    # that this node will store. You probably want all nodes to have the same number
    # of tokens assuming they have equal hardware capability.
    #
    # If you leave this unspecified, Cassandra will use the default of 1 token for legacy compatibility,
    # and will use the initial_token as described below.
    #
    # Specifying initial_token will override this setting on the node's initial start,
    # on subsequent starts, this setting will apply even if initial token is set.
    #
    # If you already have a cluster with 1 token per node, and wish to migrate to 
    # multiple tokens per node, see http://wiki.apache.org/cassandra/Operations
    num_tokens: 256
    
    # Triggers automatic allocation of num_tokens tokens for this node. The allocation
    # algorithm attempts to choose tokens in a way that optimizes replicated load over
    # the nodes in the datacenter for the replication strategy used by the specified
    # keyspace.
    #
    # The load assigned to each node will be close to proportional to its number of
    # vnodes.
    #
    # Only supported with the Murmur3Partitioner.
    # allocate_tokens_for_keyspace: KEYSPACE
    
    # initial_token allows you to specify tokens manually.  While you can use it with
    # vnodes (num_tokens > 1, above) -- in which case you should provide a 
    # comma-separated list -- it's primarily used when adding nodes to legacy clusters 
    # that do not have vnodes enabled.
    # initial_token:
    
    # See http://wiki.apache.org/cassandra/HintedHandoff
    # May either be "true" or "false" to enable globally
    hinted_handoff_enabled: true
    
    # When hinted_handoff_enabled is true, a black list of data centers that will not
    # perform hinted handoff
    # hinted_handoff_disabled_datacenters:
    #    - DC1
    #    - DC2
    
    # this defines the maximum amount of time a dead host will have hints
    # generated.  After it has been dead this long, new hints for it will not be
    # created until it has been seen alive and gone down again.
    max_hint_window_in_ms: 10800000 # 3 hours
    
    # Maximum throttle in KBs per second, per delivery thread.  This will be
    # reduced proportionally to the number of nodes in the cluster.  (If there
    # are two nodes in the cluster, each delivery thread will use the maximum
    # rate; if there are three, each will throttle to half of the maximum,
    # since we expect two nodes to be delivering hints simultaneously.)
    hinted_handoff_throttle_in_kb: 1024
    
    # Number of threads with which to deliver hints;
    # Consider increasing this number when you have multi-dc deployments, since
    # cross-dc handoff tends to be slower
    max_hints_delivery_threads: 2
    
    # Directory where Cassandra should store hints.
    # If not set, the default directory is $CASSANDRA_HOME/data/hints.
    # hints_directory: /var/lib/cassandra/hints
    
    # How often hints should be flushed from the internal buffers to disk.
    # Will *not* trigger fsync.
    hints_flush_period_in_ms: 10000
    
    # Maximum size for a single hints file, in megabytes.
    max_hints_file_size_in_mb: 128
    
    # Compression to apply to the hint files. If omitted, hints files
    # will be written uncompressed. LZ4, Snappy, and Deflate compressors
    # are supported.
    #hints_compression:
    #   - class_name: LZ4Compressor
    #     parameters:
    #         -
    
    # Maximum throttle in KBs per second, total. This will be
    # reduced proportionally to the number of nodes in the cluster.
    batchlog_replay_throttle_in_kb: 1024
    
    # Authentication backend, implementing IAuthenticator; used to identify users
    # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthenticator,
    # PasswordAuthenticator}.
    #
    # - AllowAllAuthenticator performs no checks - set it to disable authentication.
    # - PasswordAuthenticator relies on username/password pairs to authenticate
    #   users. It keeps usernames and hashed passwords in system_auth.roles table.
    #   Please increase system_auth keyspace replication factor if you use this authenticator.
    #   If using PasswordAuthenticator, CassandraRoleManager must also be used (see below)
    authenticator: AllowAllAuthenticator
    
    # Authorization backend, implementing IAuthorizer; used to limit access/provide permissions
    # Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthorizer,
    # CassandraAuthorizer}.
    #
    # - AllowAllAuthorizer allows any action to any user - set it to disable authorization.
    # - CassandraAuthorizer stores permissions in system_auth.role_permissions table. Please
    #   increase system_auth keyspace replication factor if you use this authorizer.
    authorizer: AllowAllAuthorizer
    
    # Part of the Authentication & Authorization backend, implementing IRoleManager; used
    # to maintain grants and memberships between roles.
    # Out of the box, Cassandra provides org.apache.cassandra.auth.CassandraRoleManager,
    # which stores role information in the system_auth keyspace. Most functions of the
    # IRoleManager require an authenticated login, so unless the configured IAuthenticator
    # actually implements authentication, most of this functionality will be unavailable.
    #
    # - CassandraRoleManager stores role data in the system_auth keyspace. Please
    #   increase system_auth keyspace replication factor if you use this role manager.
    role_manager: CassandraRoleManager
    
    # Validity period for roles cache (fetching granted roles can be an expensive
    # operation depending on the role manager, CassandraRoleManager is one example)
    # Granted roles are cached for authenticated sessions in AuthenticatedUser and
    # after the period specified here, become eligible for (async) reload.
    # Defaults to 2000, set to 0 to disable caching entirely.
    # Will be disabled automatically for AllowAllAuthenticator.
    roles_validity_in_ms: 3600000
    
    # Refresh interval for roles cache (if enabled).
    # After this interval, cache entries become eligible for refresh. Upon next
    # access, an async reload is scheduled and the old value returned until it
    # completes. If roles_validity_in_ms is non-zero, then this must be
    # also.
    # Defaults to the same value as roles_validity_in_ms.
    # roles_update_interval_in_ms: 2000
    
    # Validity period for permissions cache (fetching permissions can be an
    # expensive operation depending on the authorizer, CassandraAuthorizer is
    # one example). Defaults to 2000, set to 0 to disable.
    # Will be disabled automatically for AllowAllAuthorizer.
    permissions_validity_in_ms: 3600000
    
    # Refresh interval for permissions cache (if enabled).
    # After this interval, cache entries become eligible for refresh. Upon next
    # access, an async reload is scheduled and the old value returned until it
    # completes. If permissions_validity_in_ms is non-zero, then this must be
    # also.
    # Defaults to the same value as permissions_validity_in_ms.
    # permissions_update_interval_in_ms: 2000
    
    # Validity period for credentials cache. This cache is tightly coupled to
    # the provided PasswordAuthenticator implementation of IAuthenticator. If
    # another IAuthenticator implementation is configured, this cache will not
    # be automatically used and so the following settings will have no effect.
    # Please note, credentials are cached in their encrypted form, so while
    # activating this cache may reduce the number of queries made to the
    # underlying table, it may not  bring a significant reduction in the
    # latency of individual authentication attempts.
    # Defaults to 2000, set to 0 to disable credentials caching.
    credentials_validity_in_ms: 3600000
    
    # Refresh interval for credentials cache (if enabled).
    # After this interval, cache entries become eligible for refresh. Upon next
    # access, an async reload is scheduled and the old value returned until it
    # completes. If credentials_validity_in_ms is non-zero, then this must be
    # also.
    # Defaults to the same value as credentials_validity_in_ms.
    # credentials_update_interval_in_ms: 2000
    
    # The partitioner is responsible for distributing groups of rows (by
    # partition key) across nodes in the cluster.  You should leave this
    # alone for new clusters.  The partitioner can NOT be changed without
    # reloading all data, so when upgrading you should set this to the
    # same partitioner you were already using.
    #
    # Besides Murmur3Partitioner, partitioners included for backwards
    # compatibility include RandomPartitioner, ByteOrderedPartitioner, and
    # OrderPreservingPartitioner.
    #
    partitioner: org.apache.cassandra.dht.Murmur3Partitioner
    
    # Directories where Cassandra should store data on disk.  Cassandra
    # will spread data evenly across them, subject to the granularity of
    # the configured compaction strategy.
    # If not set, the default directory is $CASSANDRA_HOME/data/data.
    # data_file_directories:
    #     - /var/lib/cassandra/data
    
    # commit log.  when running on magnetic HDD, this should be a
    # separate spindle than the data directories.
    # If not set, the default directory is $CASSANDRA_HOME/data/commitlog.
    # commitlog_directory: /var/lib/cassandra/commitlog
    
    # Enable / disable CDC functionality on a per-node basis. This modifies the logic used
    # for write path allocation rejection (standard: never reject. cdc: reject Mutation
    # containing a CDC-enabled table if at space limit in cdc_raw_directory).
    cdc_enabled: false
    
    # CommitLogSegments are moved to this directory on flush if cdc_enabled: true and the
    # segment contains mutations for a CDC-enabled table. This should be placed on a
    # separate spindle than the data directories. If not set, the default directory is
    # $CASSANDRA_HOME/data/cdc_raw.
    # cdc_raw_directory: /var/lib/cassandra/cdc_raw
    
    # Policy for data disk failures:
    #
    # die
    #   shut down gossip and client transports and kill the JVM for any fs errors or
    #   single-sstable errors, so the node can be replaced.
    #
    # stop_paranoid
    #   shut down gossip and client transports even for single-sstable errors,
    #   kill the JVM for errors during startup.
    #
    # stop
    #   shut down gossip and client transports, leaving the node effectively dead, but
    #   can still be inspected via JMX, kill the JVM for errors during startup.
    #
    # best_effort
    #    stop using the failed disk and respond to requests based on
    #    remaining available sstables.  This means you WILL see obsolete
    #    data at CL.ONE!
    #
    # ignore
    #    ignore fatal errors and let requests fail, as in pre-1.2 Cassandra
    disk_failure_policy: stop
    
    # Policy for commit disk failures:
    #
    # die
    #   shut down gossip and Thrift and kill the JVM, so the node can be replaced.
    #
    # stop
    #   shut down gossip and Thrift, leaving the node effectively dead, but
    #   can still be inspected via JMX.
    #
    # stop_commit
    #   shutdown the commit log, letting writes collect but
    #   continuing to service reads, as in pre-2.0.5 Cassandra
    #
    # ignore
    #   ignore fatal errors and let the batches fail
    commit_failure_policy: stop
    
    # Maximum size of the native protocol prepared statement cache
    #
    # Valid values are either "auto" (omitting the value) or a value greater 0.
    #
    # Note that specifying a too large value will result in long running GCs and possbily
    # out-of-memory errors. Keep the value at a small fraction of the heap.
    #
    # If you constantly see "prepared statements discarded in the last minute because
    # cache limit reached" messages, the first step is to investigate the root cause
    # of these messages and check whether prepared statements are used correctly -
    # i.e. use bind markers for variable parts.
    #
    # Do only change the default value, if you really have more prepared statements than
    # fit in the cache. In most cases it is not neccessary to change this value.
    # Constantly re-preparing statements is a performance penalty.
    #
    # Default value ("auto") is 1/256th of the heap or 10MB, whichever is greater
    prepared_statements_cache_size_mb:
    
    # Maximum size of the Thrift prepared statement cache
    #
    # If you do not use Thrift at all, it is safe to leave this value at "auto".
    #
    # See description of 'prepared_statements_cache_size_mb' above for more information.
    #
    # Default value ("auto") is 1/256th of the heap or 10MB, whichever is greater
    thrift_prepared_statements_cache_size_mb:
    
    # Maximum size of the key cache in memory.
    #
    # Each key cache hit saves 1 seek and each row cache hit saves 2 seeks at the
    # minimum, sometimes more. The key cache is fairly tiny for the amount of
    # time it saves, so it's worthwhile to use it at large numbers.
    # The row cache saves even more time, but must contain the entire row,
    # so it is extremely space-intensive. It's best to only use the
    # row cache if you have hot rows or static rows.
    #
    # NOTE: if you reduce the size, you may not get you hottest keys loaded on startup.
    #
    # Default value is empty to make it "auto" (min(5% of Heap (in MB), 100MB)). Set to 0 to disable key cache.
    key_cache_size_in_mb:
    
    # Duration in seconds after which Cassandra should
    # save the key cache. Caches are saved to saved_caches_directory as
    # specified in this configuration file.
    #
    # Saved caches greatly improve cold-start speeds, and is relatively cheap in
    # terms of I/O for the key cache. Row cache saving is much more expensive and
    # has limited use.
    #
    # Default is 14400 or 4 hours.
    key_cache_save_period: 14400
    
    # Number of keys from the key cache to save
    # Disabled by default, meaning all keys are going to be saved
    # key_cache_keys_to_save: 100
    
    # Row cache implementation class name. Available implementations:
    #
    # org.apache.cassandra.cache.OHCProvider
    #   Fully off-heap row cache implementation (default).
    #
    # org.apache.cassandra.cache.SerializingCacheProvider
    #   This is the row cache implementation availabile
    #   in previous releases of Cassandra.
    # row_cache_class_name: org.apache.cassandra.cache.OHCProvider
    
    # Maximum size of the row cache in memory.
    # Please note that OHC cache implementation requires some additional off-heap memory to manage
    # the map structures and some in-flight memory during operations before/after cache entries can be
    # accounted against the cache capacity. This overhead is usually small compared to the whole capacity.
    # Do not specify more memory that the system can afford in the worst usual situation and leave some
    # headroom for OS block level cache. Do never allow your system to swap.
    #
    # Default value is 0, to disable row caching.
    row_cache_size_in_mb: 0
    
    # Duration in seconds after which Cassandra should save the row cache.
    # Caches are saved to saved_caches_directory as specified in this configuration file.
    #
    # Saved caches greatly improve cold-start speeds, and is relatively cheap in
    # terms of I/O for the key cache. Row cache saving is much more expensive and
    # has limited use.
    #
    # Default is 0 to disable saving the row cache.
    row_cache_save_period: 0
    
    # Number of keys from the row cache to save.
    # Specify 0 (which is the default), meaning all keys are going to be saved
    # row_cache_keys_to_save: 100
    
    # Maximum size of the counter cache in memory.
    #
    # Counter cache helps to reduce counter locks' contention for hot counter cells.
    # In case of RF = 1 a counter cache hit will cause Cassandra to skip the read before
    # write entirely. With RF > 1 a counter cache hit will still help to reduce the duration
    # of the lock hold, helping with hot counter cell updates, but will not allow skipping
    # the read entirely. Only the local (clock, count) tuple of a counter cell is kept
    # in memory, not the whole counter, so it's relatively cheap.
    #
    # NOTE: if you reduce the size, you may not get you hottest keys loaded on startup.
    #
    # Default value is empty to make it "auto" (min(2.5% of Heap (in MB), 50MB)). Set to 0 to disable counter cache.
    # NOTE: if you perform counter deletes and rely on low gcgs, you should disable the counter cache.
    counter_cache_size_in_mb:
    
    # Duration in seconds after which Cassandra should
    # save the counter cache (keys only). Caches are saved to saved_caches_directory as
    # specified in this configuration file.
    #
    # Default is 7200 or 2 hours.
    counter_cache_save_period: 7200
    
    # Number of keys from the counter cache to save
    # Disabled by default, meaning all keys are going to be saved
    # counter_cache_keys_to_save: 100
    
    # saved caches
    # If not set, the default directory is $CASSANDRA_HOME/data/saved_caches.
    # saved_caches_directory: /var/lib/cassandra/saved_caches
    
    # commitlog_sync may be either "periodic" or "batch." 
    # 
    # When in batch mode, Cassandra won't ack writes until the commit log
    # has been fsynced to disk.  It will wait
    # commitlog_sync_batch_window_in_ms milliseconds between fsyncs.
    # This window should be kept short because the writer threads will
    # be unable to do extra work while waiting.  (You may need to increase
    # concurrent_writes for the same reason.)
    #
    # commitlog_sync: batch
    # commitlog_sync_batch_window_in_ms: 2
    #
    # the other option is "periodic" where writes may be acked immediately
    # and the CommitLog is simply synced every commitlog_sync_period_in_ms
    # milliseconds.
    commitlog_sync: periodic
    commitlog_sync_period_in_ms: 10000
    
    # The size of the individual commitlog file segments.  A commitlog
    # segment may be archived, deleted, or recycled once all the data
    # in it (potentially from each columnfamily in the system) has been
    # flushed to sstables.
    #
    # The default size is 32, which is almost always fine, but if you are
    # archiving commitlog segments (see commitlog_archiving.properties),
    # then you probably want a finer granularity of archiving; 8 or 16 MB
    # is reasonable.
    # Max mutation size is also configurable via max_mutation_size_in_kb setting in
    # cassandra.yaml. The default is half the size commitlog_segment_size_in_mb * 1024.
    # This should be positive and less than 2048.
    #
    # NOTE: If max_mutation_size_in_kb is set explicitly then commitlog_segment_size_in_mb must
    # be set to at least twice the size of max_mutation_size_in_kb / 1024
    #
    commitlog_segment_size_in_mb: 32
    
    # Compression to apply to the commit log. If omitted, the commit log
    # will be written uncompressed.  LZ4, Snappy, and Deflate compressors
    # are supported.
    # commitlog_compression:
    #   - class_name: LZ4Compressor
    #     parameters:
    #         -
    
    # any class that implements the SeedProvider interface and has a
    # constructor that takes a Map<String, String> of parameters will do.
    seed_provider:
        # Addresses of hosts that are deemed contact points. 
        # Cassandra nodes use this list of hosts to find each other and learn
        # the topology of the ring.  You must change this if you are running
        # multiple nodes!
        - class_name: org.apache.cassandra.locator.SimpleSeedProvider
          parameters:
              # seeds is actually a comma-delimited list of addresses.
              # Ex: "<ip1>,<ip2>,<ip3>"
              - seeds: "127.0.0.1"
    
    # For workloads with more data than can fit in memory, Cassandra's
    # bottleneck will be reads that need to fetch data from
    # disk. "concurrent_reads" should be set to (16 * number_of_drives) in
    # order to allow the operations to enqueue low enough in the stack
    # that the OS and drives can reorder them. Same applies to
    # "concurrent_counter_writes", since counter writes read the current
    # values before incrementing and writing them back.
    #
    # On the other hand, since writes are almost never IO bound, the ideal
    # number of "concurrent_writes" is dependent on the number of cores in
    # your system; (8 * number_of_cores) is a good rule of thumb.
    concurrent_reads: 32
    concurrent_writes: 32
    concurrent_counter_writes: 32
    
    # For materialized view writes, as there is a read involved, so this should
    # be limited by the less of concurrent reads or concurrent writes.
    concurrent_materialized_view_writes: 32
    
    # Maximum memory to use for sstable chunk cache and buffer pooling.
    # 32MB of this are reserved for pooling buffers, the rest is used as an
    # cache that holds uncompressed sstable chunks.
    # Defaults to the smaller of 1/4 of heap or 512MB. This pool is allocated off-heap,
    # so is in addition to the memory allocated for heap. The cache also has on-heap
    # overhead which is roughly 128 bytes per chunk (i.e. 0.2% of the reserved size
    # if the default 64k chunk size is used).
    # Memory is only allocated when needed.
    # file_cache_size_in_mb: 512
    
    # Flag indicating whether to allocate on or off heap when the sstable buffer
    # pool is exhausted, that is when it has exceeded the maximum memory
    # file_cache_size_in_mb, beyond which it will not cache buffers but allocate on request.
    
    # buffer_pool_use_heap_if_exhausted: true
    
    # The strategy for optimizing disk read
    # Possible values are:
    # ssd (for solid state disks, the default)
    # spinning (for spinning disks)
    # disk_optimization_strategy: ssd
    
    # Total permitted memory to use for memtables. Cassandra will stop
    # accepting writes when the limit is exceeded until a flush completes,
    # and will trigger a flush based on memtable_cleanup_threshold
    # If omitted, Cassandra will set both to 1/4 the size of the heap.
    # memtable_heap_space_in_mb: 2048
    # memtable_offheap_space_in_mb: 2048
    
    # memtable_cleanup_threshold is deprecated. The default calculation
    # is the only reasonable choice. See the comments on  memtable_flush_writers
    # for more information.
    #
    # Ratio of occupied non-flushing memtable size to total permitted size
    # that will trigger a flush of the largest memtable. Larger mct will
    # mean larger flushes and hence less compaction, but also less concurrent
    # flush activity which can make it difficult to keep your disks fed
    # under heavy write load.
    #
    # memtable_cleanup_threshold defaults to 1 / (memtable_flush_writers + 1)
    # memtable_cleanup_threshold: 0.11
    
    # Specify the way Cassandra allocates and manages memtable memory.
    # Options are:
    #
    # heap_buffers
    #   on heap nio buffers
    #
    # offheap_buffers
    #   off heap (direct) nio buffers
    #
    # offheap_objects
    #    off heap objects
    memtable_allocation_type: heap_buffers
    
    # Total space to use for commit logs on disk.
    #
    # If space gets above this value, Cassandra will flush every dirty CF
    # in the oldest segment and remove it.  So a small total commitlog space
    # will tend to cause more flush activity on less-active columnfamilies.
    #
    # The default value is the smaller of 8192, and 1/4 of the total space
    # of the commitlog volume.
    #
    # commitlog_total_space_in_mb: 8192
    
    # This sets the number of memtable flush writer threads per disk
    # as well as the total number of memtables that can be flushed concurrently.
    # These are generally a combination of compute and IO bound.
    #
    # Memtable flushing is more CPU efficient than memtable ingest and a single thread
    # can keep up with the ingest rate of a whole server on a single fast disk
    # until it temporarily becomes IO bound under contention typically with compaction.
    # At that point you need multiple flush threads. At some point in the future
    # it may become CPU bound all the time.
    #
    # You can tell if flushing is falling behind using the MemtablePool.BlockedOnAllocation
    # metric which should be 0, but will be non-zero if threads are blocked waiting on flushing
    # to free memory.
    #
    # memtable_flush_writers defaults to two for a single data directory.
    # This means that two  memtables can be flushed concurrently to the single data directory.
    # If you have multiple data directories the default is one memtable flushing at a time
    # but the flush will use a thread per data directory so you will get two or more writers.
    #
    # Two is generally enough to flush on a fast disk [array] mounted as a single data directory.
    # Adding more flush writers will result in smaller more frequent flushes that introduce more
    # compaction overhead.
    #
    # There is a direct tradeoff between number of memtables that can be flushed concurrently
    # and flush size and frequency. More is not better you just need enough flush writers
    # to never stall waiting for flushing to free memory.
    #
    #memtable_flush_writers: 2
    
    # Total space to use for change-data-capture logs on disk.
    #
    # If space gets above this value, Cassandra will throw WriteTimeoutException
    # on Mutations including tables with CDC enabled. A CDCCompactor is responsible
    # for parsing the raw CDC logs and deleting them when parsing is completed.
    #
    # The default value is the min of 4096 mb and 1/8th of the total space
    # of the drive where cdc_raw_directory resides.
    # cdc_total_space_in_mb: 4096
    
    # When we hit our cdc_raw limit and the CDCCompactor is either running behind
    # or experiencing backpressure, we check at the following interval to see if any
    # new space for cdc-tracked tables has been made available. Default to 250ms
    # cdc_free_space_check_interval_ms: 250
    
    # A fixed memory pool size in MB for for SSTable index summaries. If left
    # empty, this will default to 5% of the heap size. If the memory usage of
    # all index summaries exceeds this limit, SSTables with low read rates will
    # shrink their index summaries in order to meet this limit.  However, this
    # is a best-effort process. In extreme conditions Cassandra may need to use
    # more than this amount of memory.
    index_summary_capacity_in_mb:
    
    # How frequently index summaries should be resampled.  This is done
    # periodically to redistribute memory from the fixed-size pool to sstables
    # proportional their recent read rates.  Setting to -1 will disable this
    # process, leaving existing index summaries at their current sampling level.
    index_summary_resize_interval_in_minutes: 60
    
    # Whether to, when doing sequential writing, fsync() at intervals in
    # order to force the operating system to flush the dirty
    # buffers. Enable this to avoid sudden dirty buffer flushing from
    # impacting read latencies. Almost always a good idea on SSDs; not
    # necessarily on platters.
    trickle_fsync: false
    trickle_fsync_interval_in_kb: 10240
    
    # TCP port, for commands and data
    # For security reasons, you should not expose this port to the internet.  Firewall it if needed.
    storage_port: 7000
    
    # SSL port, for encrypted communication.  Unused unless enabled in
    # encryption_options
    # For security reasons, you should not expose this port to the internet.  Firewall it if needed.
    ssl_storage_port: 7001
    
    # Address or interface to bind to and tell other Cassandra nodes to connect to.
    # You _must_ change this if you want multiple nodes to be able to communicate!
    #
    # Set listen_address OR listen_interface, not both.
    #
    # Leaving it blank leaves it up to InetAddress.getLocalHost(). This
    # will always do the Right Thing _if_ the node is properly configured
    # (hostname, name resolution, etc), and the Right Thing is to use the
    # address associated with the hostname (it might not be).
    #
    # Setting listen_address to 0.0.0.0 is always wrong.
    #
    listen_address: localhost
    
    # Set listen_address OR listen_interface, not both. Interfaces must correspond
    # to a single address, IP aliasing is not supported.
    # listen_interface: eth0
    
    # If you choose to specify the interface by name and the interface has an ipv4 and an ipv6 address
    # you can specify which should be chosen using listen_interface_prefer_ipv6. If false the first ipv4
    # address will be used. If true the first ipv6 address will be used. Defaults to false preferring
    # ipv4. If there is only one address it will be selected regardless of ipv4/ipv6.
    # listen_interface_prefer_ipv6: false
    
    # Address to broadcast to other Cassandra nodes
    # Leaving this blank will set it to the same value as listen_address
    # broadcast_address: 1.2.3.4
    
    # When using multiple physical network interfaces, set this
    # to true to listen on broadcast_address in addition to
    # the listen_address, allowing nodes to communicate in both
    # interfaces.
    # Ignore this property if the network configuration automatically
    # routes  between the public and private networks such as EC2.
    # listen_on_broadcast_address: false
    
    # Internode authentication backend, implementing IInternodeAuthenticator;
    # used to allow/disallow connections from peer nodes.
    # internode_authenticator: org.apache.cassandra.auth.AllowAllInternodeAuthenticator
    
    # Whether to start the native transport server.
    # Please note that the address on which the native transport is bound is the
    # same as the rpc_address. The port however is different and specified below.
    start_native_transport: true
    # port for the CQL native transport to listen for clients on
    # For security reasons, you should not expose this port to the internet.  Firewall it if needed.
    native_transport_port: 9042
    # Enabling native transport encryption in client_encryption_options allows you to either use
    # encryption for the standard port or to use a dedicated, additional port along with the unencrypted
    # standard native_transport_port.
    # Enabling client encryption and keeping native_transport_port_ssl disabled will use encryption
    # for native_transport_port. Setting native_transport_port_ssl to a different value
    # from native_transport_port will use encryption for native_transport_port_ssl while
    # keeping native_transport_port unencrypted.
    # native_transport_port_ssl: 9142
    # The maximum threads for handling requests when the native transport is used.
    # This is similar to rpc_max_threads though the default differs slightly (and
    # there is no native_transport_min_threads, idle threads will always be stopped
    # after 30 seconds).
    # native_transport_max_threads: 128
    #
    # The maximum size of allowed frame. Frame (requests) larger than this will
    # be rejected as invalid. The default is 256MB. If you're changing this parameter,
    # you may want to adjust max_value_size_in_mb accordingly. This should be positive and less than 2048.
    # native_transport_max_frame_size_in_mb: 256
    
    # The maximum number of concurrent client connections.
    # The default is -1, which means unlimited.
    # native_transport_max_concurrent_connections: -1
    
    # The maximum number of concurrent client connections per source ip.
    # The default is -1, which means unlimited.
    # native_transport_max_concurrent_connections_per_ip: -1
    
    # Whether to start the thrift rpc server.
    start_rpc: false
    
    # The address or interface to bind the Thrift RPC service and native transport
    # server to.
    #
    # Set rpc_address OR rpc_interface, not both.
    #
    # Leaving rpc_address blank has the same effect as on listen_address
    # (i.e. it will be based on the configured hostname of the node).
    #
    # Note that unlike listen_address, you can specify 0.0.0.0, but you must also
    # set broadcast_rpc_address to a value other than 0.0.0.0.
    #
    # For security reasons, you should not expose this port to the internet.  Firewall it if needed.
    rpc_address: localhost
    
    # Set rpc_address OR rpc_interface, not both. Interfaces must correspond
    # to a single address, IP aliasing is not supported.
    # rpc_interface: eth1
    
    # If you choose to specify the interface by name and the interface has an ipv4 and an ipv6 address
    # you can specify which should be chosen using rpc_interface_prefer_ipv6. If false the first ipv4
    # address will be used. If true the first ipv6 address will be used. Defaults to false preferring
    # ipv4. If there is only one address it will be selected regardless of ipv4/ipv6.
    # rpc_interface_prefer_ipv6: false
    
    # port for Thrift to listen for clients on
    rpc_port: 9160
    
    # RPC address to broadcast to drivers and other Cassandra nodes. This cannot
    # be set to 0.0.0.0. If left blank, this will be set to the value of
    # rpc_address. If rpc_address is set to 0.0.0.0, broadcast_rpc_address must
    # be set.
    # broadcast_rpc_address: 1.2.3.4
    
    # enable or disable keepalive on rpc/native connections
    rpc_keepalive: true
    
    # Cassandra provides two out-of-the-box options for the RPC Server:
    #
    # sync
    #   One thread per thrift connection. For a very large number of clients, memory
    #   will be your limiting factor. On a 64 bit JVM, 180KB is the minimum stack size
    #   per thread, and that will correspond to your use of virtual memory (but physical memory
    #   may be limited depending on use of stack space).
    #
    # hsha
    #   Stands for "half synchronous, half asynchronous." All thrift clients are handled
    #   asynchronously using a small number of threads that does not vary with the amount
    #   of thrift clients (and thus scales well to many clients). The rpc requests are still
    #   synchronous (one thread per active request). If hsha is selected then it is essential
    #   that rpc_max_threads is changed from the default value of unlimited.
    #
    # The default is sync because on Windows hsha is about 30% slower.  On Linux,
    # sync/hsha performance is about the same, with hsha of course using less memory.
    #
    # Alternatively,  can provide your own RPC server by providing the fully-qualified class name
    # of an o.a.c.t.TServerFactory that can create an instance of it.
    rpc_server_type: sync
    
    # Uncomment rpc_min|max_thread to set request pool size limits.
    #
    # Regardless of your choice of RPC server (see above), the number of maximum requests in the
    # RPC thread pool dictates how many concurrent requests are possible (but if you are using the sync
    # RPC server, it also dictates the number of clients that can be connected at all).
    #
    # The default is unlimited and thus provides no protection against clients overwhelming the server. You are
    # encouraged to set a maximum that makes sense for you in production, but do keep in mind that
    # rpc_max_threads represents the maximum number of client requests this server may execute concurrently.
    #
    # rpc_min_threads: 16
    # rpc_max_threads: 2048
    
    # uncomment to set socket buffer sizes on rpc connections
    # rpc_send_buff_size_in_bytes:
    # rpc_recv_buff_size_in_bytes:
    
    # Uncomment to set socket buffer size for internode communication
    # Note that when setting this, the buffer size is limited by net.core.wmem_max
    # and when not setting it it is defined by net.ipv4.tcp_wmem
    # See also:
    # /proc/sys/net/core/wmem_max
    # /proc/sys/net/core/rmem_max
    # /proc/sys/net/ipv4/tcp_wmem
    # /proc/sys/net/ipv4/tcp_wmem
    # and 'man tcp'
    # internode_send_buff_size_in_bytes:
    
    # Uncomment to set socket buffer size for internode communication
    # Note that when setting this, the buffer size is limited by net.core.wmem_max
    # and when not setting it it is defined by net.ipv4.tcp_wmem
    # internode_recv_buff_size_in_bytes:
    
    # Frame size for thrift (maximum message length).
    thrift_framed_transport_size_in_mb: 15
    
    # Set to true to have Cassandra create a hard link to each sstable
    # flushed or streamed locally in a backups/ subdirectory of the
    # keyspace data.  Removing these links is the operator's
    # responsibility.
    incremental_backups: false
    
    # Whether or not to take a snapshot before each compaction.  Be
    # careful using this option, since Cassandra won't clean up the
    # snapshots for you.  Mostly useful if you're paranoid when there
    # is a data format change.
    snapshot_before_compaction: false
    
    # Whether or not a snapshot is taken of the data before keyspace truncation
    # or dropping of column families. The STRONGLY advised default of true 
    # should be used to provide data safety. If you set this flag to false, you will
    # lose data on truncation or drop.
    auto_snapshot: true
    
    # Granularity of the collation index of rows within a partition.
    # Increase if your rows are large, or if you have a very large
    # number of rows per partition.  The competing goals are these:
    #
    # - a smaller granularity means more index entries are generated
    #   and looking up rows withing the partition by collation column
    #   is faster
    # - but, Cassandra will keep the collation index in memory for hot
    #   rows (as part of the key cache), so a larger granularity means
    #   you can cache more hot rows
    column_index_size_in_kb: 64
    
    # Per sstable indexed key cache entries (the collation index in memory
    # mentioned above) exceeding this size will not be held on heap.
    # This means that only partition information is held on heap and the
    # index entries are read from disk.
    #
    # Note that this size refers to the size of the
    # serialized index information and not the size of the partition.
    column_index_cache_size_in_kb: 2
    
    # Number of simultaneous compactions to allow, NOT including
    # validation "compactions" for anti-entropy repair.  Simultaneous
    # compactions can help preserve read performance in a mixed read/write
    # workload, by mitigating the tendency of small sstables to accumulate
    # during a single long running compactions. The default is usually
    # fine and if you experience problems with compaction running too
    # slowly or too fast, you should look at
    # compaction_throughput_mb_per_sec first.
    #
    # concurrent_compactors defaults to the smaller of (number of disks,
    # number of cores), with a minimum of 2 and a maximum of 8.
    # 
    # If your data directories are backed by SSD, you should increase this
    # to the number of cores.
    #concurrent_compactors: 1
    
    # Throttles compaction to the given total throughput across the entire
    # system. The faster you insert data, the faster you need to compact in
    # order to keep the sstable count down, but in general, setting this to
    # 16 to 32 times the rate you are inserting data is more than sufficient.
    # Setting this to 0 disables throttling. Note that this account for all types
    # of compaction, including validation compaction.
    compaction_throughput_mb_per_sec: 16
    
    # When compacting, the replacement sstable(s) can be opened before they
    # are completely written, and used in place of the prior sstables for
    # any range that has been written. This helps to smoothly transfer reads 
    # between the sstables, reducing page cache churn and keeping hot rows hot
    sstable_preemptive_open_interval_in_mb: 50
    
    # Throttles all outbound streaming file transfers on this node to the
    # given total throughput in Mbps. This is necessary because Cassandra does
    # mostly sequential IO when streaming data during bootstrap or repair, which
    # can lead to saturating the network connection and degrading rpc performance.
    # When unset, the default is 200 Mbps or 25 MB/s.
    # stream_throughput_outbound_megabits_per_sec: 200
    
    # Throttles all streaming file transfer between the datacenters,
    # this setting allows users to throttle inter dc stream throughput in addition
    # to throttling all network stream traffic as configured with
    # stream_throughput_outbound_megabits_per_sec
    # When unset, the default is 200 Mbps or 25 MB/s
    # inter_dc_stream_throughput_outbound_megabits_per_sec: 200
    
    # How long the coordinator should wait for read operations to complete
    read_request_timeout_in_ms: 5000
    # How long the coordinator should wait for seq or index scans to complete
    range_request_timeout_in_ms: 10000
    # How long the coordinator should wait for writes to complete
    write_request_timeout_in_ms: 2000
    # How long the coordinator should wait for counter writes to complete
    counter_write_request_timeout_in_ms: 5000
    # How long a coordinator should continue to retry a CAS operation
    # that contends with other proposals for the same row
    cas_contention_timeout_in_ms: 1000
    # How long the coordinator should wait for truncates to complete
    # (This can be much longer, because unless auto_snapshot is disabled
    # we need to flush first so we can snapshot before removing the data.)
    truncate_request_timeout_in_ms: 60000
    # The default timeout for other, miscellaneous operations
    request_timeout_in_ms: 15000
    
    # How long before a node logs slow queries. Select queries that take longer than
    # this timeout to execute, will generate an aggregated log message, so that slow queries
    # can be identified. Set this value to zero to disable slow query logging.
    slow_query_log_timeout_in_ms: 500
    
    # Enable operation timeout information exchange between nodes to accurately
    # measure request timeouts.  If disabled, replicas will assume that requests
    # were forwarded to them instantly by the coordinator, which means that
    # under overload conditions we will waste that much extra time processing 
    # already-timed-out requests.
    #
    # Warning: before enabling this property make sure to ntp is installed
    # and the times are synchronized between the nodes.
    cross_node_timeout: false
    
    # Set keep-alive period for streaming
    # This node will send a keep-alive message periodically with this period.
    # If the node does not receive a keep-alive message from the peer for
    # 2 keep-alive cycles the stream session times out and fail
    # Default value is 300s (5 minutes), which means stalled stream
    # times out in 10 minutes by default
    # streaming_keep_alive_period_in_secs: 300
    
    # phi value that must be reached for a host to be marked down.
    # most users should never need to adjust this.
    # phi_convict_threshold: 8
    
    # endpoint_snitch -- Set this to a class that implements
    # IEndpointSnitch.  The snitch has two functions:
    #
    # - it teaches Cassandra enough about your network topology to route
    #   requests efficiently
    # - it allows Cassandra to spread replicas around your cluster to avoid
    #   correlated failures. It does this by grouping machines into
    #   "datacenters" and "racks."  Cassandra will do its best not to have
    #   more than one replica on the same "rack" (which may not actually
    #   be a physical location)
    #
    # CASSANDRA WILL NOT ALLOW YOU TO SWITCH TO AN INCOMPATIBLE SNITCH
    # ONCE DATA IS INSERTED INTO THE CLUSTER.  This would cause data loss.
    # This means that if you start with the default SimpleSnitch, which
    # locates every node on "rack1" in "datacenter1", your only options
    # if you need to add another datacenter are GossipingPropertyFileSnitch
    # (and the older PFS).  From there, if you want to migrate to an
    # incompatible snitch like Ec2Snitch you can do it by adding new nodes
    # under Ec2Snitch (which will locate them in a new "datacenter") and
    # decommissioning the old ones.
    #
    # Out of the box, Cassandra provides:
    #
    # SimpleSnitch:
    #    Treats Strategy order as proximity. This can improve cache
    #    locality when disabling read repair.  Only appropriate for
    #    single-datacenter deployments.
    #
    # GossipingPropertyFileSnitch
    #    This should be your go-to snitch for production use.  The rack
    #    and datacenter for the local node are defined in
    #    cassandra-rackdc.properties and propagated to other nodes via
    #    gossip.  If cassandra-topology.properties exists, it is used as a
    #    fallback, allowing migration from the PropertyFileSnitch.
    #
    # PropertyFileSnitch:
    #    Proximity is determined by rack and data center, which are
    #    explicitly configured in cassandra-topology.properties.
    #
    # Ec2Snitch:
    #    Appropriate for EC2 deployments in a single Region. Loads Region
    #    and Availability Zone information from the EC2 API. The Region is
    #    treated as the datacenter, and the Availability Zone as the rack.
    #    Only private IPs are used, so this will not work across multiple
    #    Regions.
    #
    # Ec2MultiRegionSnitch:
    #    Uses public IPs as broadcast_address to allow cross-region
    #    connectivity.  (Thus, you should set seed addresses to the public
    #    IP as well.) You will need to open the storage_port or
    #    ssl_storage_port on the public IP firewall.  (For intra-Region
    #    traffic, Cassandra will switch to the private IP after
    #    establishing a connection.)
    #
    # RackInferringSnitch:
    #    Proximity is determined by rack and data center, which are
    #    assumed to correspond to the 3rd and 2nd octet of each node's IP
    #    address, respectively.  Unless this happens to match your
    #    deployment conventions, this is best used as an example of
    #    writing a custom Snitch class and is provided in that spirit.
    #
    # You can use a custom Snitch by setting this to the full class name
    # of the snitch, which will be assumed to be on your classpath.
    endpoint_snitch: SimpleSnitch
    
    # controls how often to perform the more expensive part of host score
    # calculation
    dynamic_snitch_update_interval_in_ms: 100 
    # controls how often to reset all host scores, allowing a bad host to
    # possibly recover
    dynamic_snitch_reset_interval_in_ms: 600000
    # if set greater than zero and read_repair_chance is < 1.0, this will allow
    # 'pinning' of replicas to hosts in order to increase cache capacity.
    # The badness threshold will control how much worse the pinned host has to be
    # before the dynamic snitch will prefer other replicas over it.  This is
    # expressed as a double which represents a percentage.  Thus, a value of
    # 0.2 means Cassandra would continue to prefer the static snitch values
    # until the pinned host was 20% worse than the fastest.
    dynamic_snitch_badness_threshold: 0.1
    
    # request_scheduler -- Set this to a class that implements
    # RequestScheduler, which will schedule incoming client requests
    # according to the specific policy. This is useful for multi-tenancy
    # with a single Cassandra cluster.
    # NOTE: This is specifically for requests from the client and does
    # not affect inter node communication.
    # org.apache.cassandra.scheduler.NoScheduler - No scheduling takes place
    # org.apache.cassandra.scheduler.RoundRobinScheduler - Round robin of
    # client requests to a node with a separate queue for each
    # request_scheduler_id. The scheduler is further customized by
    # request_scheduler_options as described below.
    request_scheduler: org.apache.cassandra.scheduler.NoScheduler
    
    # Scheduler Options vary based on the type of scheduler
    #
    # NoScheduler
    #   Has no options
    #
    # RoundRobin
    #   throttle_limit
    #     The throttle_limit is the number of in-flight
    #     requests per client.  Requests beyond 
    #     that limit are queued up until
    #     running requests can complete.
    #     The value of 80 here is twice the number of
    #     concurrent_reads + concurrent_writes.
    #   default_weight
    #     default_weight is optional and allows for
    #     overriding the default which is 1.
    #   weights
    #     Weights are optional and will default to 1 or the
    #     overridden default_weight. The weight translates into how
    #     many requests are handled during each turn of the
    #     RoundRobin, based on the scheduler id.
    #
    # request_scheduler_options:
    #    throttle_limit: 80
    #    default_weight: 5
    #    weights:
    #      Keyspace1: 1
    #      Keyspace2: 5
    
    # request_scheduler_id -- An identifier based on which to perform
    # the request scheduling. Currently the only valid option is keyspace.
    # request_scheduler_id: keyspace
    
    # Enable or disable inter-node encryption
    # JVM defaults for supported SSL socket protocols and cipher suites can
    # be replaced using custom encryption options. This is not recommended
    # unless you have policies in place that dictate certain settings, or
    # need to disable vulnerable ciphers or protocols in case the JVM cannot
    # be updated.
    # FIPS compliant settings can be configured at JVM level and should not
    # involve changing encryption settings here:
    # https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/FIPS.html
    # *NOTE* No custom encryption options are enabled at the moment
    # The available internode options are : all, none, dc, rack
    #
    # If set to dc cassandra will encrypt the traffic between the DCs
    # If set to rack cassandra will encrypt the traffic between the racks
    #
    # The passwords used in these options must match the passwords used when generating
    # the keystore and truststore.  For instructions on generating these files, see:
    # http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore
    #
    server_encryption_options:
        internode_encryption: all
        keystore: /certs/node.jks
        keystore_password: cassandra
        truststore: /certs/nodetrustcert.jks
        truststore_password: cassandra
        # More advanced defaults below:
        protocol: TLS
        algorithm: SunX509
        store_type: JKS
        require_client_auth: true
        cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]
        require_endpoint_verification: false
    
    # enable or disable client/server encryption.
    client_encryption_options:
        enabled: true
        # If enabled and optional is set to true encrypted and unencrypted connections are handled.
        optional: false
        keystore: /certs/node.jks
        keystore_password: cassandra
        require_client_auth: true
        # Set trustore and truststore_password if require_client_auth is true
        truststore: /certs/nodetrustcert.jks
        truststore_password: cassandra
        # More advanced defaults below:
        protocol: TLS
        algorithm: SunX509
        store_type: JKS
        cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA]
    
    # internode_compression controls whether traffic between nodes is
    # compressed.
    # Can be:
    #
    # all
    #   all traffic is compressed
    #
    # dc
    #   traffic between different datacenters is compressed
    #
    # none
    #   nothing is compressed.
    internode_compression: dc
    
    # Enable or disable tcp_nodelay for inter-dc communication.
    # Disabling it will result in larger (but fewer) network packets being sent,
    # reducing overhead from the TCP protocol itself, at the cost of increasing
    # latency if you block for cross-datacenter responses.
    inter_dc_tcp_nodelay: false
    
    # TTL for different trace types used during logging of the repair process.
    tracetype_query_ttl: 86400
    tracetype_repair_ttl: 604800
    
    # By default, Cassandra logs GC Pauses greater than 200 ms at INFO level
    # This threshold can be adjusted to minimize logging if necessary
    # gc_log_threshold_in_ms: 200
    
    # If unset, all GC Pauses greater than gc_log_threshold_in_ms will log at
    # INFO level
    # UDFs (user defined functions) are disabled by default.
    # As of Cassandra 3.0 there is a sandbox in place that should prevent execution of evil code.
    enable_user_defined_functions: false
    
    # Enables scripted UDFs (JavaScript UDFs).
    # Java UDFs are always enabled, if enable_user_defined_functions is true.
    # Enable this option to be able to use UDFs with "language javascript" or any custom JSR-223 provider.
    # This option has no effect, if enable_user_defined_functions is false.
    enable_scripted_user_defined_functions: false
    
    # Enables materialized view creation on this node.
    # Materialized views are considered experimental and are not recommended for production use.
    enable_materialized_views: true
    
    # The default Windows kernel timer and scheduling resolution is 15.6ms for power conservation.
    # Lowering this value on Windows can provide much tighter latency and better throughput, however
    # some virtualized environments may see a negative performance impact from changing this setting
    # below their system default. The sysinternals 'clockres' tool can confirm your system's default
    # setting.
    windows_timer_interval: 1
    
    
    # Enables encrypting data at-rest (on disk). Different key providers can be plugged in, but the default reads from
    # a JCE-style keystore. A single keystore can hold multiple keys, but the one referenced by
    # the "key_alias" is the only key that will be used for encrypt opertaions; previously used keys
    # can still (and should!) be in the keystore and will be used on decrypt operations
    # (to handle the case of key rotation).
    #
    # It is strongly recommended to download and install Java Cryptography Extension (JCE)
    # Unlimited Strength Jurisdiction Policy Files for your version of the JDK.
    # (current link: http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html)
    #
    # Currently, only the following file types are supported for transparent data encryption, although
    # more are coming in future cassandra releases: commitlog, hints
    transparent_data_encryption_options:
        enabled:  false
        chunk_length_kb: 64
        cipher: AES/CBC/PKCS5Padding
        key_alias: testing:1
        # CBC IV length for AES needs to be 16 bytes (which is also the default size)
        # iv_length: 16
        key_provider: 
          - class_name: org.apache.cassandra.security.JKSKeyProvider
            parameters: 
              - keystore: conf/.keystore
                keystore_password: cassandra
                store_type: JCEKS
                key_password: cassandra
    
    
    #####################
    # SAFETY THRESHOLDS #
    #####################
    
    # When executing a scan, within or across a partition, we need to keep the
    # tombstones seen in memory so we can return them to the coordinator, which
    # will use them to make sure other replicas also know about the deleted rows.
    # With workloads that generate a lot of tombstones, this can cause performance
    # problems and even exaust the server heap.
    # (http://www.datastax.com/dev/blog/cassandra-anti-patterns-queues-and-queue-like-datasets)
    # Adjust the thresholds here if you understand the dangers and want to
    # scan more tombstones anyway.  These thresholds may also be adjusted at runtime
    # using the StorageService mbean.
    tombstone_warn_threshold: 10000
    tombstone_failure_threshold: 100000
    
    # Log WARN on any multiple-partition batch size exceeding this value. 5kb per batch by default.
    # Caution should be taken on increasing the size of this threshold as it can lead to node instability.
    batch_size_warn_threshold_in_kb: 5
    
    # Fail any multiple-partition batch exceeding this value. 50kb (10x warn threshold) by default.
    batch_size_fail_threshold_in_kb: 1024
    
    # Log WARN on any batches not of type LOGGED than span across more partitions than this limit
    unlogged_batch_across_partitions_warn_threshold: 10
    
    # Log a warning when compacting partitions larger than this value
    compaction_large_partition_warning_threshold_mb: 100
    
    # GC Pauses greater than gc_warn_threshold_in_ms will be logged at WARN level
    # Adjust the threshold based on your application throughput requirement
    # By default, Cassandra logs GC Pauses greater than 200 ms at INFO level
    gc_warn_threshold_in_ms: 1000
    
    # Maximum size of any value in SSTables. Safety measure to detect SSTable corruption
    # early. Any value size larger than this threshold will result into marking an SSTable
    # as corrupted. This should be positive and less than 2048.
    # max_value_size_in_mb: 256
    
    # Back-pressure settings #
    # If enabled, the coordinator will apply the back-pressure strategy specified below to each mutation
    # sent to replicas, with the aim of reducing pressure on overloaded replicas.
    back_pressure_enabled: false
    # The back-pressure strategy applied.
    # The default implementation, RateBasedBackPressure, takes three arguments:
    # high ratio, factor, and flow type, and uses the ratio between incoming mutation responses and outgoing mutation requests.
    # If below high ratio, outgoing mutations are rate limited according to the incoming rate decreased by the given factor;
    # if above high ratio, the rate limiting is increased by the given factor;
    # such factor is usually best configured between 1 and 10, use larger values for a faster recovery
    # at the expense of potentially more dropped mutations;
    # the rate limiting is applied according to the flow type: if FAST, it's rate limited at the speed of the fastest replica,
    # if SLOW at the speed of the slowest one.
    # New strategies can be added. Implementors need to implement org.apache.cassandra.net.BackpressureStrategy and
    # provide a public constructor accepting a Map<String, Object>.
    back_pressure_strategy:
        - class_name: org.apache.cassandra.net.RateBasedBackPressure
          parameters:
            - high_ratio: 0.90
              factor: 5
              flow: FAST
    
    # Coalescing Strategies #
    # Coalescing multiples messages turns out to significantly boost message processing throughput (think doubling or more).
    # On bare metal, the floor for packet processing throughput is high enough that many applications won't notice, but in
    # virtualized environments, the point at which an application can be bound by network packet processing can be
    # surprisingly low compared to the throughput of task processing that is possible inside a VM. It's not that bare metal
    # doesn't benefit from coalescing messages, it's that the number of packets a bare metal network interface can process
    # is sufficient for many applications such that no load starvation is experienced even without coalescing.
    # There are other benefits to coalescing network messages that are harder to isolate with a simple metric like messages
    # per second. By coalescing multiple tasks together, a network thread can process multiple messages for the cost of one
    # trip to read from a socket, and all the task submission work can be done at the same time reducing context switching
    # and increasing cache friendliness of network message processing.
    # See CASSANDRA-8692 for details.
    
    # Strategy to use for coalescing messages in OutboundTcpConnection.
    # Can be fixed, movingaverage, timehorizon, disabled (default).
    # You can also specify a subclass of CoalescingStrategies.CoalescingStrategy by name.
    # otc_coalescing_strategy: DISABLED
    
    # How many microseconds to wait for coalescing. For fixed strategy this is the amount of time after the first
    # message is received before it will be sent with any accompanying messages. For moving average this is the
    # maximum amount of time that will be waited as well as the interval at which messages must arrive on average
    # for coalescing to be enabled.
    # otc_coalescing_window_us: 200
    
    # Do not try to coalesce messages if we already got that many messages. This should be more than 2 and less than 128.
    # otc_coalescing_enough_coalesced_messages: 8
    
    # How many milliseconds to wait between two expiration runs on the backlog (queue) of the OutboundTcpConnection.
    # Expiration is done if messages are piling up in the backlog. Droppable messages are expired to free the memory
    # taken by expired messages. The interval should be between 0 and 1000, and in most installations the default value
    # will be appropriate. A smaller value could potentially expire messages slightly sooner at the expense of more CPU
    # time and queue contention while iterating the backlog of messages.
    # An interval of 0 disables any wait time, which is the behavior of former Cassandra versions.
    #
    # otc_backlog_expiration_interval_ms: 200
    


  cassandra-env.sh: |
    # Licensed to the Apache Software Foundation (ASF) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The ASF licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    calculate_heap_sizes()
    {
        case "`uname`" in
            Linux)
                system_memory_in_mb=`free -m | awk '/:/ {print $2;exit}'`
                system_cpu_cores=`egrep -c 'processor([[:space:]]+):.*' /proc/cpuinfo`
            ;;
            FreeBSD)
                system_memory_in_bytes=`sysctl hw.physmem | awk '{print $2}'`
                system_memory_in_mb=`expr $system_memory_in_bytes / 1024 / 1024`
                system_cpu_cores=`sysctl hw.ncpu | awk '{print $2}'`
            ;;
            SunOS)
                system_memory_in_mb=`prtconf | awk '/Memory size:/ {print $3}'`
                system_cpu_cores=`psrinfo | wc -l`
            ;;
            Darwin)
                system_memory_in_bytes=`sysctl hw.memsize | awk '{print $2}'`
                system_memory_in_mb=`expr $system_memory_in_bytes / 1024 / 1024`
                system_cpu_cores=`sysctl hw.ncpu | awk '{print $2}'`
            ;;
            *)
                # assume reasonable defaults for e.g. a modern desktop or
                # cheap server
                system_memory_in_mb="2048"
                system_cpu_cores="2"
            ;;
        esac
    
        # some systems like the raspberry pi don't report cores, use at least 1
        if [ "$system_cpu_cores" -lt "1" ]
        then
            system_cpu_cores="1"
        fi
    
        # set max heap size based on the following
        # max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB))
        # calculate 1/2 ram and cap to 1024MB
        # calculate 1/4 ram and cap to 8192MB
        # pick the max
        half_system_memory_in_mb=`expr $system_memory_in_mb / 2`
        quarter_system_memory_in_mb=`expr $half_system_memory_in_mb / 2`
        if [ "$half_system_memory_in_mb" -gt "1024" ]
        then
            half_system_memory_in_mb="1024"
        fi
        if [ "$quarter_system_memory_in_mb" -gt "8192" ]
        then
            quarter_system_memory_in_mb="8192"
        fi
        if [ "$half_system_memory_in_mb" -gt "$quarter_system_memory_in_mb" ]
        then
            max_heap_size_in_mb="$half_system_memory_in_mb"
        else
            max_heap_size_in_mb="$quarter_system_memory_in_mb"
        fi
        MAX_HEAP_SIZE="${max_heap_size_in_mb}M"
    
        # Young gen: min(max_sensible_per_modern_cpu_core * num_cores, 1/4 * heap size)
        max_sensible_yg_per_core_in_mb="100"
        max_sensible_yg_in_mb=`expr $max_sensible_yg_per_core_in_mb "*" $system_cpu_cores`
    
        desired_yg_in_mb=`expr $max_heap_size_in_mb / 4`
    
        if [ "$desired_yg_in_mb" -gt "$max_sensible_yg_in_mb" ]
        then
            HEAP_NEWSIZE="${max_sensible_yg_in_mb}M"
        else
            HEAP_NEWSIZE="${desired_yg_in_mb}M"
        fi
    }
    
    createFilesForSSL()
    {
       createCqlrcFile
       if [ -f /certs/node.jks ]
       then
          return
       fi
       while [ ! -f /certs/pkcscerts.pk ]
       do
            sleep 1
            echo "wating for certs"
       done
      keytool -importkeystore -deststorepass cassandra  -deststoretype JKS -destkeystore /certs/node.jks -srckeystore /certs/pkcscerts.pk  -srcstoretype pkcs12 -srcstorepass cassandra
      keytool -importcert -keystore /certs/node.jks -alias rootCa -file /certs/cacert.pem -noprompt -keypass cassandra -storepass cassandra
    
      keytool -importcert -keystore /certs/nodetrustcert.jks -alias rootCa -file /certs/cacert.pem -noprompt -keypass cassandra -storepass cassandra
    
      entries=`keytool -list -keystore /certs/node.jks -storepass cassandra`
      if [[ "$entries" =~ "PrivateKeyEntry" && "$entries" =~ "trustedCertEntry" ]]
      then
            echo "PrivateKeyEntry and trustedCertEntry are present in /certs/node.jks"
      else
            echo "Missing PrivateKeyEntry or trustedCertEntry in /certs/node.jks"
            exit 1
      fi
    
      entries=`keytool -list -keystore /certs/nodetrustcert.jks -storepass cassandra`
      if [[ "$entries" =~ "trustedCertEntry" ]]
      then
            echo "trustedCertEntry is present in /certs/nodetrustcert.jks"
      else
            echo "Missing trustedCertEntry in /certs/nodetrustcert.jks"
            exit 1
      fi
    }
    
    # UDM specific enahancement on top of CSF
    createCqlrcFile()
    {
     mkdir -p /home/cassandra-home/.cassandra/
     mkdir -p /CASSANDRA_DD/cassandra/.cqlsh/
     CQLRCFILE="/home/cassandra-home/.cassandra/cqlshrc"
     cat <<EOF > $CQLRCFILE
    [ssl]
    certfile =/certs/cacert.pem
    userkey=/certs/key.pem
    usercert=/certs/cert.pem
    validate = true
    version = SSLv23
    [connection]
    ssl = true
    EOF
     cat $CQLRCFILE >> /CASSANDRA_DD/cassandra/.cqlsh/cqlshrc
    }
    
    # Determine the sort of JVM we'll be running on.
    java_ver_output=`"${JAVA:-java}" -version 2>&1`
    jvmver=`echo "$java_ver_output" | grep '[openjdk|java] version' | awk -F'"' 'NR==1 {print $2}' | cut -d\- -f1`
    JVM_VERSION=${jvmver%_*}
    JVM_PATCH_VERSION=${jvmver#*_}
    
    if [ "$JVM_VERSION" \< "1.8" ] ; then
        echo "Cassandra 3.0 and later require Java 8u40 or later."
        exit 1;
    fi
    
    if [ "$JVM_VERSION" \< "1.8" ] && [ "$JVM_PATCH_VERSION" -lt 40 ] ; then
        echo "Cassandra 3.0 and later require Java 8u40 or later."
        exit 1;
    fi
    
    jvm=`echo "$java_ver_output" | grep -A 1 '[openjdk|java] version' | awk 'NR==2 {print $1}'`
    case "$jvm" in
        OpenJDK)
            JVM_VENDOR=OpenJDK
            # this will be "64-Bit" or "32-Bit"
            JVM_ARCH=`echo "$java_ver_output" | awk 'NR==3 {print $2}'`
            ;;
        "Java(TM)")
            JVM_VENDOR=Oracle
            # this will be "64-Bit" or "32-Bit"
            JVM_ARCH=`echo "$java_ver_output" | awk 'NR==3 {print $3}'`
            ;;
        *)
            # Help fill in other JVM values
            JVM_VENDOR=other
            JVM_ARCH=unknown
            ;;
    esac
    
    # Sets the path where logback and GC logs are written.
    if [ "x$CASSANDRA_LOG_DIR" = "x" ] ; then
        CASSANDRA_LOG_DIR="/var/log/cassandra"
    fi
    
    #GC log path has to be defined here because it needs to access CASSANDRA_HOME
    JVM_OPTS="$JVM_OPTS -Xloggc:${CASSANDRA_LOG_DIR}/gc.log"
    
    # Here we create the arguments that will get passed to the jvm when
    # starting cassandra.
    
    # Read user-defined JVM options from jvm.options file
    JVM_OPTS_FILE=$CASSANDRA_CONF/jvm.options
    for opt in `grep "^-" $JVM_OPTS_FILE`
    do
      JVM_OPTS="$JVM_OPTS $opt"
    done
    
    # Check what parameters were defined on jvm.options file to avoid conflicts
    echo $JVM_OPTS | grep -q Xmn
    DEFINED_XMN=$?
    echo $JVM_OPTS | grep -q Xmx
    DEFINED_XMX=$?
    echo $JVM_OPTS | grep -q Xms
    DEFINED_XMS=$?
    echo $JVM_OPTS | grep -q UseConcMarkSweepGC
    USING_CMS=$?
    echo $JVM_OPTS | grep -q UseG1GC
    USING_G1=$?
    
    # Override these to set the amount of memory to allocate to the JVM at
    # start-up. For production use you may wish to adjust this for your
    # environment. MAX_HEAP_SIZE is the total amount of memory dedicated
    # to the Java heap. HEAP_NEWSIZE refers to the size of the young
    # generation. Both MAX_HEAP_SIZE and HEAP_NEWSIZE should be either set
    # or not (if you set one, set the other).
    #
    # The main trade-off for the young generation is that the larger it
    # is, the longer GC pause times will be. The shorter it is, the more
    # expensive GC will be (usually).
    #
    # The example HEAP_NEWSIZE assumes a modern 8-core+ machine for decent pause
    # times. If in doubt, and if you do not particularly want to tweak, go with
    # 100 MB per physical CPU core.
    
    #MAX_HEAP_SIZE="4G"
    #HEAP_NEWSIZE="800M"
    
    # Set this to control the amount of arenas per-thread in glibc
    #export MALLOC_ARENA_MAX=4
    
    # only calculate the size if it's not set manually
    if [ "x$MAX_HEAP_SIZE" = "x" ] && [ "x$HEAP_NEWSIZE" = "x" -o $USING_G1 -eq 0 ]; then
        calculate_heap_sizes
    elif [ "x$MAX_HEAP_SIZE" = "x" ] ||  [ "x$HEAP_NEWSIZE" = "x" -a $USING_G1 -ne 0 ]; then
        echo "please set or unset MAX_HEAP_SIZE and HEAP_NEWSIZE in pairs when using CMS GC (see cassandra-env.sh)"
        exit 1
    fi
    
    if [ "x$MALLOC_ARENA_MAX" = "x" ] ; then
        export MALLOC_ARENA_MAX=4
    fi
    
    # We only set -Xms and -Xmx if they were not defined on jvm.options file
    # If defined, both Xmx and Xms should be defined together.
    if [ $DEFINED_XMX -ne 0 ] && [ $DEFINED_XMS -ne 0 ]; then
         JVM_OPTS="$JVM_OPTS -Xms${MAX_HEAP_SIZE}"
         JVM_OPTS="$JVM_OPTS -Xmx${MAX_HEAP_SIZE}"
    elif [ $DEFINED_XMX -ne 0 ] || [ $DEFINED_XMS -ne 0 ]; then
         echo "Please set or unset -Xmx and -Xms flags in pairs on jvm.options file."
         exit 1
    fi
    
    # We only set -Xmn flag if it was not defined in jvm.options file
    # and if the CMS GC is being used
    # If defined, both Xmn and Xmx should be defined together.
    if [ $DEFINED_XMN -eq 0 ] && [ $DEFINED_XMX -ne 0 ]; then
        echo "Please set or unset -Xmx and -Xmn flags in pairs on jvm.options file."
        exit 1
    elif [ $DEFINED_XMN -ne 0 ] && [ $USING_CMS -eq 0 ]; then
        JVM_OPTS="$JVM_OPTS -Xmn${HEAP_NEWSIZE}"
    fi
    
    if [ "$JVM_ARCH" = "64-Bit" ] && [ $USING_CMS -eq 0 ]; then
        JVM_OPTS="$JVM_OPTS -XX:+UseCondCardMark"
    fi
    
    # provides hints to the JIT compiler
    JVM_OPTS="$JVM_OPTS -XX:CompileCommandFile=$CASSANDRA_CONF/hotspot_compiler"
    
    # add the jamm javaagent
    JVM_OPTS="$JVM_OPTS -javaagent:$CASSANDRA_HOME/lib/jamm-0.3.0.jar"
    
    # set jvm HeapDumpPath with CASSANDRA_HEAPDUMP_DIR
    if [ "x$CASSANDRA_HEAPDUMP_DIR" != "x" ]; then
        JVM_OPTS="$JVM_OPTS -XX:HeapDumpPath=$CASSANDRA_HEAPDUMP_DIR/cassandra-`date +%s`-pid$$.hprof"
    fi
    
    # stop the jvm on OutOfMemoryError as it can result in some data corruption
    # uncomment the preferred option
    # ExitOnOutOfMemoryError and CrashOnOutOfMemoryError require a JRE greater or equals to 1.7 update 101 or 1.8 update 92
    # For OnOutOfMemoryError we cannot use the JVM_OPTS variables because bash commands split words
    # on white spaces without taking quotes into account
    # JVM_OPTS="$JVM_OPTS -XX:+ExitOnOutOfMemoryError"
    # JVM_OPTS="$JVM_OPTS -XX:+CrashOnOutOfMemoryError"
    JVM_ON_OUT_OF_MEMORY_ERROR_OPT="-XX:OnOutOfMemoryError=kill -9 %p"
    
    # print an heap histogram on OutOfMemoryError
    # JVM_OPTS="$JVM_OPTS -Dcassandra.printHeapHistogramOnOutOfMemoryError=true"
    
    # jmx: metrics and administration interface
    #
    # add this if you're having trouble connecting:
    # JVM_OPTS="$JVM_OPTS -Djava.rmi.server.hostname=<public name>"
    #
    # see
    # https://blogs.oracle.com/jmxetc/entry/troubleshooting_connection_problems_in_jconsole
    # for more on configuring JMX through firewalls, etc. (Short version:
    # get it working with no firewall first.)
    #
    # Cassandra ships with JMX accessible *only* from localhost.  
    # To enable remote JMX connections, uncomment lines below
    # with authentication and/or ssl enabled. See https://wiki.apache.org/cassandra/JmxSecurity 
    #
    if [ "x$LOCAL_JMX" = "x" ]; then
        LOCAL_JMX=yes
    fi
    
    # Specifies the default port over which Cassandra will be available for
    # JMX connections.
    # For security reasons, you should not expose this port to the internet.  Firewall it if needed.
    JMX_PORT="7199"
    
    if [ "$LOCAL_JMX" = "yes" ]; then
      JVM_OPTS="$JVM_OPTS -Dcassandra.jmx.local.port=$JMX_PORT"
      JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=false"
    else
      JVM_OPTS="$JVM_OPTS -Dcassandra.jmx.remote.port=$JMX_PORT"
      # if ssl is enabled the same port cannot be used for both jmx and rmi so either
      # pick another value for this property or comment out to use a random port (though see CASSANDRA-7087 for origins)
      JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.rmi.port=$JMX_PORT"
    
      # turn on JMX authentication. See below for further options
      JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=false"
    
      # jmx ssl options
      #JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl=true"
      #JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.need.client.auth=true"
      #JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.protocols=<enabled-protocols>"
      #JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.ssl.enabled.cipher.suites=<enabled-cipher-suites>"
      #JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.keyStore=/path/to/keystore"
      #JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.keyStorePassword=<keystore-password>"
      #JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.trustStore=/path/to/truststore"
      #JVM_OPTS="$JVM_OPTS -Djavax.net.ssl.trustStorePassword=<truststore-password>"
    fi
    
    # jmx authentication and authorization options. By default, auth is only
    # activated for remote connections but they can also be enabled for local only JMX
    ## Basic file based authn & authz
    JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.password.file=/etc/cassandra/jmxremote.password"
    #JVM_OPTS="$JVM_OPTS -Dcom.sun.management.jmxremote.access.file=/etc/cassandra/jmxremote.access"
    ## Custom auth settings which can be used as alternatives to JMX's out of the box auth utilities.
    ## JAAS login modules can be used for authentication by uncommenting these two properties.
    ## Cassandra ships with a LoginModule implementation - org.apache.cassandra.auth.CassandraLoginModule -
    ## which delegates to the IAuthenticator configured in cassandra.yaml. See the sample JAAS configuration
    ## file cassandra-jaas.config
    #JVM_OPTS="$JVM_OPTS -Dcassandra.jmx.remote.login.config=CassandraLogin"
    #JVM_OPTS="$JVM_OPTS -Djava.security.auth.login.config=$CASSANDRA_HOME/conf/cassandra-jaas.config"
    
    ## Cassandra also ships with a helper for delegating JMX authz calls to the configured IAuthorizer,
    ## uncomment this to use it. Requires one of the two authentication options to be enabled
    #JVM_OPTS="$JVM_OPTS -Dcassandra.jmx.authorizer=org.apache.cassandra.auth.jmx.AuthorizationProxy"
    
    # To use mx4j, an HTML interface for JMX, add mx4j-tools.jar to the lib/
    # directory.
    # See http://wiki.apache.org/cassandra/Operations#Monitoring_with_MX4J
    # By default mx4j listens on 0.0.0.0:8081. Uncomment the following lines
    # to control its listen address and port.
    #MX4J_ADDRESS="-Dmx4jaddress=127.0.0.1"
    #MX4J_PORT="-Dmx4jport=8081"
    
    # Cassandra uses SIGAR to capture OS metrics CASSANDRA-7838
    # for SIGAR we have to set the java.library.path
    # to the location of the native libraries.
    JVM_OPTS="$JVM_OPTS -Djava.library.path=$CASSANDRA_HOME/lib/sigar-bin"
    
    JVM_OPTS="$JVM_OPTS $MX4J_ADDRESS"
    JVM_OPTS="$JVM_OPTS $MX4J_PORT"
    JVM_OPTS="$JVM_OPTS $JVM_EXTRA_OPTS"
    
    TEMP_CASSANDRA_TLS_ENABLED=`echo ${CASSANDRA_TLS_ENABLED}|tr '[:upper:]' '[:lower:]'`
    
    if [ "$TEMP_CASSANDRA_TLS_ENABLED" == "true" ]
    then
      createFilesForSSL
    else
      sed -ie "s/ enabled: true/ enabled: false/" /config/cassandra.yaml
      sed -ie "s/ internode_encryption: all/ internode_encryption: none/" /config/cassandra.yaml
    fi
    
    mkdir -p /logstore/cassandra/logs
    CASSANDRA_LOG_DIR="/logstore/cassandra/logs"
    export CASSANDRA_LOG_DIR
    


  pkcsutil.py: |
    import argparse
    import OpenSSL
    
    def read_certificate(ca_cert):
        with open(ca_cert, mode='rb') as file:
            return OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, file.read())
    
    def read_private_key(ca_key, passphrase=None):
        with open(ca_key, mode='rb') as file:
            return OpenSSL.crypto.load_privatekey(OpenSSL.crypto.FILETYPE_PEM, file.read(), passphrase=passphrase)
    
    def export_to_pkcs12(filename, key, cert, passphrase=None):
        pkcs = OpenSSL.crypto.PKCS12()
        pkcs.set_privatekey(key)
        pkcs.set_certificate(cert)
        with open(filename, 'wb') as file:
            file.write(pkcs.export(passphrase=passphrase))
    
    if __name__ == '__main__':
        parser = argparse.ArgumentParser(description='pkcsutil converts a PEM formatted certificate/private key to PKCS12.')
        parser.add_argument('--key',  help='Private key filename, PEM encoded.')
        parser.add_argument('--cert', help='Certificate filename, PEM encoded.')
        parser.add_argument('--passphrase', help='Passphrase for the private key.', default=None)
        parser.add_argument('--out',  help='Output filename (.pfx).')
    
        args = parser.parse_args()
        key_path   = args.key
        cert_path  = args.cert
        passphrase = args.passphrase
        out_path   = args.out
    
        if len(key_path) == 0 or len(cert_path) == 0 or len(out_path) == 0:
            parser.print_usage()
            exit(1)
    
        if len(passphrase) == 0:
            passphrase = None
        else:
            passphrase = passphrase.encode()
    
        key  = read_private_key(key_path, passphrase)
        cert = read_certificate(cert_path)
        export_to_pkcs12(out_path, key, cert, passphrase)
    
    

  env: |

    LISTEN_ADDRESS=

    SS_CASSANDRA_NET=
    LOCAL_JMX=no
---
# Source: reg-helm-charts/charts/ccasapache/templates/cassandra-env-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-ccasapache-env
  namespace: udm2
  labels:
    app: udm2-ccasapache
    release: udm2
data:
  SS_CASSANDRA_CLUSTER_NAME: "MyCluster"
  DC: "MyCenter"
  LOCAL_JMX: "no"
  WRITE_REQUEST_TIMEOUT_IN_MS: "2000"
  READ_REQUEST_TIMEOUT_IN_MS: "5000"
  RANGE_REQUEST_TIMEOUT_IN_MS: "10000"
  COUNTER_WRITE_REQUEST_TIMEOUT_IN_MS: "5000"
  TRUNCATE_REQUEST_TIMEOUT_IN_MS: "60000"
  REQUEST_TIMEOUT_IN_MS: "10000"
  COMMITLOG_TOTAL_SPACE_IN_MB: "1024"
  CLIENT_ENCRYPTION: "false"
  INTERNODE_ENCRYPTION: "none"
  CASSANDRA_HEAPDUMP_DIR: /CASSANDRA_DD
  LISTEN_ON_BROADCAST_ADDRESS: "false"
  
  POD_NAMESPACE: "udm2"
  CASSANDRA_NAME: "udm2-ccasapache"
  REPLICA_COUNT: "3"
  MONITOR_PEERS: "true"
  PREFER_IPV4: "true"
  CASSANDRA_CONF: "/config"
  CASSANDRA_LOG_DIR: "/var/log/cassandra"
  CREDENTIALS_VALIDITY_IN_MS: "2000"
  PERMISSIONS_VALIDITY_IN_MS: "120000"
  ROLES_VALIDITY_IN_MS: "120000"
  KUBERNETES_SERVICE_PORT: "443"
  KUBERNETES_SERVICE_HOST: "kubernetes.default"
  CASSANDRA_SERVICE: "udm2-ccasapache"
  CASSANDRA_SEED_PROVIDER: "org.apache.cassandra.locator.SimpleSeedProvider"
  AUTO_SNAPSHOT: "false"
  CERT_THRESHOLD: "0"
---
# Source: reg-helm-charts/charts/ccasapache/templates/envoy-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ccasconfigmap
  namespace: udm2
  labels:
    app: ccasconfigmap
    
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: ccaspache_envoy_0
      cluster: ccaspache_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: 127.0.0.1, port_value: 9901 }
    static_resources:
      listeners:
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/ccasapache/templates/fluentbitconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-ccas-fluent-bit-config
  namespace: udm2
  labels:
    k8s-app: ccas-fluent-bit
    
data:
  # Configuration files: server, input, filters and output
  # ======================================================
   fluent-bit.conf: |
    [SERVICE]
        Flush 1
        HTTP_Server  On
        HTTP_Listen  ${POD_IP}
        HTTP_PORT    2020
        Log_Level error
        Log_File /opt/log/fluent-bit-logs.log
        Plugins_File /fluent-bit/etc/plugins.conf
        Parsers_File /fluent-bit/etc/parser.conf

    [INPUT]
        Name tail
        Tag fbit.log
        Path /opt/log/fluent-bit-logs.log
        Path_Key class
        DB /tmp/fbit.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag cassandra.log
        Path /logstore/cassandra/logs/*
        Path_Key class
        DB /tmp/cassandra.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 50MB

    [INPUT]
        Name tail
        Tag audit_security.log
        Path /logstore/security/**/*
        Path_Key class
        DB /tmp/securityDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [OUTPUT]
        Name gstdout
        Match *

   plugins.conf: |
    [PLUGINS]
        Path   /fluent-bit/lib/out_gstdout.so
---
# Source: reg-helm-charts/charts/ccasapache/templates/lcm-event-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-ccasapache-lcm-event
  labels:
    app: udm2-ccasapache
    release: "udm2"
    heritage: "Helm"
    csf-component: ccas
    csf-subcomponent: kubectl
    ccas-dbtype: cassandra-apache
    
data:
  heal_tag: |-
    none
---
# Source: reg-helm-charts/charts/ccasapache/templates/udsconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-uds-config
  namespace: udm2
  labels:
    k8s-app: udm2-uds-config
    
data:
  UdmLIDomainSchema.conf: |
    CREATE KEYSPACE LITARGETDATASPACE
       WITH REPLICATION = {
      'class' : 'SimpleStrategy',
      'replication_factor' : 2
    };
    CREATE TABLE LITARGETDATASPACE.TARGETLOOKUPTABLE(
      XID text,
      TARGET_TYPE text,
      ENCRYPTED_TARGET text,
      TARGET_HASH text,
      DELIVERY_TYPE text,
      DESTINATION_IDENTIFIER list<text>,
      TASKS_DETAILS_EXT text,
      PRIMARY KEY (TARGET_HASH,XID)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE ROLE LITARGETPRODUCER WITH PASSWORD='<#SimProducerCachePasswd#>' AND LOGIN=true AND SUPERUSER=false;
    CREATE ROLE LITARGETCONSUMER WITH PASSWORD='<#SimConsumerCachePasswd#>' AND LOGIN=true AND SUPERUSER=false;
    GRANT MODIFY ON TABLE LITARGETDATASPACE.TARGETLOOKUPTABLE to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.TARGETLOOKUPTABLE to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.TARGETLOOKUPTABLE to LITARGETCONSUMER;
    CREATE TABLE LITARGETDATASPACE.DESTINATIONDETAILS(
      DID text,
      FRIENDLY_NAME text,
      DELIVERY_TYPE text,
      DELIVERY_ADDRESS text,
      DEST_DETAILS_EXT text,
      DEST_DELIVERY_STATUS text,
      MAP_OF_FAULTS map<smallint,text>,
      PRIMARY KEY (DID)
      ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    ALTER TABLE LITARGETDATASPACE.DESTINATIONDETAILS ADD X2_PDU_BUFFERED_RECORD_COUNT int;
    GRANT MODIFY ON TABLE LITARGETDATASPACE.DESTINATIONDETAILS to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.DESTINATIONDETAILS to LITARGETPRODUCER;
      CREATE TABLE LITARGETDATASPACE.TASKDETAILS(
      XID text,
      TARGET_DATA map<text,smallint>,
      MAP_OF_DID map<text,smallint>,
      IMPLICIT_DEACT_ALLOWED boolean,
      PRODUCT_Id text,
      TASK_DETAILS_EXT text,
      PROVISIONING_STATUS text,
      MAP_OF_FAULTS map<smallint,text>,
      TIME_OF_LAST_INTERCEPT timeStamp,
      AMT_OF_X2_DATA bigInt,
      LAST_MODIFICATION timeStamp,
      NUM_MODIFICATIONS int,
      PRIMARY KEY (XID)
      )WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    GRANT MODIFY ON TABLE LITARGETDATASPACE.TASKDETAILS to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.TASKDETAILS to LITARGETPRODUCER;
    CREATE TYPE LITARGETDATASPACE.XIDDATA(
      DID_LIST text,
      PRODUCT_Id text
    );
    CREATE TABLE LITARGETDATASPACE.TARGETXIDMAPPING(
      TARGET_ID text,
      TARGET_TYPE text,
      MAP_OF_XID_DIDLIST map<text,FROZEN<XIDDATA>>,
      PRIMARY KEY (TARGET_ID,TARGET_TYPE)
      )WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    GRANT MODIFY ON TABLE LITARGETDATASPACE.TARGETXIDMAPPING to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.TARGETXIDMAPPING to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.TARGETXIDMAPPING to LITARGETCONSUMER;
      CREATE TABLE LITARGETDATASPACE.NESTATUS(
      NE_IDENTIFIER text,
      NE_STATUS text,
      MAP_OF_FAULTS map<smallint,text>,
      PRIMARY KEY (NE_IDENTIFIER)
      )WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    GRANT MODIFY ON TABLE LITARGETDATASPACE.NESTATUS to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.NESTATUS to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.NESTATUS to LITARGETCONSUMER;
    DROP TABLE IF EXISTS LITARGETDATASPACE.X2BUFFERSTORE;
    CREATE TABLE LITARGETDATASPACE.X2PDUBUFFERSTORE(
       DID text,
       RECV_TIME_STAMP timeuuid,
       X2_PDU text,
       PRIMARY KEY (DID, RECV_TIME_STAMP)
    )WITH CLUSTERING ORDER BY (RECV_TIME_STAMP DESC)
       AND bloom_filter_fp_chance = 0.1
       AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
       AND comment = ''
       AND compression = {'chunk_length_in_kb': '4', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
       AND dclocal_read_repair_chance = 0.0
       AND gc_grace_seconds = 40
       AND compaction = {'class': 'SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4', 'tombstone_compaction_interval': '35', 'tombstone_threshold': '0.02', 'unchecked_tombstone_compaction': 'true'};
    GRANT MODIFY ON TABLE LITARGETDATASPACE.X2PDUBUFFERSTORE to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.X2PDUBUFFERSTORE to LITARGETPRODUCER;
      CREATE TABLE LITARGETDATASPACE.DIDXIDCOUNTER(
      DID text,
      XID_COUNTER counter,
      PRIMARY KEY (DID)
      )WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    GRANT MODIFY ON TABLE LITARGETDATASPACE.DIDXIDCOUNTER to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.DIDXIDCOUNTER to LITARGETPRODUCER;
    GRANT SELECT ON TABLE LITARGETDATASPACE.DIDXIDCOUNTER to LITARGETCONSUMER;
  UdmOtherDataDomainSchema.conf: |
    CREATE KEYSPACE NFDISCOVERYDATASPACE
       WITH REPLICATION = {
      'class' : 'SimpleStrategy',
      'replication_factor' : 2
    };
    CREATE TABLE NFDISCOVERYDATASPACE.NFDISCOVERYCACHETABLE(
      QUERY_PARAM_HASH text,
      SUBSCRIPTION_ID text,
      NF_FILTERED_DISCOVERY_PROFILE_DATA text,
      NF_DISCOVERY_PROFILE_DATA text,
      DISCOVERY_RESPONSE_VALIDITY_PERIOD text,
      SUBSCRIPTION_VALIDITY_PERIOD text,
      PRIMARY KEY (QUERY_PARAM_HASH)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE ROLE NFDISCOVERYPRODUCER WITH PASSWORD='<#NimCacheProducerPassword#>' AND LOGIN=true AND SUPERUSER=false;
    CREATE ROLE NFDISCOVERYCONSUMER WITH PASSWORD='<#NimCacheConsumerPassword#>' AND LOGIN=true AND SUPERUSER=false;
    GRANT MODIFY ON TABLE NFDISCOVERYDATASPACE.NFDISCOVERYCACHETABLE to NFDISCOVERYPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.NFDISCOVERYCACHETABLE to NFDISCOVERYPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.NFDISCOVERYCACHETABLE to NFDISCOVERYCONSUMER;
    CREATE TABLE NFDISCOVERYDATASPACE.NFSERVICEAUTHORIZATIONTOKENS(
      QUERY_PARAM_HASH text,
      AUTHORIZATION_TOKEN text,
      PRIMARY KEY (QUERY_PARAM_HASH)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    GRANT MODIFY ON TABLE NFDISCOVERYDATASPACE.NFSERVICEAUTHORIZATIONTOKENS to NFDISCOVERYPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.NFSERVICEAUTHORIZATIONTOKENS to NFDISCOVERYPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.NFSERVICEAUTHORIZATIONTOKENS to NFDISCOVERYCONSUMER;
    CREATE TYPE NFDISCOVERYDATASPACE.DNSRECORD(
      ADDRESS text,
      RESOLVED_FQDN text,
      PORT int,
      TTL int,
      PRIORITY int,
      WEIGHT int
    );
    CREATE TABLE NFDISCOVERYDATASPACE.DNSCACHE(
      NF_DOMAIN_NAME text,
      SRV_RECORDS FROZEN<list <DNSRECORD>>,
      IPV4_RECORDS FROZEN<list <DNSRECORD>>,
      IPV6_RECORDS FROZEN<list <DNSRECORD>>,
      PRIMARY KEY (NF_DOMAIN_NAME)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    GRANT MODIFY ON TABLE NFDISCOVERYDATASPACE.DNSCACHE to NFDISCOVERYPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.DNSCACHE to NFDISCOVERYPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.DNSCACHE to NFDISCOVERYCONSUMER;
    CREATE TABLE NFDISCOVERYDATASPACE.NFREGINFOTABLE(
      NF_TYPE text,
      NF_REG_INFO_STR text,
      NF_JSON_DATA text,
      PRIMARY KEY (NF_TYPE)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    GRANT MODIFY ON TABLE NFDISCOVERYDATASPACE.NFREGINFOTABLE to NFDISCOVERYPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.NFREGINFOTABLE to NFDISCOVERYPRODUCER;
    CREATE TABLE  NFDISCOVERYDATASPACE.NFINFOTABLE(
      NF_ADDR text,
      NF_ADDR_TYPE text,
      NF_TYPE text,
      PRIMARY KEY (NF_ADDR)
    ) WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
    CREATE ROLE NFINFOPRODUCER WITH PASSWORD='<#NFInfoProducerPassword#>' AND LOGIN=true AND SUPERUSER=false;
    GRANT MODIFY ON TABLE NFDISCOVERYDATASPACE.NFINFOTABLE to NFINFOPRODUCER;
    GRANT SELECT ON TABLE NFDISCOVERYDATASPACE.NFINFOTABLE to NFINFOPRODUCER;
    CREATE INDEX IF NOT EXISTS nfinfotable_nf_type_idx ON NFDISCOVERYDATASPACE.NFINFOTABLE(NF_TYPE);
    CREATE KEYSPACE AUSFUEAUTHKEYDATASPACE
       WITH REPLICATION = {
      'class' : 'SimpleStrategy',
      'replication_factor' : 2
    };
    CREATE TYPE AUSFUEAUTHKEYDATASPACE.ENDPOINT(
     ADDRESS text,
     FQDN text,
     PORT int,
     APIPREFIX text,
     SCHEME text,
     NF_INSTANCEID text
    );
    ALTER TYPE AUSFUEAUTHKEYDATASPACE.ENDPOINT ADD NF_SETID text;
    CREATE TABLE AUSFUEAUTHKEYDATASPACE.AUSFUEAUTHLOOKUPTABLE(
      IDENTITY text,
      XRESSTAR text,
      CK text,
      IK text,
      KSEAF text,
      SUPI text,
      IDENTITY_TYPE text,
      NETWORK_NAME text,
      RAND text,
      CREATE_KEY_TIMESTAMP text,
      ENDPOINTS FROZEN<list <ENDPOINT>>,
      PRIMARY KEY (IDENTITY)
    ) WITH bloom_filter_fp_chance = 0.02 AND default_time_to_live = 10 AND gc_grace_seconds = 60 AND compaction = {'class' : 'TimeWindowCompactionStrategy', 'compaction_window_size': '1', 'compaction_window_unit': 'MINUTES'};
    ALTER TABLE AUSFUEAUTHKEYDATASPACE.AUSFUEAUTHLOOKUPTABLE ADD KAUSF text;
    ALTER TABLE AUSFUEAUTHKEYDATASPACE.AUSFUEAUTHLOOKUPTABLE ADD KEYINDEX int;
    CREATE ROLE AUSFADMIN WITH PASSWORD='<#AusfAdminPassword#>' AND LOGIN=true AND SUPERUSER=false;
    GRANT MODIFY ON TABLE AUSFUEAUTHKEYDATASPACE.AUSFUEAUTHLOOKUPTABLE to AUSFADMIN;
    GRANT SELECT ON TABLE AUSFUEAUTHKEYDATASPACE.AUSFUEAUTHLOOKUPTABLE to AUSFADMIN
---
# Source: reg-helm-charts/charts/ccasapache/templates/udsenvoyconfig.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udsconfigmap
  namespace: udm2
  labels:
    k8s-app: udsconfigmap
    
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |
    node:
      id: uds_envoy_0
      cluster: uds_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: 127.0.0.1, port_value: 9901 }
    static_resources:
      listeners:
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/clustermonitoragent/templates/cmafluentbitconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-cma-fluent-bit-config
  namespace: udm2
  labels:
    k8s-app: cma-fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
   fluent-bit.conf: |
    [SERVICE]
        Flush 1
        HTTP_Server  On
        HTTP_Listen  ${POD_IP}
        HTTP_PORT    2020
        Log_Level error
        Log_File /opt/log/fluent-bit-logs.log
        Plugins_File /fluent-bit/etc/plugins.conf
        Parsers_File /fluent-bit/etc/parser.conf

    [INPUT]
        Name tail
        Tag fbit.log
        Path /opt/log/fluent-bit-logs.log
        Path_Key class
        DB /tmpfs/fbit.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name        tail
        Tag         cma.log
        Path        /var/log/*
        Path_Key    class
        DB          /tmpfs/clustermonitoragent_ovnlr_DbFile.db
        Exclude_Path /var/log/*.db,*.gz,*.tar,*.zip,*.bz2,*.xz,*.7z,*.log.*
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag envoy.log
        Path /logstore/envoylogs/*
        Path_Key class
        DB /tmpfs/accessDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag supervisor.log
        Path /logstore/supervisor/**/*
        Path_Key class
        DB /tmpfs/supervisorDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag audit_security.log
        Path /logstore/security/**/*
        Path_Key class
        DB /tmpfs/securityDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [OUTPUT]
        Name gstdout
        Match *

   plugins.conf: |
    [PLUGINS]
        Path   /fluent-bit/lib/out_gstdout.so
---
# Source: reg-helm-charts/charts/clustermonitoragent/templates/cmahealthconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-cma-health-config
  namespace: udm2
  labels:
    k8s-app: cma-health
data:
    health.sh: |-
       #!/bin/bash
        logmsg()
        {

            echo -e "`date \"+%y/%m/%d %H:%M:%S\"`: $1 "
        }
        /opt/health/healthClient $1
        if [ $? != 0 ]; then
            logmsg "Failed to start healthcheck"
            exit 1
        else
            exit 0
        fi
---
# Source: reg-helm-charts/charts/clustermonitoragent/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmapenvoyclustermonitoragent
  labels:
    app: configmapenvoyclustermonitoragent-label
    release: udm2
    heritage: Helm
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: cma_envoy_0
      cluster: cma_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address:
          address: X_POD_ETH0_IP
          ipv4_compat: true
          port_value: 9901
          protocol: TCP
    stats_flush_interval:
      seconds: 5
    static_resources:
      listeners:
      - name: cms_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cms
                virtual_hosts:
                - name: cms
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/ClusterMonitoringService.ClusterMonitoringService/", case_sensitive: false }
                    route: { cluster: clustermonitorserver, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/nokia_ztsl_EventProcessingService_v1.EventProviderService/", case_sensitive: false }
                    route: { cluster: logreceiver, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: eps_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: appeps
                virtual_hosts:
                - name: appeps
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epsserver, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router

      clusters:
      - name: clustermonitorserver
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: clustermonitorserver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7775
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: logreceiver
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: logreceiver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: epsserver
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epsserver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/commonudm/templates/fluentbitconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-fluent-bit-config
  namespace: udm2
  labels:
    k8s-app: fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
   fluent-bit.conf: |
    [SERVICE]
        Flush 1
        HTTP_Server  On
        HTTP_Listen  ${POD_IP}
        HTTP_PORT    2020
        Log_Level error
        Log_File /opt/log/fluent-bit-logs.log
        Plugins_File /fluent-bit/etc/plugins.conf
        Parsers_File /fluent-bit/etc/parser.conf

    [INPUT]
        Name tail
        Tag fbit.log
        Path /opt/log/fluent-bit-logs.log
        Path_Key class
        DB /tmpfs/fbit.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag error.log
        Path /logstore/**/mcc/99/trace/RtpTrcError/*
        Path_Key class
        DB /tmpfs/RtpTrcErrorDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag debug.log
        Path /logstore/**/mcc/99/trace/sessiontrace/*
        Path_Key class
        Exclude_Path /logstore/**/mcc/99/trace/sessiontrace/HSS_ACU_*
        DB /tmpfs/TraceDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag security_debug.log
        Path /logstore/**/mcc/99/trace/sessiontrace/HSS_ACU_*
        Path_Key class
        DB /tmpfs/SecurityTraceDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag dump.log
        Path /logstore/dumplog/RtpDump.log
        Path_Key class
        DB /tmpfs/RtpDumpDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag envoy.log
        Path /logstore/envoylogs/*
        Path_Key class
        DB /tmpfs/accessDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag entrypoint.log
        Path /logstore/entrypointlog/**/entrypoint.log
        Path_Key class
        DB /tmpfs/entrypointDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag supervisor.log
        Path /logstore/supervisor/**/*
        Path_Key class
        DB /tmpfs/supervisorDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag proxy.log
        Path /logstore/proxy/*.log
        Path_Key class
        DB /tmpfs/proxyDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag cip.log
        Path /logstore/CIP/CIP.*
        Path_Key class
        DB /tmpfs/CIPDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag pstack.log
        Path /logstore/TspCore/*.pstack
        Path_Key class
        DB /tmpfs/core.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag audit_useractivity.log
        Path /logstore/security/**/user_activity.log
        Path_Key class
        DB /tmpfs/useractDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag datasync.log
        Path /logstore/datasynclogs/FileStoreClient-*
        Path_Key class
        DB /tmpfs/DataSyncDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [OUTPUT]
        Name gstdout
        Match *


   plugins.conf: |
    [PLUGINS]
        Path   /fluent-bit/lib/out_gstdout.so
---
# Source: reg-helm-charts/charts/ee/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eeconfigmap
  namespace: udm2
  labels:
    app: eeconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: ee_envoy_0
      cluster: ee_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: ingresshttp2
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: ingresshttp2-ee
                virtual_hosts:
                - name: ingresshttp2-ee
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: ee-local, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: egresshttp2
        address:
          socket_address: { address: 127.0.0.1, port_value: 10000}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: egress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: egresshttp2-ee
                virtual_hosts:
                - name: egresshttp2-ee
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: lb-cluster, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      if request_handle:headers():get("x-envoy-original-dst-host") == nil then
                        request_handle:headers():add("x-envoy-original-dst-host", request_handle:headers():get(":authority"))
                      end
                    end
              - name: envoy.filters.http.router
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_ee
                virtual_hosts:
                - name: grpc_ee
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/nim", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/lag.UdmServiceLoadInfo", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
                  - match: { prefix: "/lag.LciOciData", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 0.000s }
                  - match: { prefix: "/sdm", case_sensitive: false }
                    route: { cluster: sdm-service, timeout: 5.000s }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: external_listener
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8082}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_in_ee
                virtual_hosts:
                - name: grpc_in_ee
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/ee", case_sensitive: false }
                    route: { cluster: ee-apps, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: lb-cluster
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lb-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "http2lb.udm2.svc.cluster.local."
                    port_value: 9090
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: ee-local
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ee-local
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 8087
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: nim-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: sdm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sdm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-sdm.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: ee-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ee-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20000 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20001 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20002 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20003 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20004 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20005 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20006 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20007 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20008 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20009 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20010 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20011 } }
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
---
# Source: reg-helm-charts/charts/ee/templates/configmapffsclientconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eeffsclientconfigmap
  namespace: udm2
  labels:
    app: eeffsclientconfigmap
data:
   filestore_config.ini: |-
     raiseAlarm= true
     sendNotification= true
     [ZTS_FILESTORE_udmee]
     #fileName = path,group1:group2,maxFileSize value to be given in MB, Maximum No of Rules to be allowed for provisioning
     ErrorCodeMappingudmee.json = /logstore/FileStore,NGC_EES,1,3000
---
# Source: reg-helm-charts/charts/http2lb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-http2lb
  labels:
    app: http2lb
    chart: http2lb-225.280.0
    release: udm2
    namespace: udm2
    heritage: Helm
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  sds_ext_server_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: ext_server_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/http2_server_cert.pem
          private_key:
            filename: /certs/sds/current/http2_server_key.pem
          watched_directory:
            path: /certs/sds
  sds_ext_client_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: ext_client_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/http2_client_cert.pem
          private_key:
            filename: /certs/sds/current/http2_client_key.pem
          watched_directory:
            path: /certs/sds
  sds_ext_server_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: ext_server_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/http2_ca_cert.pem
          watched_directory:
            path: /certs/sds
  sds_ext_client_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: ext_client_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/http2_ca_cert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: htt2lb_envoy_0
      cluster: htt2lb_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address:
          address: X_POD_ETH0_IP
          port_value: 9903
    stats_flush_interval:
      seconds: 5
    overload_manager:
      refresh_interval:
        seconds: 5
      resource_monitors:
      - name: "envoy.resource_monitors.fixed_heap"
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig
          max_heap_size_bytes: 10737418240
      actions:
      - name: "envoy.overload_actions.shrink_heap"
        triggers:
        - name: "envoy.resource_monitors.fixed_heap"
          threshold:
            value: 0.6
    static_resources:
      listeners:
      - name: externalIngress
        traffic_direction: INBOUND
        address:
          socket_address:
            address: X_HTTP2_IP
            port_value: 8080
            protocol: TCP
        socket_options:
        - description: "Enabling TCP Keepalive"
          level: 1
          name: 9
          int_value: 1
          state: STATE_LISTENING
        - description: "Set Send buffer size"
          level: 1
          name: 7
          int_value: 2097152
          state: STATE_PREBIND
        - description: "Set Receive buffer size"
          level: 1
          name: 8
          int_value: 1048576
          state: STATE_PREBIND
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: http2ingress
              stream_idle_timeout: 0s
              common_http_protocol_options:
                idle_timeout:
                  seconds: 0
              http2_protocol_options:
                max_concurrent_streams: 10000
              route_config:
                name: externalIngress
                virtual_hosts:
                - name: externalIngress
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/nudm-uecm"
                      case_sensitive: false
                    route:
                      cluster: nudm-uecm
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nudm-sdm"
                      case_sensitive: false
                    route:
                      cluster: nudm-sdm
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nudm-ee"
                      case_sensitive: false
                    route:
                      cluster: nudm-ee
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nudm-mt"
                      case_sensitive: false
                    route:
                      cluster: nudm-mt
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nudm-niddau"
                      case_sensitive: false
                    route:
                      cluster: nudm-niddau
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nudm-ueau"
                      case_sensitive: false
                    route:
                      cluster: nudm-ueau
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nudm-pp"
                      case_sensitive: false
                    route:
                      cluster: nudm-pp
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nnrf-"
                      case_sensitive: false
                    route:
                      cluster: nim
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nausf-auth"
                      case_sensitive: false
                    route:
                      cluster: nausf-auth
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nausf-sorprotection"
                      case_sensitive: false
                    route:
                      cluster: nausf-sorprotection
                      timeout:
                        seconds: 15
                  - match:
                      prefix: "/nausf-upuprotection"
                      case_sensitive: false
                    route:
                      cluster: nausf-upuprotection
                      timeout:
                        seconds: 15
                  response_headers_to_remove:
                  - "x-envoy-upstream-service-time"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_response(response_handle)
                      oci_header = response_handle:headers():get("3gpp-sbi-oci")
                      lci_header = response_handle:headers():get("3gpp-sbi-lci")
                      if oci_header ~= nil then
                        local _, j = string.find(oci_header,"NF%-Service%-Instance: [a-z-]+")
                        if(j ~= nil) then
                          response_handle:headers():replace("3gpp-sbi-oci", oci_header:sub(1,j)..os.getenv("HOSTNAME")..oci_header:sub(j+1))
                        end
                      end
                      if lci_header ~= nil then
                        local _, j = string.find(lci_header,"NF%-Service%-Instance: [a-z-]+")
                        if(j ~= nil) then
                          response_handle:headers():replace("3gpp-sbi-lci", lci_header:sub(1,j)..os.getenv("HOSTNAME")..lci_header:sub(j+1))
                        end
                      end
                    end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  suppress_envoy_headers: true
              server_name: udmServer
              server_header_transformation: APPEND_IF_ABSENT
              access_log:
                name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/http2lbenvoylogs/access.log"
              generate_request_id: true
      - name: externalEgress
        traffic_direction: OUTBOUND
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 9090}
        listener_filters:
        - name: envoy.filters.listener.original_dst
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: http2egress
              http2_protocol_options:
                max_concurrent_streams: 10000
              route_config:
                name: externalEgress
                virtual_hosts:
                - name: externalEgress
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                      case_sensitive: false
                    route:
                      cluster: "external-egress"
                      timeout:
                        seconds: 15
                request_headers_to_remove: ["x-envoy-original-dst-host", "x-forwarded-proto", "x-request-id"]
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/http2lbenvoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      oci_header = request_handle:headers():get("3gpp-sbi-oci")
                      lci_header = request_handle:headers():get("3gpp-sbi-lci")
                      if oci_header ~= nil then
                        local _, j = string.find(oci_header,"NF%-Service%-Instance: [a-z-]+")
                        if(j ~= nil) then
                          request_handle:headers():replace("3gpp-sbi-oci", oci_header:sub(1,j)..os.getenv("HOSTNAME")..oci_header:sub(j+1))
                        end
                      end
                      if lci_header ~= nil then
                        local _, j = string.find(lci_header,"NF%-Service%-Instance: [a-z-]+")
                        if(j ~= nil) then
                          request_handle:headers():replace("3gpp-sbi-lci", lci_header:sub(1,j)..os.getenv("HOSTNAME")..lci_header:sub(j+1))
                        end
                      end
                    end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  suppress_envoy_headers: true
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      clusters:
      - name: external-egress
        type: ORIGINAL_DST
        lb_policy: CLUSTER_PROVIDED
        connect_timeout:
          seconds: 10
        original_dst_lb_config:
          use_http_header: true
        cleanup_interval: 3600s
        upstream_bind_config:
          source_address:
            address: X_HTTP2_IP
            port_value: 0
          socket_options:
          - description: "Set Send buffer size"
            level: 1
            name: 7
            int_value: 2097152
            state: STATE_PREBIND
          - description: "Set Receive buffer size"
            level: 1
            name: 8
            int_value: 1048576
            state: STATE_PREBIND
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nim
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nim
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nim.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nudm-uecm
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nudm-uecm
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-uecm.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nudm-sdm
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nudm-sdm
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-sdm.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nudm-ee
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nudm-ee
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-ee.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nudm-mt
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nudm-mt
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-mt.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nudm-niddau
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nudm-niddau
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-niddau.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nausf-auth
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nausf-auth
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nausf-auth.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nausf-sorprotection
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nausf-sorprotection
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nausf-sorprotection.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nausf-upuprotection
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nausf-upuprotection
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nausf-upuprotection.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nudm-ueau
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nudm-ueau
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-ueau.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
      - name: nudm-pp
        type: STRICT_DNS
        dns_refresh_rate:
          seconds: 1
        load_assignment:
          cluster_name: nudm-pp
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-pp.udm2.svc.cluster.local."
                    port_value: 8080
        connect_timeout:
          seconds: 10
        lb_policy: ROUND_ROBIN
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 40000
            max_requests: 40000
---
# Source: reg-helm-charts/charts/http2lb/templates/h2pfluentbitconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-h2plb-fluent-bit-config
  namespace: udm2
  labels:
    k8s-app: h2plb-fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
   fluent-bit.conf: |
    [SERVICE]
        Flush 1
        HTTP_Server  On
        HTTP_Listen  ${POD_IP}
        HTTP_PORT    2020
        Log_Level error
        Log_File /opt/log/fluent-bit-logs.log
        Plugins_File /fluent-bit/etc/plugins.conf
        Parsers_File /fluent-bit/etc/parser.conf

    [INPUT]
        Name tail
        Tag fbit.log
        Path /opt/log/fluent-bit-logs.log
        Path_Key class
        DB /tmpfs/fbit.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag error.log
        Path /logstore/**/mcc/99/trace/RtpTrcError/*
        Path_Key class
        DB /tmpfs/RtpTrcErrorDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag debug.log
        Path /logstore/**/mcc/99/trace/sessiontrace/*
        Path_Key class
        DB /tmpfs/TraceDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag dump.log
        Path /logstore/dumplog/RtpDump.log
        Path_Key class
        DB /tmpfs/RtpDumpDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag envoy.log
        Path /logstore/envoylogs/*
        Path_Key class
        DB /tmpfs/accessDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag entrypoint.log
        Path /logstore/entrypointlog/**/entrypoint.log
        Path_Key class
        DB /tmpfs/entrypointDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag supervisor.log
        Path /logstore/supervisor/**/*
        Path_Key class
        DB /tmpfs/supervisorDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag pstack.log
        Path /logstore/TspCore/*.pstack
        Path_Key class
        DB /tmpfs/coreDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag oam.log
        Path /logstore/OAM/OAM.*
        Path_Key class
        DB /tmpfs/OAMDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag http2lbenvoy.log
        Path /logstore/http2lbenvoylogs/*
        Path_Key class
        DB /tmpfs/http2lbenvoyDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB

    [INPUT]
        Name tail
        Tag audit_security.log
        Path /logstore/security/**/*
        Path_Key class
        DB /tmpfs/securityDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB


    [OUTPUT]
        Name gstdout
        Match *


   plugins.conf: |
    [PLUGINS]
        Path   /fluent-bit/lib/out_gstdout.so
---
# Source: reg-helm-charts/charts/http2lb/templates/sidecarconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: http2lbenvoysidecar
  namespace: udm2
  labels:
    app: http2lbenvoysidecar
    release: udm2
    namespace: udm2
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: htt2lb_sidecar_0
      cluster: htt2lb_sidecar
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    stats_flush_interval:
      seconds: 5
    static_resources:
      listeners:
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
---
# Source: reg-helm-charts/charts/mt/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mtconfigmap
  namespace: udm2
  labels:
    app: mtconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: mt_envoy_0
      cluster: mt_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: ingresshttp2
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: ingresshttp2-mt
                virtual_hosts:
                - name: ingresshttp2-mt
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: mt-local, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: egresshttp2
        address:
          socket_address: { address: 127.0.0.1, port_value: 10000}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: egress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: egresshttp2-mt
                virtual_hosts:
                - name: egresshttp2-mt
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: lb-cluster, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      if request_handle:headers():get("x-envoy-original-dst-host") == nil then
                        request_handle:headers():add("x-envoy-original-dst-host", request_handle:headers():get(":authority"))
                      end
                    end
              - name: envoy.filters.http.router
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_mt
                virtual_hosts:
                - name: grpc_mt
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/nim", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/lag.UdmServiceLoadInfo", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
                  - match: { prefix: "/lag.LciOciData", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 0.000s }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: lb-cluster
        connect_timeout: 5s
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lb-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "http2lb.udm2.svc.cluster.local."
                    port_value: 9090
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: mt-local
        connect_timeout: 5s
        type: STATIC
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: mt-local
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 8087
        http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: nim-service
        connect_timeout: 5s
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nim.udm2.svc.cluster.local."
                    port_value: 8082
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        protocol_selection: USE_DOWNSTREAM_PROTOCOL
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
---
# Source: reg-helm-charts/charts/mt/templates/configmapffsclientconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mtffsclientconfigmap
  namespace: udm2
  labels:
    app: mtffsclientconfigmap
data:
   filestore_config.ini: |-
     raiseAlarm= true
     sendNotification= true
     [ZTS_FILESTORE_udmmt]
     #fileName = path,group1:group2,maxFileSize value to be given in MB, Maximum No of Rules to be allowed for provisioning
     ErrorCodeMappingudmmt.json = /logstore/FileStore,NGC_MTS,1,3000
---
# Source: reg-helm-charts/charts/nim/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nimconfigmap
  namespace: udm2
  labels:
    app: nimconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: nim_envoy_0
      cluster: nim_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: ingresshttp2
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: ingresshttp2-nim
                virtual_hosts:
                - name: ingresshttp2-nim
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: nim-local, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: egresshttp2
        address:
          socket_address: { address: 127.0.0.1, port_value: 10000}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: egress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: egresshttp2-nim
                virtual_hosts:
                - name: egresshttp2-nim
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: lb-cluster, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      if request_handle:headers():get("x-envoy-original-dst-host") == nil then
                        request_handle:headers():add("x-envoy-original-dst-host", request_handle:headers():get(":authority"))
                      end
                    end
              - name: envoy.filters.http.router
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_nim
                virtual_hosts:
                - name: grpc_nim
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: dns-apps, timeout: "5s" }
                  - match: { prefix: "/xim", case_sensitive: false }
                    route: { cluster: xim-service, timeout: "5s" }
                  - match: { prefix: "/lag.UdmServiceLoadInfo", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
                  - match: { prefix: "/lag.LciOciData", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 0.000s }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: external_listener
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8082}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_in_nim
                virtual_hosts:
                - name: grpc_in_nim
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/nim", case_sensitive: false }
                    route: { cluster: nim-apps, timeout: "0s" }
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: dns-apps, timeout: "0s" }
                  - match: { prefix: "/lag", case_sensitive: false }
                    route: { cluster: lag-apps, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: lb-cluster
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lb-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "http2lb.udm2.svc.cluster.local."
                    port_value: 9090
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: nim-local
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-local
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 8087
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: nim-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 20000
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 20001
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: dns-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: dns-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 21000
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: lag-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 22000
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: xim-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: xim-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "sim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/nim/templates/configmapffsclientconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nimffsclientconfigmap
  namespace: udm2
  labels:
    app: nimffsclientconfigmap
data:
   filestore_config.ini: |-
     raiseAlarm= true
     sendNotification= true
     [ZTS_FILESTORE_udmnim]
     #fileName = path,group1:group2,maxFileSize value to be given in MB
     LargeSupiGpsiRanges.json = /logstore/FileStore,NGC_NIM,5
---
# Source: reg-helm-charts/charts/nim/templates/configmapimslbconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nimconfigmap-imslbconf
  namespace: udm2
  labels:
    app: nimconfigmap
data:
  ParmInst.out: |-
    {
      "Scalars": {
        "DuParam": [
          {
            "Param": {
              "Value": "102400",
              "Name": "System.DnsPhCacheSize"
            },
            "Key": "nim/ngc/dnsph,System.DnsPhCacheSize,Integer"
          },
          {
            "Param": {
              "Value": "/etc/resolv.conf",
              "Name": "System.DnsResolvConfPath"
            },
            "Key": "nim/ngc/dnsph,System.DnsResolvConfPath,String"
          },
          {
            "Param": {
              "Value": "/etc/resolv.conf",
              "Name": "System.DnsResolvConfigPath"
            },
            "Key": "nim/ngc/dnsph,System.DnsResolvConfigPath,String"
          },
          {
            "Param": {
              "Value": "2048",
              "Name": "System.DnsUDPpayload"
            },
            "Key": "nim/ngc/dnsph,System.DnsUDPpayload,Integer"
          },
          {
            "Param": {
              "Value": "/opt/SMAW/INTP/bin64/get_raw_socket",
              "Name": "System.RawSocketPath"
            },
            "Key": "nim/ngc/imslb,System.RawSocketPath,String"
          },
          {
            "Param": {
              "Value": "0",
              "Name": "System.IncreasedProcessCount"
            },
            "Key": "nim/ngc/imslb,System.IncreasedProcessCount,Integer"
          },
          {
            "Param": {
              "Value": "10",
              "Name": "System.DynDnsTtl"
            },
            "Key": "nim/ngc/imslb,System.DynDnsTtl,Integer"
          },
          {
            "Param": {
              "Value": "0",
              "Name": "System.disableIcmp"
            },
            "Key": "nim/ngc/imslb,System.disableIcmp,String"
          },
          {
            "Param": {
              "Value": "IMSCA6040000.123",
              "Name": "Versioning.ApsName"
            },
            "Key": "nim/ngc/imslb,Versioning.ApsName,String"
          },
          {
            "Param": {
              "Value": "2000",
              "Name": "System.DnsTransactionTimer"
            },
            "Key": "nim/ngc/dnsph,System.DnsTransactionTimer,Integer"
          },
          {
            "Param": {
              "Value": "5",
              "Name": "System.MaxRetryForDnsTransaction"
            },
            "Key": "nim/ngc/dnsph,System.MaxRetryForDnsTransaction,Integer"
          }
        ]
      },
      "Tables": {
        "DuParam": [
          {
            "Key": "nim/ngc/dnsph,System.LocalDnsNaptr",
            "Name": "System.LocalDnsNaptr",
            "RowsV": [
              [
              ]
            ]
          },
          {
            "Key": "nim/ngc/dnsph,System.LocalDnsSrv",
            "Name": "System.LocalDnsSrv",
            "RowsV": [
              [
              ]
            ]
          },
          {
            "Key": "nim/ngc/dnsph,System.LocalDnsA",
            "Name": "System.LocalDnsA",
            "RowsV": [
              [
              ]
            ]
          },
          {
            "Key": "nim/ngc/imslb,System.SctpIPAddresses",
            "Name": "System.SctpIPAddresses",
            "RowsV": [
              [
              ]
            ]
          },
          {
            "Key": "nim/ngc/imslb,System.IPAddresses",
            "Name": "System.IPAddresses",
            "RowsV": [
              [
              ]
            ]
          },
          {
            "Key": "nim/ngc/imslb,System.Ports",
            "Name": "System.Ports",
            "RowsV": [
              [
                {
                  "Value": "IMS_DNSPH",
                  "Name": "PortUser,StringKey"
                },
                {
                  "Value": "DNS_CE1_TCP",
                  "Name": "Direction,StringKey"
                },
                {
                  "Value": "9970",
                  "Name": "Port,String"
                },
                {
                  "Value": "TCP",
                  "Name": "NetProtocol,String"
                },
                {
                  "Value": "TRUE",
                  "Name": "Listen,String"
                },
                {
                  "Value": "FALSE",
                  "Name": "Internal,String"
                },
                {
                  "Value": "Dns",
                  "Name": "DispatcherType,String"
                },
                {
                  "Value": "Dns",
                  "Name": "Connectivity,String"
                }
              ],
              [
                {
                  "Value": "IMS_DNSPH",
                  "Name": "PortUser,StringKey"
                },
                {
                  "Value": "DNS_CE1_UDP",
                  "Name": "Direction,StringKey"
                },
                {
                  "Value": "9970",
                  "Name": "Port,String"
                },
                {
                  "Value": "UDP",
                  "Name": "NetProtocol,String"
                },
                {
                  "Value": "TRUE",
                  "Name": "Listen,String"
                },
                {
                  "Value": "FALSE",
                  "Name": "Internal,String"
                },
                {
                  "Value": "Dns",
                  "Name": "DispatcherType,String"
                },
                {
                  "Value": "Dns",
                  "Name": "Connectivity,String"
                }
              ]
            ]
          },
          {
            "Key": "nim/ngc/imslb,System.DispatcherConfig",
            "Name": "System.DispatcherConfig",
            "RowsV": [
              [
                {
                  "Value": "Dns",
                  "Name": "DispatcherType,StringKey"
                },
                {
                  "Value": "10000",
                  "Name": "ConnTimeout,String"
                },
                {
                  "Value": "/opt/SMAW/INTP/lib64/libSapiDnsIpDpPlugin.so",
                  "Name": "IpdpPluginPath,String"
                },
                {
                  "Value": "OFF",
                  "Name": "LoadSharingPreference,String"
                },
                {
                  "Value": "0",
                  "Name": "LoadBalancingDifference,String"
                },
                {
                  "Value": "/tmp",
                  "Name": "TlsCertPath,String"
                },
                {
                  "Value": "20000",
                  "Name": "UdpSocketRcvBufferLen,String"
                },
                {
                  "Value": "20000",
                  "Name": "UdpSocketSndBufferLen,String"
                },
                {
                  "Value": "60",
                  "Name": "BindRepeatCount,String"
                },
                {
                  "Value": "2",
                  "Name": "BindRepeatTime,String"
                },
                {
                  "Value": "10000",
                  "Name": "PreallocatedBufSize,String"
                },
                {
                  "Value": "100",
                  "Name": "PreallocatedBufNumber,String"
                },
                {
                  "Value": "16",
                  "Name": "WorkerThreadsNumber,String"
                },
                {
                  "Value": "100",
                  "Name": "MaxNumOpenSockets,String"
                },
                {
                  "Value": "70",
                  "Name": "ShortofConnWarnLimit,String"
                },
                {
                  "Value": "TRUE",
                  "Name": "Shortcut,String"
                },
                {
                  "Value": "IMS_IpDp_DnsUdp",
                  "Name": "UDPAliasName,String"
                },
                {
                  "Value": "IMS_IpDp_DnsTcp",
                  "Name": "TCPAliasName,String"
                },
                {
                  "Value": "IMS_IpDp_DnsTls",
                  "Name": "TLSAliasName,String"
                },
                {
                  "Value": "",
                  "Name": "TlsSynchroPeers,String"
                },
                {
                  "Value": "1000",
                  "Name": "QfTimerPeriod,String"
                },
                {
                  "Value": "10000",
                  "Name": "TcpSocketRcvBufferLen,String"
                },
                {
                  "Value": "10000",
                  "Name": "TcpSocketSndBufferLen,String"
                },
                {
                  "Value": "72000000",
                  "Name": "TlsIaPermanentTimer,String"
                },
                {
                  "Value": "72000",
                  "Name": "TlsSessionCacheLifetime,String"
                },
                {
                  "Value": "39000",
                  "Name": "TlsSessionCacheSize,String"
                },
                {
                  "Value": "73000000",
                  "Name": "TlsRenegotiationTimer,String"
                },
                {
                  "Value": "60",
                  "Name": "TlsRenegotiationMaxTime,String"
                },
                {
                  "Value": "30",
                  "Name": "TlsRenegotNoSoonerThan,String"
                },
                {
                  "Value": "100",
                  "Name": "TlsMaxnoofTlsConns,String"
                },
                {
                  "Value": "61",
                  "Name": "TlsOutofTlsConnHyst,String"
                },
                {
                  "Value": "OFF",
                  "Name": "TlsCryptoAccelerator,String"
                },
                {
                  "Value": "AES128-SHA:DES-CBC3-SHA",
                  "Name": "CipherList,String"
                },
                {
                  "Value": "50",
                  "Name": "Backlog,String"
                },
                {
                  "Value": "0",
                  "Name": "MsgFragmentTimeout,String"
                },
                {
                  "Value": "32800",
                  "Name": "PortRangeBegin,String"
                },
                {
                  "Value": "32820",
                  "Name": "PortRangeEnd,String"
                },
                {
                  "Value": "400000",
                  "Name": "SctpSocketRcvBufferLen,String"
                },
                {
                  "Value": "400000",
                  "Name": "SctpSocketSndBufferLen,String"
                },
                {
                  "Value": "FALSE",
                  "Name": "SctpSoLingerActive,String"
                },
                {
                  "Value": "TRUE",
                  "Name": "SctpSoLingerPassive,String"
                },
                {
                  "Value": "71680",
                  "Name": "PreallocatedSmallBufSize,String"
                },
                {
                  "Value": "3000",
                  "Name": "PreallocatedSmallBufNumber,String"
                },
                {
                  "Value": "",
                  "Name": "VmType,String"
                },
                {
                  "Value": "FALSE",
                  "Name": "NotifyOnAccept,String"
                }
              ]
            ]
          }
        ]
      }
    }
---
# Source: reg-helm-charts/charts/sdm/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sdmconfigmap
  namespace: udm2
  labels:
    app: sdmconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: sdm_envoy_0
      cluster: sdm_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: ingresshttp2
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: ingresshttp2-sdm
                virtual_hosts:
                - name: ingresshttp2-sdm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: sdm-local, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: egresshttp2
        address:
          socket_address: { address: 127.0.0.1, port_value: 10000}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: egress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: egresshttp2-sdm
                virtual_hosts:
                - name: egresshttp2-sdm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: lb-cluster, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      if request_handle:headers():get("x-envoy-original-dst-host") == nil then
                        request_handle:headers():add("x-envoy-original-dst-host", request_handle:headers():get(":authority"))
                      end
                    end
              - name: envoy.filters.http.router
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_sdm
                virtual_hosts:
                - name: grpc_sdm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/sip.SipCommunication/sendSipData", case_sensitive: false }
                    route: { cluster: sip-service, timeout: "2s"}
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/lag.UdmServiceLoadInfo", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
                  - match: { prefix: "/lag.LciOciData", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 0.000s }
                  - match: { prefix: "/nim", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/TfrNotification.TfrNotificationService/GetNotification", case_sensitive: false }
                    route: { cluster: trigger-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: external_listener
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8082}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_in_sdm
                virtual_hosts:
                - name: grpc_in_sdm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/RtpInterface.RtpService/sendTfrSdmRequest", case_sensitive: false }
                    route: { cluster: sdm-apps, timeout: "0s" }
                  - match: { prefix: "/sdm", case_sensitive: false }
                    route: { cluster: sdm-apps, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: lb-cluster
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lb-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                 address:
                   socket_address:
                     address: "http2lb.udm2.svc.cluster.local."
                     port_value: 9090
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: sdm-local
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sdm-local
          endpoints:
          - lb_endpoints:
            - endpoint:
                 address:
                   socket_address:
                     address: "127.0.0.1"
                     port_value: 8087
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: sdm-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sdm-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20000 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20001 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20002 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20003 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20004 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20005 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20006 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20007 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20008 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20009 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20010 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20011 } }
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: sip-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sip-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "sim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: nim-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: trigger-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: trigger-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "trigger.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/sdm/templates/configmapffsclientconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ffsclientconfigmap
  namespace: udm2
  labels:
    app: ffsclientconfigmap
data:
   filestore_config.ini: |-
     raiseAlarm= true
     sendNotification= true
     [ZTS_FILESTORE_udmsdm]
     #fileName = path,group1:group2,maxFileSize value to be given in MB
     shareddata.json = /logstore/FileStore,NGC_SDM,1
     #fileName = path,group1:group2,maxFileSize value to be given in MB, Maximum No of Rules to be allowed for provisioning
     ErrorCodeMappingudmsdm.json = /logstore/FileStore,NGC_SDM,1,3000
---
# Source: reg-helm-charts/charts/sim/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: simconfigmap
  namespace: udm2
  labels:
    app: simconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: sim_envoy_0
      cluster: sim_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: external_listener
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8082}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_in_sip
                virtual_hosts:
                - name: grpc_in_sip
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/sip.SipCommunication/sendSipData", case_sensitive: false }
                    route: { cluster: sip-apps, timeout: "0s" }
                  - match: { prefix: "/xim", case_sensitive: false }
                    route: { cluster: xim-apps, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: sip-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sip-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 20000
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: xim-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: xim-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 21000
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
---
# Source: reg-helm-charts/charts/sim/templates/simfluentbitconfigmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udm2-sim-fluent-bit-config
  namespace: udm2
  labels:
    k8s-app: sim-fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
   fluent-bit.conf: |
    [SERVICE]
        Flush 1
        HTTP_Server  On
        HTTP_Listen  ${POD_IP}
        HTTP_PORT    2020
        Log_Level error
        Log_File /opt/log/fluent-bit-logs.log
        Plugins_File /fluent-bit/etc/plugins.conf
        Parsers_File /fluent-bit/etc/parser.conf

    [INPUT]
        Name tail
        Tag fbit.log
        Path /opt/log/fluent-bit-logs.log
        Path_Key class
        DB /tmpfs/fbit.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_error.log
        Path /logstore/**/mcc/99/trace/RtpTrcError/*
        Path_Key class
        DB /tmpfs/RtpTrcErrorDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_debug.log
        Path /logstore/**/mcc/99/trace/sessiontrace/*
        Path_Key class
        DB /tmpfs/TraceDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_dump.log
        Path /logstore/dumplog/RtpDump.log
        Path_Key class
        DB /tmpfs/RtpDumpDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_envoy.log
        Path /logstore/envoylogs/*
        Path_Key class
        DB /tmpfs/accessDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_entrypoint.log
        Path /logstore/entrypointlog/**/entrypoint.log
        Path_Key class
        DB /tmpfs/entrypointDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_supervisor.log
        Path /logstore/supervisor/**/*
        Path_Key class
        DB /tmpfs/supervisorDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_proxy.log
        Path /logstore/proxy/*.log
        Path_Key class
        DB /tmpfs/proxyDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_cip.log
        Path /logstore/CIP/CIP.*
        Path_Key class
        DB /tmpfs/CIPDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_pstack.log
        Path /logstore/TspCore/*.pstack
        Path_Key class
        DB /tmpfs/core.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag audit_useractivity.log
        Path /logstore/security/**/user_activity.log
        Path_Key class
        DB /tmpfs/useractDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB
    [INPUT]
        Name tail
        Tag li_datasync.log
        Path /logstore/datasynclogs/FileStoreClient-*
        Path_Key class
        DB /tmpfs/DataSyncDbFile.db
        Buffer_Chunk_Size 35000
        Buffer_Max_Size 35000
        Skip_Long_Lines On
        Mem_Buf_Limit 6MB


    [OUTPUT]
        Name gstdout
        Match *


   plugins.conf: |
    [PLUGINS]
        Path   /fluent-bit/lib/out_gstdout.so
---
# Source: reg-helm-charts/charts/trigger/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: triggerconfigmap
  namespace: udm2
  labels:
    app: triggerconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: trigger_envoy_0
      cluster: trigger_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_trig
                virtual_hosts:
                - name: grpc_trig
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/RtpInterface.RtpService/sendTfrUecmRequest", case_sensitive: false }
                    route: { cluster: uecm-trig-service, timeout: 10.000s }
                  - match: { prefix: "/RtpInterface.RtpService/sendTfrSdmRequest", case_sensitive: false }
                    route: { cluster: sdm-trig-service, timeout: 10.000s }

              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: external_listener
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8082}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_in_trigger
                virtual_hosts:
                - name: grpc_in_trigger
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/TfrNotification.TfrNotificationService/GetNotification", case_sensitive: false }
                    route: { cluster: trigger-apps, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router

      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router

      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router

      clusters:
      - name: uecm-trig-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: uecm-trig-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-uecm.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: sdm-trig-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sdm-trig-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-sdm.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: trigger-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: trigger-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20000 } }
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
---
# Source: reg-helm-charts/charts/udmueauth/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udmueauconfigmap
  namespace: udm2
  labels:
    app: udmueauconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: udmueauth_envoy_0
      cluster: udmueauth_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: ingresshttp2
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: ingresshttp2-udmueau
                virtual_hosts:
                - name: ingresshttp2-udmueau
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: udmueauth-local, timeout: "20.000s"}
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_ausf
                virtual_hosts:
                - name: grpc_ausf
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/RtpInterface.RtpService/sendRtpRequest", case_sensitive: false }
                    route: { cluster: arpf-service, timeout: 2.000s }
                  - match: { prefix: "/RtpInterface.RtpService/sendSidfRequest", case_sensitive: false }
                    route: { cluster: sidf-service, timeout: 2.000s }
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/lag.UdmServiceLoadInfo", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
                  - match: { prefix: "/lag.LciOciData", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 0.000s }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: udmueauth-local
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: udmueauth-local
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 8087
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: arpf-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: arpf-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "arpf.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
            max_pending_requests: 10000
            max_requests: 10000
      - name: sidf-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sidf-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "sidf.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
            max_pending_requests: 5000
            max_requests: 5000
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: nim-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/udmueauth/templates/configmapffsclientconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udmueauffsclientconfigmap
  namespace: udm2
  labels:
    app: udmueauffsclientconfigmap
data:
   filestore_config.ini: |-
     raiseAlarm= true
     sendNotification= true
     [ZTS_FILESTORE_udmueau]
     #fileName = path, group1:group2,maxFileSize value to be given in MB, Maximum No of Rules to be allowed for provisioning
     ErrorCodeMappingudmueau.json = /logstore/FileStore,NGC_UEAUTH,1,3000
---
# Source: reg-helm-charts/charts/ueauthn/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ausfauthconfigmap
  namespace: udm2
  labels:
    app: ausfauthconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: ueauthn_envoy_0
      cluster: ueauthn_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: ingresshttp2
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: ingresshttp2-ausf
                virtual_hosts:
                - name: ingresshttp2-ausf
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: ausf-local, timeout: "20.000s"}
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: egresshttp2
        address:
          socket_address: { address: 127.0.0.1, port_value: 10000}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: egress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: egresshttp2-ausfauth
                virtual_hosts:
                - name: egresshttp2-ausfauth
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: lb-cluster, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      if request_handle:headers():get("x-envoy-original-dst-host") == nil then
                        request_handle:headers():add("x-envoy-original-dst-host", request_handle:headers():get(":authority"))
                      end
                    end
              - name: envoy.filters.http.router
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_ausf
                virtual_hosts:
                - name: grpc_ausf
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/RtpInterface.RtpService/sendSidfRequest", case_sensitive: false }
                    route: { cluster: sidf-service, timeout: 2.000s }
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/lag.UdmServiceLoadInfo", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
                  - match: { prefix: "/lag.LciOciData", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 0.000s }
                  - match: { prefix: "/nim", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: lb-cluster
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lb-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "http2lb.udm2.svc.cluster.local."
                    port_value: 9090
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: ausf-local
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ausf-local
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 8087
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: sidf-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sidf-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "sidf.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
            max_pending_requests: 5000
            max_requests: 5000
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: nim-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/ueauthn/templates/configmapffsclientconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ausfffsclientconfigmap
  namespace: udm2
  labels:
    app: ausfffsclientconfigmap
data:
   filestore_config.ini: |-
     raiseAlarm= true
     sendNotification= true
     [ZTS_FILESTORE_ausfauth]
     #filename = path, group1:group2,maxFileSize value to be given in MB, Maximum No of Rules to be allowed for provisioning
     ErrorCodeMappingausfauth.json = /logstore/FileStore,NGC_AUSF,1,3000
---
# Source: reg-helm-charts/charts/uecm/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: uecmconfigmap
  namespace: udm2
  labels:
    app: uecmconfigmap
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: uecm_envoy_0
      cluster: uecm_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/tmp/admin_access.log"
      address:
        socket_address: { address: X_POD_ETH0_IP, port_value: 9901 }
    static_resources:
      listeners:
      - name: cmrelay_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9997}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: cmrelay_router
                virtual_hosts:
                - name: cmrelay_router
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: cm-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: ingresshttp2
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8080}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: ingresshttp2-uecm
                virtual_hosts:
                - name: ingresshttp2-uecm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: uecm-local, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: egresshttp2
        address:
          socket_address: { address: 127.0.0.1, port_value: 10000}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: egress_http2
              stream_idle_timeout: 0s
              http2_protocol_options:
                max_concurrent_streams: 1000
              route_config:
                name: egresshttp2-uecm
                virtual_hosts:
                - name: egresshttp2-uecm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: lb-cluster, timeout: "20.000s" }
              server_header_transformation: PASS_THROUGH
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      if request_handle:headers():get("x-envoy-original-dst-host") == nil then
                        request_handle:headers():add("x-envoy-original-dst-host", request_handle:headers():get(":authority"))
                      end
                    end
              - name: envoy.filters.http.router
      - name: internal_communication
        address:
          socket_address: { address: 127.0.0.1, port_value: 8081}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_uecm
                virtual_hosts:
                - name: grpc_uecm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/ee", case_sensitive: false }
                    route: { cluster: udmee-service, timeout: 5.000s }
                  - match: { prefix: "/nim", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/sip.SipCommunication/sendSipData", case_sensitive: false }
                    route: { cluster: sip-service, timeout: 2.000s }
                  - match: { prefix: "/dns", case_sensitive: false }
                    route: { cluster: nim-service, timeout: 5.000s }
                  - match: { prefix: "/lag.UdmServiceLoadInfo", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 5.000s }
                  - match: { prefix: "/lag.LciOciData", case_sensitive: false }
                    route: { cluster: lag-service, timeout: 0.000s }
                  - match: { prefix: "/sdm", case_sensitive: false }
                    route: { cluster: sdm-service, timeout: 5.000s }
                  - match: { prefix: "/TfrNotification.TfrNotificationService/GetNotification", case_sensitive: false }
                    route: { cluster: trigger-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: external_listener
        address:
          socket_address: { address: X_POD_ETH0_IP, port_value: 8082}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: grpc_in_uecm
                virtual_hosts:
                - name: grpc_in_uecm
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/RtpInterface.RtpService/sendTfrUecmRequest", case_sensitive: false }
                    route: { cluster: uecm-apps, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: epslb_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9995}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: epslb_config
                virtual_hosts:
                - name: epslb_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: epslb-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: log_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9996}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: log_config
                virtual_hosts:
                - name: log_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: log-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      - name: secret_listener
        address:
          socket_address: { address: 127.0.0.1, port_value: 9994}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: HTTP2
              stat_prefix: ingress_http
              stream_idle_timeout: 0s
              http2_protocol_options: {}
              route_config:
                name: secret_config
                virtual_hosts:
                - name: secret_config
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/", case_sensitive: false }
                    route: { cluster: secret-service, timeout: "0s" }
              access_log:
              - name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/access.log"
              http_filters:
              - name: envoy.filters.http.router
      clusters:
      - name: lb-cluster
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lb-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "http2lb.udm2.svc.cluster.local."
                    port_value: 9090
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: uecm-local
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: uecm-local
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "127.0.0.1"
                    port_value: 8087
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_pending_requests: 10000
            max_requests: 10000
      - name: udmee-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: udmee-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-ee.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: nim-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: nim-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: lag-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: lag-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "lag.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: sdm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sdm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "nudm-sdm.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: sip-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sip-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "sim.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: cm-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cm-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8080
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: uecm-apps
        connect_timeout: 5s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: uecm-apps
          endpoints:
          - lb_endpoints:
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20000 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20001 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20002 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20003 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20004 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20005 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20006 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20007 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20008 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20009 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20010 } }
            - endpoint:
                address: { socket_address: { address: "127.0.0.1" , port_value: 20011 } }
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
      - name: epslb-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epslb-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8079
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: log-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: log-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 8078
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secret-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secret-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "vnfclusterenvoylb-service.udm2.svc.cluster.local."
                    port_value: 7055
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
        upstream_connection_options:
          tcp_keepalive:
            keepalive_probes: 2
            keepalive_time: 5
            keepalive_interval: 30
      - name: trigger-service
        connect_timeout: 5s
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: trigger-service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: "trigger.udm2.svc.cluster.local."
                    port_value: 8082
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/uecm/templates/configmapffsclientconf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: uecmffsclientconfigmap
  namespace: udm2
  labels:
    app: uecmffsclientconfigmap
data:
   filestore_config.ini: |-
     raiseAlarm= true
     sendNotification= true
     [ZTS_FILESTORE_udmuecm]
     #fileName = path,group1:group2,maxFileSize value to be given in MB, Maximum No of Rules to be allowed for provisioning
     ErrorCodeMappingudmuecm.json = /logstore/FileStore,NGC_UECM,1,3000
---
# Source: reg-helm-charts/charts/vnfclusterenvoylb/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vnflbconfigmap
  namespace: udm2
  labels:
    app: vnflbconfigmap
    chart: vnfclusterenvoylb-225.280.0
    release: udm2
    namespace: udm2
    heritage: Helm
data:
  sds_int_cert_key.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_cert_key
        tls_certificate:
          certificate_chain:
            filename: /certs/sds/current/cert.pem
          private_key:
            filename: /certs/sds/current/key.pem
          watched_directory:
            path: /certs/sds
  sds_int_validation_context.yaml: |-
    resources:
      - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
        name: int_validation_context
        validation_context:
          trusted_ca:
            filename: /certs/sds/current/cacert.pem
          watched_directory:
            path: /certs/sds
  envoy.yaml: |-
    node:
      id: vnflb_envoy_0
      cluster: vnflb_envoy
    admin:
      access_log:
      - name: envoy.access_loggers.file
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: "/logstore/envoylogs/envoylb.log"
      address:
        socket_address:
          address: X_POD_ETH0_IP
          port_value: 9901
          protocol: TCP
    stats_flush_interval:
      seconds: 5
    static_resources:
      listeners:
      - name: app
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
            protocol: TCP
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: app
              stream_idle_timeout: 0s
              route_config:
                name: app
                virtual_hosts:
                - name: app
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: ztsllb
                      timeout:
                        seconds: 1800
                    decorator:
                      operation: app
                  require_tls: NONE
              server_name: envoy-ingress-app
              common_http_protocol_options:
                idle_timeout:
                  seconds: 1800
              http2_protocol_options: {}
              drain_timeout:
                seconds: 1800
              access_log:
                name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/envoylbcm.log"
              http_filters:
              - name: envoy.filters.http.router
              generate_request_id: true
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: locallogreceiver
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 9996
            protocol: TCP
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: locallogreceiver
              stream_idle_timeout: 0s
              route_config:
                name: locallogreceiver
                virtual_hosts:
                - name: locallogreceiver
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: logreceiver
                      timeout:
                        seconds: 1800
                    decorator:
                      operation: locallogreceiver
                  require_tls: NONE
              server_name: envoy-locallogreceiver
              common_http_protocol_options:
                idle_timeout:
                  seconds: 1800
              http2_protocol_options: {}
              drain_timeout:
                seconds: 1800
              access_log:
                name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/envoylblogservice.log"
              http_filters:
              - name: envoy.filters.http.router
              generate_request_id: true
      - name: logreceiverlb
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8078
            protocol: TCP
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: logreceiverlb
              stream_idle_timeout: 0s
              route_config:
                name: logreceiverlb
                virtual_hosts:
                - name: logreceiverlb
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: logreceiver
                      timeout:
                        seconds: 1800
                    decorator:
                      operation: logreceiverlb
                  require_tls: NONE
              server_name: envoy-ingress-logreceiverlb
              common_http_protocol_options:
                idle_timeout:
                  seconds: 1800
              http2_protocol_options: {}
              drain_timeout:
                seconds: 1800
              access_log:
                name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/envoylblogservice.log"
              http_filters:
              - name: envoy.filters.http.router
              generate_request_id: true
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: epslb
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8079
            protocol: TCP
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: epslb
              stream_idle_timeout: 0s
              route_config:
                name: epslb
                virtual_hosts:
                - name: epslb
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: epsservice
                      timeout:
                        seconds: 1800
                    decorator:
                      operation: epslb
                  require_tls: NONE
              server_name: envoy-ingress-epslb
              common_http_protocol_options:
                idle_timeout:
                  seconds: 1800
              http2_protocol_options: {}
              drain_timeout:
                seconds: 1800
              access_log:
                name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/envoylbeps.log"
              http_filters:
              - name: envoy.filters.http.router
              generate_request_id: true
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: secretservice
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 7055
            protocol: TCP
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: secretservice
              stream_idle_timeout: 0s
              route_config:
                name: secretservice
                virtual_hosts:
                - name: secretservice
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: secretstoreservice
                      timeout:
                        seconds: 1800
                    decorator:
                      operation: secretservice
                  require_tls: NONE
              server_name: envoy-ingress-secretservice
              common_http_protocol_options:
                idle_timeout:
                  seconds: 1800
              http2_protocol_options: {}
              drain_timeout:
                seconds: 1800
              access_log:
                name: envoy.access_loggers.file
                filter:
                  or_filter:
                    filters:
                      - status_code_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 300
                              runtime_key: access_log.access_error.status
                      - duration_filter:
                          comparison:
                            op: GE
                            value:
                              default_value: 1000
                              runtime_key: access_log.access_error.duration
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/secretservice.log"
              http_filters:
              - name: envoy.filters.http.router
              generate_request_id: true
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      - name: cms
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 7775
            protocol: TCP
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: cms
              stream_idle_timeout: 0s
              route_config:
                name: cms
                virtual_hosts:
                - name: cms
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/ClusterMonitoringService.ClusterMonitoringService/"
                    route:
                      cluster: cmscluster
                      timeout:
                        seconds: 1800
                    decorator:
                      operation: app
                  require_tls: NONE
              server_name: envoy-ingress-cms
              common_http_protocol_options:
                idle_timeout:
                  seconds: 1800
              http2_protocol_options: {}
              drain_timeout:
                seconds: 1800
              access_log:
                name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: "/logstore/envoylogs/envoycms.log"
              http_filters:
              - name: envoy.filters.http.router
              generate_request_id: true
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                tls_params:
                  cipher_suites: [AES256-SHA]
                tls_certificate_sds_secret_configs:
                - name: int_cert_key
                  sds_config:
                    path: /envoyconfig/sds_int_cert_key.yaml
                    resource_api_version: V3
                validation_context_sds_secret_config:
                  name: int_validation_context
                  sds_config:
                    path: /envoyconfig/sds_int_validation_context.yaml
                    resource_api_version: V3
      clusters:
      - name: ztsllb
        type: STRICT_DNS
        connect_timeout:
          seconds: 1800
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ztsllb
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ztslenvoylbservice.zts5g.svc.cluster.local.
                    port_value: 8080
                    protocol: TCP
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: logreceiver
        type: STRICT_DNS
        connect_timeout:
          seconds: 1800
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: logreceiver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ztslenvoylbservice.zts5g.svc.cluster.local.
                    port_value: 8078
                    protocol: TCP
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: epsservice
        type: STRICT_DNS
        connect_timeout:
          seconds: 1800
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: epsservice
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ztslenvoylbservice.zts5g.svc.cluster.local.
                    port_value: 8079
                    protocol: TCP
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: cmscluster
        type: STRICT_DNS
        connect_timeout:
          seconds: 1800
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: cmscluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ztslenvoylbservice.zts5g.svc.cluster.local.
                    port_value: 7775
                    protocol: TCP
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
      - name: secretstoreservice
        type: STRICT_DNS
        connect_timeout:
          seconds: 1800
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: secretstoreservice
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ztslenvoylbservice.zts5g.svc.cluster.local.
                    port_value: 7055
                    protocol: TCP
        typed_extension_protocol_options:
          envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
            "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
            explicit_http_config:
              http2_protocol_options: {}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_params:
                cipher_suites: [AES256-SHA]
              tls_certificate_sds_secret_configs:
              - name: int_cert_key
                sds_config:
                  path: /envoyconfig/sds_int_cert_key.yaml
                  resource_api_version: V3
              validation_context_sds_secret_config:
                name: int_validation_context
                sds_config:
                  path: /envoyconfig/sds_int_validation_context.yaml
                  resource_api_version: V3
---
# Source: reg-helm-charts/charts/commonudm/templates/udm_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: udm2-role
  namespace: udm2
  labels:
    app.kubernetes.io/managed-by: helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - patch
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - services
  - pods
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - extensions
  resourceNames:
  - udm2-ausf-udm-psp
  resources:
  - podsecuritypolicies
  verbs:
  - use
- apiGroups:
  - metrics.k8s.io
  - pods.metrics.k8s.io
  - ""
  resources:
  - pods
  - containers
  verbs:
  - get
  - watch
  - list
---
# Source: reg-helm-charts/charts/commonudm/templates/udm_rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: udm2-rolebinding
  namespace: udm2
  labels:
    app.kubernetes.io/managed-by: helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: udm2-role
subjects:
- kind: ServiceAccount
  name: udm2-sa
  namespace: udm2
---
# Source: reg-helm-charts/charts/arpf/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: arpf
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmarpf
spec:
  clusterIP: None
  ports:
  selector:
    app.kubernetes.io/name: udm2-udmarpf
---
# Source: reg-helm-charts/charts/ccasapache/templates/cassandra_svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: udm2-ccasapache
  labels:
    app: udm2-ccasapache
    release: "udm2"
    heritage: "Helm"
    
  annotations:

spec:
  type: ClusterIP
  ports:
  - name: tcp-cql
    port: 9042
    targetPort: 9042
# UDM specific enahancement on top of CSF
  - name: tcp-intra-node
    port: 7000
  - name: tcp-jmx
    port: 7199
  selector:
    app: udm2-ccasapache
---
# Source: reg-helm-charts/charts/ee/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nudm-ee
  labels:
    app.kubernetes.io/name: udm2-udmee
spec:
  clusterIP: None
  ports:
    - name: http2-sbi
      port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmee
---
# Source: reg-helm-charts/charts/http2lb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: http2lb
  labels:
    app: http2lb
    chart: "http2lb-225.280.0"
    release: udm2
    heritage: Helm
    component: http2lb
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-admin
      protocol: TCP
      port: 9903
    - name: ext-listener
      protocol: TCP
      port: 8080
  selector:
    app: http2lb
    component: http2lb
    release: udm2
---
# Source: reg-helm-charts/charts/mt/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nudm-mt
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmmt
spec:
  clusterIP: None
  ports:
    - name: http2-sbi
      port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmmt
---
# Source: reg-helm-charts/charts/nim/templates/lagservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: lag
  labels:
    app.kubernetes.io/name: udm2-lag
spec:
  clusterIP: None
  ports:
  selector:
    app.kubernetes.io/name: udm2-udmnim
    cnf.ce.nokia.com/role: leader
---
# Source: reg-helm-charts/charts/nim/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nim
  labels:
    app.kubernetes.io/name: udm2-udmnim
spec:
  clusterIP: None
  ports:
    - name: http2-sbi
      port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmnim
---
# Source: reg-helm-charts/charts/sdm/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nudm-sdm
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmsdm
spec:
  clusterIP: None
  ports:
  - name: http2-sbi
    port: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmsdm
---
# Source: reg-helm-charts/charts/sim/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sim
  labels:
    app.kubernetes.io/name: udm2-udmsim
spec:
  clusterIP: None
  ports:
  - name: http-server
    port: 7443
    protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmsim
---
# Source: reg-helm-charts/charts/trigger/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: trigger
  labels:
    app.kubernetes.io/name: udm2-udmtrigger
spec:
  clusterIP: None
  ports:
  - name: http-trigger
    port: 30300
    protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmtrigger
---
# Source: reg-helm-charts/charts/udmueauth/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nudm-ueau
  labels:
    app.kubernetes.io/name: udm2-udmueau
spec:
  clusterIP: None
  ports:
    - name: http2-sbi
      port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmueau
---
# Source: reg-helm-charts/charts/ueauthn/templates/service.yaml
#Creating another service for Ausf UEAuth with same selector 
apiVersion: v1
kind: Service
metadata:
  name: nausf-auth
  labels:
    app.kubernetes.io/name: udm2-ausfauth
spec:
  clusterIP: None
  ports:
    - name: http2-sbi
      port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-ausfauth
---
# Source: reg-helm-charts/charts/uecm/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nudm-uecm
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmuecm
spec:
  clusterIP: None
  ports:
    - name: http2-sbi
      port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: udm2-udmuecm
---
# Source: reg-helm-charts/charts/vnfclusterenvoylb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vnfclusterenvoylb-service
  namespace: udm2
  labels:
    app: vnfclusterenvoylb-service-label
#    chart: vnfclusterenvoylb-225.280.0
#    release: udm2
#    heritage: Helm
spec:
  clusterIP: None
  ports:
  - name: grpc-cm
    port: 8080
    protocol: TCP
  - name: grpc-log
    port: 8078
    protocol: TCP
  - name: grpc-eps
    port: 8079
    protocol: TCP
  - name: grpc-ss
    port: 7055
    protocol: TCP
  - name: grpc-cms
    port: 7775
    protocol: TCP
  selector:
    app: vnfclusterenvoylb-label
---
# Source: reg-helm-charts/charts/arpf/templates/deploymentArpf.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmarpf
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmarpf
    app.kubernetes.io/version: arpf-225.280.0
    app.kubernetes.io/component: UDM-ARPF
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of ARPF POD
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmarpf
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmarpf
        serviceType: UDMARPF
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMARPF
        vnfcType: ARPF
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: hsm1-lan@hsm1, hsm2-lan@hsm2, acreencryption-lan@trigger
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - udm2-udmarpf
            topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        is_edge: "true"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      serviceAccountName: udm2-sa
      priorityClassName: udm2-prio-level1
      securityContext:
        fsGroup: 2000
        runAsUser: 2000

      initContainers:
        - name: softac
          image: bcmt-registry:5000/nokia/udm/softac-cust-std:2.4.1-10
          command: ["/bin/sh", "-c", "/tmp/softac/softac-copy-cust.sh /data/softac"]
          volumeMounts:
            - name: softacvol
              mountPath: /data/softac
          resources:
            limits:
              cpu: 100m
              memory: 150Mi
            requests:
              cpu: 100m
              memory: 150Mi

      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 100m
            requests:
              memory: 400Mi
              cpu: 100m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMARPF"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: tmpfs
                mountPath: /tmpfs/
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true          
        - name: arpf-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
            postStart:
              exec:
                command:
                - "/bin/bash"
                - "-c"
                - for nexthopv4 in $(ip route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s --connect-timeout 3 -m 3 $nexthopv4 &> /dev/null; done ;for nexthopv6 in $(ip -6 route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s -g --connect-timeout 3 -m 3 [$nexthopv6] &> /dev/null; done; exit 0
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: CONTAINER_TYPES
              value: admin,arpf,cip
            - name: PODTYPE
              value: arpf
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99          
        - name: arpf-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 200Mi
              cpu: 100m
            requests:
              memory: 200Mi
              cpu: 100m
          ports:
          - name: http-debug
            containerPort: 8000
            protocol: TCP
          - name: http-ciphealth
            containerPort: 9902
            protocol: TCP
          env:
            - name: PODTYPE
              value: arpf
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: ARPF
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

        - name: arpf-arpf
          image: bcmt-registry:5000/nokia/udm/arpf:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  HTTPSV_PID=`ps -ef | grep HTTP_SV_257 | grep -v grep | awk '{print $2}'`
                  kill -s USR2 $HTTPSV_PID
                  sleep 10
          resources:
            limits:
              memory: 1400Mi
              cpu: 2400m
            requests:
              memory: 1400Mi
              cpu: 2400m
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: database
              mountPath: /database/
            - name: dump
              mountPath: /dump/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: softacvol
              mountPath: /data/softac
          ports:
          - name: tcp-postgres
            containerPort: 5434
            protocol: TCP
          - name: http-acreenc
            containerPort: 30600
            protocol: TCP
          - name: grpc-one
            containerPort: 20000
            protocol: TCP
          - name: grpc-two
            containerPort: 20001
            protocol: TCP
          - name: grpc-three
            containerPort: 20002
            protocol: TCP
          - name: grpc-four
            containerPort: 20003
            protocol: TCP
          - name: http-cafhealth
            containerPort: 9903
            protocol: TCP
          env:
            - name: CONTAINERTYPE
              value: arpf
            - name: CONTAINER_PSSTARTER
              value: ARPF_PsStarter
            - name: NETYPE
              value: ARPF
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PODTYPE
              value: arpf
            - name: DYNAMIC_TFR_ADDRESS
              value: ngc/ngtfr
            - name: KeySource
              value: ZTS
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: TRIGGER_LAN_INTERFACE
              value: trigger
            - name: ACP_EU_MAX_NUMBER
              value: "5"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: CUSTOM_SOFTAC_ENABLED
              value: "false"
            - name: STORE_HSM_SSH_KEYS_ON_SS_ENABLED
              value: "true"
            - name: HTTPSV_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: HTTPSV_SOCKET_SEND_BUF_SIZE
              value: "2097152"
            - name: ACU_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: ACU_SOCKET_SEND_BUF_SIZE
              value: "2097152"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9903/cafHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CAF application readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 700Mi
              cpu: 1250m
            requests:
              memory: 700Mi
              cpu: 1250m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: arpf
            - name: CONTAINERTYPE
              value: envoy
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: arpf.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"

          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - name: envoycerts
             mountPath: /certs
           - name: envoyconfigs
             mountPath: /envoyconfig
           - name: logstore
             mountPath: /logstore/
           - name: tmpfs
             mountPath: /tmpfs/
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true          
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/arpf/envoyReadiness.sh  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

        - name: arpf-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 300Mi
              cpu: 100m
            requests:
              memory: 300Mi
              cpu: 100m
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: envoycerts
              mountPath: /certs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          - name: tcp-cafproxy
            containerPort: 3988
            protocol: TCP
          env:
            - name: PODTYPE
              value: arpf
            - name: PROCESSES
              value: CAFPROXY,CMPROXY
            - name: NETYPE
              value: arpf
            - name: RELEASENAME
              value: udm2
            - name: SUPERVISOR_ERROR_LEVEL
              value: info
            - name: REL_VERSION
              value: "22.5.0"
            - name: CD_XML_PATH
              value: "/home/rtp99/CounterDef"
            - name: CERT_PATH
              value: /certs
            - name: CONTAINERTYPE
              value: admin
            - name: CONTAINER_PSSTARTER
              value: ADMIN_PsStarter
            - name: MONAME
              value: ARPF
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: CM_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: CM_SERVICE_PORT
              value: "9997"
            - name: SS_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: SS_SERVICE_PORT
              value: "9994"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: HEALTH_CHECK_PORT
              value: "9905"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

      volumes:
         - name: softacvol
           emptyDir: {}
         - name: tcnvol
           emptyDir: {}
         - name: logstore
           emptyDir: {}
         - name: writeablelayer
           emptyDir: {}
         - name: tmpfs
           emptyDir: {}
         - name: database
           emptyDir: {}
         - name: dump
           emptyDir: {}
         - name: envoycerts
           emptyDir: {}
         - name: envoyconfigs
           configMap:
             name: arpfconfigmap
         - name: config-volume
           configMap:
             name: udm2-fluent-bit-config
         - name: tz-config
           hostPath:
             path: /usr/share/zoneinfo/UTC

status: {}
---
# Source: reg-helm-charts/charts/clustermonitoragent/templates/clustermonitoragent-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-clustermonitoragent
  labels:
    app: clustermonitoragent
    chart: "clustermonitoragent-225.280.0"                                     # will be filled by chart name-chartversion from chart.yaml eg: exampleservice.0.1.0
    release: "udm2"                                                      # Will get filled by kubernetes
    heritage: "Helm"
spec:
  replicas: 1                                          #1
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app: clustermonitoragent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-clustermonitoragent
        app: clustermonitoragent
        serviceType: CLUSTER_MONITOR_AGENT
        vnfType: REGSTR
      annotations:
        chart: 225.280.0
        vnfType: REGSTR
        vnfName: udm2
        serviceType: CLUSTER_MONITOR_AGENT
        vnfcType: CLMON
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
    spec:
      priorityClassName: udm2-prio-level2
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      containers:
        - name: ztsclustermonitoragent
          image: "bcmt-registry:5000/nokia/udm/ztsclustermonitoragent:1.14.19"                # container image to be filled from values.yaml
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              memory: 250Mi
              cpu: 30m
            limits:
              memory: 250Mi
              cpu: 30m
          ports:
          - name: grpc-liveread
            containerPort: 3333
            protocol: TCP
          env:
          - name: MONIT_PERIOD
            value: "60"
          - name: "EPS_ADDR"
            value: 0.0.0.0
          - name: "EPS_PORT"
            value: "9995"
          - name: "GRPC_HEALTH_LISTEN_PORT"
            value: "3333"
          - name: "ClusterMonitorAgentListenIP"
            value: "127.0.0.1"
          - name: "METADATA_MAX_RELEASE"
            value: "22"
          - name: "METADATA_MIN_RELEASE"
            value: "5.0"
          - name: HANDLERCONFIG_LOGLVL
            value: "error"
          - name: vnfName
            value: udm2
          - name: "VNFTYPE"
            value: "REGSTR"
          - name: "VNFNAME"
            value: "udm2"
          - name: "VNFCTYPE"
            value: "CLMON"
          - name: cnfTypeLegacyLabel
            value: vnfType
          - name: cnfNameLegacyLabel
            value: vnfName
          - name: serviceTypeLegacyLabel
            value: serviceType
          - name: cnfcTypeLegacyLabel
            value: vnfcType
          - name: cnfMajorReleaseLegacyLabel
            value: vnfMajorRelease
          - name: cnfMinorReleaseLegacyLabel
            value: vnfMinorRelease
          - name: cnfTypeLabel
            value: cnf.ce.nokia.com/cnf-type
          - name: cnfNameLabel
            value: cnf.ce.nokia.com/cnf-instance
          - name: serviceTypeLabel
            value: cnf.ce.nokia.com/service-type
          - name: cnfcTypeLabel
            value: cnf.ce.nokia.com/pod-type
          - name: cnfReleaseLabel
            value: cnf.ce.nokia.com/cnf-version
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name

          - name: "LogRetentionPeriod"
            value: "3600"
          - name: "deploymentNamespace"
            value: "udm2"
          - name: "HCSSERVERHOST"
            value: 0.0.0.0
          - name: "HCSSERVERPORT"
            value: "8080"
          - name: "HC_REST_SERVER_ENABLE"
            value: "false"
          - name: "HC_REST_SERVER_PORT"
            value: "9090"          
          readinessProbe:
            exec:
              command:
              - sh
              - /health/health.sh
              - "127.0.0.1:3333"  
            initialDelaySeconds: 100
            timeoutSeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5

          volumeMounts:
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true
          - name: traker-logpath
            mountPath: "/opt/log"
          - name: health-volume
            mountPath: /health

        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: "IfNotPresent"
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          resources:
            requests:
              memory: 400Mi
              cpu: 80m
            limits:
              memory: 400Mi
              cpu: 80m

          env:
          - name: TARGET_IP
            value: 0.0.0.0
          - name: TARGET_PORT
            value: "9996"
          - name: VNFNAME
            value: "udm2"
          - name: VNFCTYPE
            value: "CLMON"
          - name: VNFTYPE
            value: "REGSTR"
          - name: "VNFCNAME"
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: "PODNAME"
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP          
          volumeMounts:
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true
          - name: traker-logpath
            mountPath: "/var/log"
          - name: tmpfs
            mountPath: /tmpfs/
          - name: config-volume
            mountPath: /fluent-bit/etc
          - name: logstore
            mountPath: /logstore/
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              memory: 300Mi
              cpu: 50m
            requests:
              memory: 300Mi
              cpu: 50m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: clustermonitoragent
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: clustermonitoragent.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: RAISE_ALARM_USING_TLS
              value: "false"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9901/);
                if [ "$status" == "200" ]; then exit 0; else echo "udmenvoy readiness failed"; exit 1; fi;  
            initialDelaySeconds: 100
            timeoutSeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 5

          volumeMounts:
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

      volumes:
          - name: logstore
            emptyDir: {}
          - name: tmpfs
            emptyDir: {}
          - name: envoycerts
            emptyDir: {}
          - name: envoyconfigs
            configMap:
              name: configmapenvoyclustermonitoragent
          - name: config-volume
            configMap:
              name: udm2-cma-fluent-bit-config
          - name: health-volume
            configMap:
              name: udm2-cma-health-config
          - name: tz-config
            hostPath:
              path: /usr/share/zoneinfo/UTC
          - name: config
            configMap:
              name: configmapenvoyclustermonitoragent
          - name: traker-logpath
            emptyDir: {}
---
# Source: reg-helm-charts/charts/ee/templates/deploymentEe.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmee
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmee
    app.kubernetes.io/version: ee-225.280.0
    app.kubernetes.io/component: UDM-EE
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of EE POD
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmee
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmee
        serviceType: UDMEES
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMEES
        vnfcType: EE
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: ldap-lan@ldap
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - udm2-udmee
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        is_edge: "true"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 100m
            requests:
              memory: 400Mi
              cpu: 100m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMEES"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP          
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: ee-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmee
            - name: CONTAINER_TYPES
              value: ee,admin,cip,h2p
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99

        - name: ee-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 200Mi
              cpu: 100m
            requests:
              memory: 200Mi
              cpu: 100m
          ports:
          - name: http-debug
            containerPort: 8000
            protocol: TCP
          - name: http-ciphealth
            containerPort: 9902
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmee
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: UDMEE
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinstcip
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true

        - name: ee-ee
          image: bcmt-registry:5000/nokia/udm/ee:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 1600Mi
              cpu: 2750m
            requests:
              memory: 1600Mi
              cpu: 2750m
          ports:
          - name: grpc-one
            containerPort: 20000
            protocol: TCP
          - name: grpc-two
            containerPort: 20001
            protocol: TCP
          - name: grpc-three
            containerPort: 20002
            protocol: TCP
          - name: grpc-four
            containerPort: 20003
            protocol: TCP
          - name: grpc-five
            containerPort: 20004
            protocol: TCP
          - name: grpc-six
            containerPort: 20005
            protocol: TCP
          - name: grpc-seven
            containerPort: 20006
            protocol: TCP
          - name: grpc-eight
            containerPort: 20007
            protocol: TCP
          - name: grpc-nine
            containerPort: 20008
            protocol: TCP
          - name: grpc-ten
            containerPort: 20009
            protocol: TCP
          - name: grpc-eleven
            containerPort: 20010
            protocol: TCP
          - name: grpc-twelve
            containerPort: 20011
            protocol: TCP
          - name: http-eehealth
            containerPort: 9903
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmee
            - name: CONTAINER_PSSTARTER
              value: EES_PsStarter
            - name: CONTAINERTYPE
              value: ee
            - name: NETYPE
              value: UDMEE
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: SERVICE_INTER_PLMN_FQDN
              value: "udmee.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: NIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: SDM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: REGISTER_5G
              value: "true"
            - name: LDAP_LAN_INTERFACE
              value: ldap
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LDAP_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: LDAP_SOCKET_SEND_BUF_SIZE
              value: "2097152"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: SECRET_SOURCE
              value: ZTS          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinst
            - mountPath: /home/rtp99/99/nssCert/
              name: nsscert
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
          securityContext:
            readOnlyRootFilesystem: true

        - name: ee-h2p
          image: bcmt-registry:5000/nokia/udm/h2p:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 400m
            requests:
              memory: 400Mi
              cpu: 400m
          ports:
          - name: http2-sbi
            containerPort: 8087
            protocol: TCP
          - name: http-h2phealth
            containerPort: 9906
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmee
            - name: CONTAINERTYPE
              value: h2p
            - name: CONTAINER_PSSTARTER
              value: H2P_PsStarter
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9906"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 700Mi
              cpu: 500m
            requests:
              memory: 700Mi
              cpu: 500m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmee
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: nudm-ee.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/udmee/envoyReadiness.sh  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: ee-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 300Mi
              cpu: 100m
            requests:
              memory: 300Mi
              cpu: 100m
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmee
            - name: PROCESSES
              value: CMPROXY
            - name: NETYPE
              value: udmee
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: RELEASENAME
              value: udm2
            - name: SUPERVISOR_ERROR_LEVEL
              value: info
            - name: REL_VERSION
              value: "22.5.0"
            - name: CD_XML_PATH
              value: "/home/rtp99/CounterDef"
            - name: CERT_PATH
              value: /certs
            - name: CONTAINER_PSSTARTER
              value: ADMIN_PsStarter
            - name: HEALTH_CHECK_PORT
              value: "9905"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONTAINERTYPE
              value: admin
            - name: ZTSL_IP
              value: 0.0.0.0
            - name: ZTSL_FILESTORE_PORT
              value: "9997"
            - name: ZTSL_FILESTORE_TLS_ENABLED
              value: "false"
            - name: FILESTORE_REL_VERSION
              value: "1"
            - name: MONAME
              value: EE
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: CM_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: CM_SERVICE_PORT
              value: "9997"
            - name: SS_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: SS_SERVICE_PORT
              value: "9994"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: envoycerts
              mountPath: /certs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: filestoreconfigs
              mountPath: /filestoreconfig/

      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: tspinst
         emptyDir: {}
       - name: tspinstcip
         emptyDir: {}
       - name: nsscert
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: eeconfigmap
       - name: config-volume
         configMap:
           name: udm2-fluent-bit-config
       - name: filestoreconfigs
         configMap:
           name: eeffsclientconfigmap
       - name: tz-config
         hostPath:
           path: /usr/share/zoneinfo/UTC

status: {}
---
# Source: reg-helm-charts/charts/http2lb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-http2lb
  labels:
    app: http2lb
    app.kubernetes.io/name: udm2-http2lb
    chart: "http2lb-225.280.0"
    release: udm2
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app: http2lb
      release: udm2
      app.kubernetes.io/name: udm2-http2lb
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  template:
    metadata:
      labels:
        app: http2lb
        app.kubernetes.io/name: udm2-http2lb
        release: udm2
        component: http2lb
        serviceType: HTTP2LB
        vnfType: REGSTR
      annotations:
        checksum/config: 5afb7a947284daea027191fde3898fbac9d1b45da8e8af3cbdd3be527ef16da5
        checksum/config: cb0a87d81290a32ced76f32ee3b24e634a27d99affce4c8070ec4e552a9a466d
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: HTTP2LB
        vnfcType: H2LB
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: lb-http2-lan@http2
    spec:
      shareProcessNamespace: true
      restartPolicy: Always
      priorityClassName: udm2-prio-level1
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000

      initContainers:

        - name: "http2lb-servicereginit"
          image: "bcmt-registry:5000/nokia/udm/http2lb-servicereg:225.280.0"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 70m
              memory: 100Mi
            requests:
              cpu: 70m
              memory: 100Mi
          env:
            - name: CONTAINERTYPE
              value: servicereg
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: HTTP2_PORT
              value: "8080"
            - name: HTTP2_IF_NAME
              value: http2
          volumeMounts:
            - name: logstore
              mountPath: /logstore/

      containers:
        - name: "http2lb-http2lb"
          image: "bcmt-registry:5000/nokia/udm/http2lb:225.280.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-admin
              containerPort: 9903
              protocol: TCP
            - name: http2-ingress
              containerPort: 8080
              protocol: TCP
            - name: http2-egress
              containerPort: 9090
              protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9903/);
                if [ "$status" == "200" ]; then exit 0; else echo "http2lb container probe failed"; exit 1; fi;  
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  ADMIN_PORT=9903
                  status=$(curl -s -X POST -o /dev/null -w %{http_code} "http://$POD_IP:$ADMIN_PORT/drain_listeners?inboundonly")
                  if [ $? -ne 0 -o "$status" != "200" ]
                  then
                    echo "Prestop: Failed to stop inbound listener(s)"
                  else
                    echo "Prestop: Stopped inbound listener(s)"
                  fi
                  status=$(curl -s -X POST -o /dev/null -w %{http_code} "http://$POD_IP:$ADMIN_PORT/drain_listeners?inboundonly&graceful")
                  if [ $? -ne 0 -o "$status" != "200" ]
                  then
                    echo "Prestop: Failed to drain inbound listener(s)"
                  else
                    echo "Prestop: Started draining of inbound listener(s)"
                  fi
                  echo "Prestop: Sleeping to ensure that drain completes.."
                  sleep 12
                  echo "Prestop: Exiting.."
          env:
            - name: PODTYPE
              value: http2lb
            - name: CONTAINERTYPE
              value: http2lb
            - name: extraargs
              value: "--base-id 1 --concurrency 8 --drain-time-s 10 --drain-strategy immediate"
            - name: HTTP2_EXTERNAL_TLS_ENABLED
              value: "false"
            - name: HTTP2_EXTERNAL_TLS_VALIDATION_ENABLED
              value: "true"
            - name: envoy_conf
              value: /envoyconfig/envoy.yaml
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HTTP2_IF_NAME
              value: http2
          resources:
            limits:
              cpu: 7570m
              memory: 10Gi
            requests:
              cpu: 7570m
              memory: 10Gi
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: config
              mountPath: /envoyconfig
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: tlscerts
              mountPath: /certs
        - name: "udmenvoy"
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 12
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9901/);
                if [ "$status" == "200" ]; then exit 0; else echo "envoy probe failed"; exit 1; fi;  
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 300Mi
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: http2lb
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: http2lb.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: tlscerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 12
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:2020/);
                if [ "$status" == "200" ]; then exit 0; else echo "fluent bit container probe failed"; exit 1; fi;  
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              memory: 550Mi
              cpu: 100m
            requests:
              memory: 550Mi
              cpu: 100m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "H2LB"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: http2lb-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 12
            postStart:
              exec:
                command:
                - "/bin/bash"
                - "-c"
                - for nexthopv4 in $(ip route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s --connect-timeout 3 -m 3 $nexthopv4 &> /dev/null; done ;for nexthopv6 in $(ip -6 route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s -g --connect-timeout 3 -m 3 [$nexthopv6] &> /dev/null; done; exit 0
          
          resources:
            limits:
              cpu: 50m
              memory: 500Mi
            requests:
              cpu: 50m
              memory: 500Mi
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: PODTYPE
              value: http2lb
            - name: CONTAINER_TYPES
              value: admin,http2lb,mgmt
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99

        - name: http2lb-mgmt
          image: bcmt-registry:5000/nokia/udm/http2lb-mgmt:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 12
          
          resources:
            limits:
              cpu: 80m
              memory: 200Mi
            requests:
              cpu: 80m
              memory: 200Mi
          ports:
            - name: http-mgmthealth
              containerPort: 9902
              protocol: TCP
          env:
            - name: PODTYPE
              value: http2lb
            - name: CONTAINERTYPE
              value: mgmt
            - name: CONTAINER_PSSTARTER
              value: HLB_PsStarter
            - name: HTTP2_PORT
              value: "8080"
            - name: HTTP2_EXTERNAL_TLS_ENABLED
              value: "false"
            - name: TLS_SERVER_CERT_VALIDATION
              value: "true"
            - name: TLS_CLIENT_CERT_VALIDATION
              value: "true"
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tlscerts
              mountPath: /certs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: "http2lb-admin"
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 12
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 300Mi
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          env:
            - name: PODTYPE
              value: http2lb
            - name: PROCESSES
              value: 
            - name: NETYPE
              value: http2lb
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: RELEASENAME
              value: udm2
            - name: SUPERVISOR_ERROR_LEVEL
              value: info
            - name: REL_VERSION
              value: "22.5.0"
            - name: CD_XML_PATH
              value: "/home/rtp99/CounterDef"
            - name: CERT_PATH
              value: /certs
            - name: CONTAINER_PSSTARTER
              value: ADMIN_PsStarter
            - name: CONTAINERTYPE
              value: admin
            - name: MONAME
              value: H2LB
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: CM_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: CM_SERVICE_PORT
              value: "9997"
            - name: SS_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: SS_SERVICE_PORT
              value: "9994"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: HEALTH_CHECK_PORT
              value: "9905"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tlscerts
              mountPath: /certs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
      nodeSelector:
        is_edge: "true"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - udm2-http2lb
            topologyKey: "kubernetes.io/hostname"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      volumes:
        - name: tcnvol
          emptyDir: {}
        - name: logstore
          emptyDir: {}
        - name: writeablelayer
          emptyDir: {}
        - name: tmpfs
          emptyDir: {}
        - name: tlscerts
          emptyDir: {}
        - name: tz-config
          hostPath:
            path: /usr/share/zoneinfo/UTC
        - name: config
          configMap:
            name: udm2-http2lb
        - name: envoyconfigs
          configMap:
            name: http2lbenvoysidecar
        - name: config-volume
          configMap:
            name: udm2-h2plb-fluent-bit-config
---
# Source: reg-helm-charts/charts/mt/templates/deploymentMt.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmmt
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmmt
    app.kubernetes.io/version: mt-225.280.0
    app.kubernetes.io/component: UDM-MT
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of MT POD
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmmt
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmmt
        serviceType: UDMMTS
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMMTS
        vnfcType: MT
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: ldap-lan@ldap
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - udm2-udmmt
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        is_edge: "true"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 100m
            requests:
              memory: 400Mi
              cpu: 100m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMMTS"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP          
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: mt-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmmt
            - name: CONTAINER_TYPES
              value: mt,admin,cip
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99

        - name: mt-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 200Mi
              cpu: 100m
            requests:
              memory: 200Mi
              cpu: 100m
          ports:
          - name: http-debug
            containerPort: 8000
            protocol: TCP
          - name: http-ciphealth
            containerPort: 9902
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmmt
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: UDMMT
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: mt-mt
          image: bcmt-registry:5000/nokia/udm/mt:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 2000Mi
              cpu: 3150m
            requests:
              memory: 2000Mi
              cpu: 3150m
          ports:
          - name: http2-sbi
            containerPort: 8087
            protocol: TCP
          - name: http-mthealth
            containerPort: 9903
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmmt
            - name: CONTAINER_PSSTARTER
              value: MTS_PsStarter
            - name: CONTAINERTYPE
              value: mt
            - name: NETYPE
              value: UDMMT
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: SERVICE_INTER_PLMN_FQDN
              value: "udmmt.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: NIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: REGISTER_5G
              value: "true"
            - name: LDAP_LAN_INTERFACE
              value: ldap
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LDAP_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: LDAP_SOCKET_SEND_BUF_SIZE
              value: "2097152"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: SECRET_SOURCE
              value: ZTS          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 700Mi
              cpu: 500m
            requests:
              memory: 700Mi
              cpu: 500m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmmt
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: nudm-mt.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/udmmt/envoyReadiness.sh  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: mt-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 300Mi
              cpu: 100m
            requests:
              memory: 300Mi
              cpu: 100m
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmmt
            - name: PROCESSES
              value: CMPROXY
            - name: NETYPE
              value: udmmt
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: RELEASENAME
              value: udm2
            - name: SUPERVISOR_ERROR_LEVEL
              value: info
            - name: REL_VERSION
              value: "22.5.0"
            - name: CD_XML_PATH
              value: "/home/rtp99/CounterDef"
            - name: CERT_PATH
              value: /certs
            - name: CONTAINER_PSSTARTER
              value: ADMIN_PsStarter
            - name: HEALTH_CHECK_PORT
              value: "9905"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONTAINERTYPE
              value: admin
            - name: ZTSL_IP
              value: 0.0.0.0
            - name: ZTSL_FILESTORE_PORT
              value: "9997"
            - name: ZTSL_FILESTORE_TLS_ENABLED
              value: "false"
            - name: FILESTORE_REL_VERSION
              value: "1"
            - name: MONAME
              value: MT
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: CM_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: CM_SERVICE_PORT
              value: "9997"
            - name: SS_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: SS_SERVICE_PORT
              value: "9994"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CUSTOM_SECRET_SOURCE
              value: ZTS          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: envoycerts
              mountPath: /certs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: filestoreconfigs
              mountPath: /filestoreconfig/

      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: mtconfigmap
       - name: config-volume
         configMap:
           name: udm2-fluent-bit-config
       - name: filestoreconfigs
         configMap:
           name: mtffsclientconfigmap
       - name: tz-config
         hostPath:
           path: /usr/share/zoneinfo/UTC

status: {}
---
# Source: reg-helm-charts/charts/nim/templates/deploymentNim.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmnim
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmnim
    app.kubernetes.io/version: nim-225.280.0
    app.kubernetes.io/component: NIM
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of NIM POD
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmnim
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmnim
        serviceType: UDMNIM
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMNIM
        vnfcType: NIM
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - udm2-udmnim
            topologyKey: "kubernetes.io/hostname"
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      #affinity:
      #  nodeAffinity:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #      nodeSelectorTerms:
      #      - matchExpressions:
      #        - key: failure-domain.beta.kubernetes.io/zone
      #          operator: In
      #          values:
      #          - 
      #          - 
      #shareProcessNamespace: true
      restartPolicy: Always
      priorityClassName: udm2-prio-level2
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 400Mi
              cpu: 80m
            requests:
              memory: 400Mi
              cpu: 80m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMNIM"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: nim-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 500Mi
              cpu: 40m
            requests:
              memory: 500Mi
              cpu: 40m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
           - name: PODTYPE
             value: udmnim
           - name: CONTAINER_TYPES
             value: nim,admin,h2p,cip
           - name: CONTAINERTYPE
             value: "mcc"
           - name: SERVICE_MESH_ENABLED
             value: "false"
           - name: HEALTH_CHECK_PORT
             value: "9904"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"
           - name: POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - mountPath: /logstore/
             name: logstore
           - mountPath: /writeablelayer/
             name: writeablelayer
           - mountPath: /tmpfs/
             name: tmpfs
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true
          workingDir: /home/rtp99

        - name: nim-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            initialDelaySeconds: 10
            failureThreshold: 2
          resources:
            limits:
              memory: 200Mi
              cpu: 80m
            requests:
              memory: 200Mi
              cpu: 80m
          ports:
          - name: http-debug
            containerPort: 8000
            protocol: TCP
          - name: http-ciphealth
            containerPort: 9902
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmnim
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: NIM
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinstcip
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true

        - name: nim-nim
          image: bcmt-registry:5000/nokia/udm/nim:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 500Mi
              cpu: 790m
            requests:
              memory: 500Mi
              cpu: 790m
          ports:
          - name: grpc-one
            containerPort: 20000
            protocol: TCP
          - name: grpc-two
            containerPort: 20001
            protocol: TCP
          - name: grpc-dns
            containerPort: 21000
            protocol: TCP
          - name: grpc-lag
            containerPort: 22000
            protocol: TCP
          - name: http-nimhealth
            containerPort: 9903
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmnim
            - name: CONTAINER_PSSTARTER
              value: NIM_PsStarter
            - name: CONTAINERTYPE
              value: nim
            - name: NETYPE
              value: NIM
            - name: NRF_ADDRESS_DB_READ_PERIODICITY_MS
              value: "5000"
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: ENABLE_SIDF_FOR_AUSF
              value: "false"
            - name: NIM_GRPC_ENDPOINT
              value: "127.0.0.1:21000"
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: SM_UDM_NF_FQDN
              value: ""
            - name: SM_UDM_UEAUTH_FQDN
              value: ""
            - name: SM_UECM_FQDN
              value: ""
            - name: SM_SDM_FQDN
              value: ""
            - name: SM_EE_FQDN
              value: ""
            - name: SM_MT_FQDN
              value: ""
            - name: SM_NIDD_FQDN
              value: ""
            - name: SM_PP_FQDN
              value: ""
            - name: SM_NIM_FQDN
              value: ""
            - name: SM_AUSF_NF_FQDN
              value: ""
            - name: SM_AUSF_UEAUTH_FQDN
              value: ""
            - name: SM_AUSF_SOR_FQDN
              value: ""
            - name: SM_AUSF_UPU_FQDN
              value: ""
            - name: SM_UDM_INTER_PLMN_FQDN
              value: "udm.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_UDM_UEAUTH_INTER_PLMN_FQDN
              value: "udmueauth.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_UECM_INTER_PLMN_FQDN
              value: "udmuecm.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_SDM_INTER_PLMN_FQDN
              value: "udmsdm.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_EE_INTER_PLMN_FQDN
              value: "udmee.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_MT_INTER_PLMN_FQDN
              value: "udmmt.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_NIDD_INTER_PLMN_FQDN
              value: "udmnidd.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_PP_INTER_PLMN_FQDN
              value: "udmpp.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_NIM_INTER_PLMN_FQDN
              value: "udmnim.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_AUSF_NF_INTER_PLMN_FQDN
              value: "ausf.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_AUSF_UEAUTH_INTER_PLMN_FQDN
              value: "ausfueauth.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_AUSF_SOR_INTER_PLMN_FQDN
              value: "ausfsor.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SM_AUSF_UPU_INTER_PLMN_FQDN
              value: "ausfupu.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: N13_ENABLED
              value: "true"
            - name: AUSF_NF_SUPPORTED
              value: "true"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REGISTER_CN
              value: POD
            - name: INTERNAL_LAN_INTERFACE
              value: eth0
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LARGE_SBI_MESSAGE_SIZE
              value: "0"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: XIX_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: IS_XIX_ENABLED
              value: "true"
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinst
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
          securityContext:
            readOnlyRootFilesystem: true

        - name: nim-h2p
          image: bcmt-registry:5000/nokia/udm/h2p:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 500Mi
              cpu: 300m
            requests:
              memory: 500Mi
              cpu: 300m
          ports:
          - name: http2-sbi
            containerPort: 8087
            protocol: TCP
          - name: http-h2phealth
            containerPort: 9906
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmnim
            - name: CONTAINERTYPE
              value: h2p
            - name: CONTAINER_PSSTARTER
              value: H2P_PsStarter
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LARGE_SBI_MESSAGE_SIZE
              value: "0"
            - name: HEALTH_CHECK_PORT
              value: "9906"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/udmnim/envoyReadiness.sh  
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            initialDelaySeconds: 10
            failureThreshold: 2
          resources:
            limits:
              memory: 700Mi
              cpu: 560m
            requests:
              memory: 700Mi
              cpu: 560m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmnim
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: nim.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: nim-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            initialDelaySeconds: 10
            failureThreshold: 2
          resources:
            limits:
              memory: 300Mi
              cpu: 90m
            requests:
              memory: 300Mi
              cpu: 90m
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          env:
           - name: PODTYPE
             value: udmnim
           - name: PROCESSES
             value: CMPROXY
           - name: NETYPE
             value: nim
           - name: "DUName"
             value: "udm2"
           - name: "Release"
             value: "1"
           - name: RELEASENAME
             value: udm2
           - name: SUPERVISOR_ERROR_LEVEL
             value: info
           - name: REL_VERSION
             value: "22.5.0"
           - name: HEALTH_CHECK_PORT
             value: "9905"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"
           - name: POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
           - name: CD_XML_PATH
             value: "/home/rtp99/CounterDef"
           - name: CERT_PATH
             value: /certs
           - name: CONTAINER_PSSTARTER
             value: ADMIN_PsStarter
           - name: CONTAINERTYPE
             value: admin
           - name: ZTSL_IP
             value: 0.0.0.0
           - name: ZTSL_FILESTORE_PORT
             value: "9997"
           - name: ZTSL_FILESTORE_TLS_ENABLED
             value: "false"
           - name: FILESTORE_REL_VERSION
             value: "1"
           - name: MONAME
             value: NIM
           - name: SERVICE_MESH_ENABLED
             value: "false"
           - name: CM_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: CM_SERVICE_PORT
             value: "9997"
           - name: SS_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: SS_SERVICE_PORT
             value: "9994"
           - name: EVENT_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: EVENT_SERVICE_PORT
             value: "9995"
          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - name: logstore
             mountPath: /logstore/
           - name: tmpfs
             mountPath: /tmpfs/
           - name: envoycerts
             mountPath: /certs
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true
           - mountPath: /opt/rc/
             name: imslbconfig
           - name: filestoreconfigs
             mountPath: /filestoreconfig/

        - name: leader-elector
          image: bcmt-registry:5000/nokia/udm/leader-elector:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 200Mi
              cpu: 60m
            requests:
              memory: 200Mi
              cpu: 60m
          ports:
          - name: http-leader
            containerPort: 4040
            protocol: TCP
          - name: http-lehealth
            containerPort: 9907
            protocol: TCP
          env:
          - name: CONTAINERTYPE
            value: leader-elector
          - name: LEADER_ELECTOR_ARGS
            value: "--election=nim --election-namespace=udm2 --ttl=4s --http=0.0.0.0:4040"
          - name: SERVICE_NAME
            value: nim
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_MESH_ENABLED
            value: "false"
          - name: HEALTH_CHECK_PORT
            value: "9907"
          - name: HEALTH_CHECK_PROCESS_ENABLED
            value: "false"
          volumeMounts:
          - name: logstore
            mountPath: /logstore/
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true

      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: tspinst
         emptyDir: {}
       - name: tspinstcip
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: nimconfigmap
       - name: config-volume
         configMap:
           name: udm2-fluent-bit-config
       - name: filestoreconfigs
         configMap:
           name: nimffsclientconfigmap
       - name: tz-config
         hostPath:
           path: /usr/share/zoneinfo/UTC
       - name: imslbconfig
         configMap:
           name: nimconfigmap-imslbconf

status: {}
---
# Source: reg-helm-charts/charts/sdm/templates/deploymentSdm.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmsdm
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmsdm
    app.kubernetes.io/version: sdm-225.280.0
    app.kubernetes.io/component: UDM-SDM
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of SDM POD
spec:
  replicas: 1
  #minReadySeconds: 10                       # minimum number of seconds for which a new pod should be available without any of its container craching after an update
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
     app.kubernetes.io/name: udm2-udmsdm
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmsdm
        serviceType: UDMSDM
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMSDM
        vnfcType: SDM
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: ldap-lan@ldap
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - udm2-udmsdm
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        is_edge: "true"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 80m
            requests:
              memory: 400Mi
              cpu: 80m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMSDM"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP          
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: sdm-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmsdm
            - name: CONTAINER_TYPES
              value: sdm,admin,cip,h2p
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99

        - name: sdm-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 200Mi
              cpu: 100m
            requests:
              memory: 200Mi
              cpu: 100m
          ports:
            - name: http-debug
              containerPort: 8000
              protocol: TCP
            - name: http-ciphealth
              containerPort: 9902
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmsdm
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: UDMSDM
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinstcip
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true

        - name: sdm-sdm
          image: bcmt-registry:5000/nokia/udm/sdm:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 2900Mi
              cpu: 2870m
            requests:
              memory: 2900Mi
              cpu: 2870m
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinst
            - mountPath: /home/rtp99/99/nssCert/
              name: nsscert
            - name: logstore
              mountPath: /logstore/
            - name: redisrdb
              mountPath: /redisRdb/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
          securityContext:
            readOnlyRootFilesystem: true
          ports:
          - name: grpc-one
            containerPort: 20000
            protocol: TCP
          - name: grpc-two
            containerPort: 20001
            protocol: TCP
          - name: grpc-three
            containerPort: 20002
            protocol: TCP
          - name: grpc-four
            containerPort: 20003
            protocol: TCP
          - name: grpc-five
            containerPort: 20004
            protocol: TCP
          - name: grpc-six
            containerPort: 20005
            protocol: TCP
          - name: grpc-seven
            containerPort: 20006
            protocol: TCP
          - name: grpc-eight
            containerPort: 20007
            protocol: TCP
          - name: grpc-nine
            containerPort: 20008
            protocol: TCP
          - name: grpc-ten
            containerPort: 20009
            protocol: TCP
          - name: grpc-eleven
            containerPort: 20010
            protocol: TCP
          - name: grpc-twelve
            containerPort: 20011
            protocol: TCP
          - name: http-sdmhealth
            containerPort: 9903
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmsdm
            - name: CONTAINERTYPE
              value: sdm
            - name: CONTAINER_PSSTARTER
              value: SDM_PsStarter
            - name: NETYPE
              value: UDMSDM
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: REGISTER_5G
              value: "true"
            - name: LDAP_LAN_INTERFACE
              value: ldap
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: SDS_CACHE_NUDR_ENABLED
              value: "false"
            - name: SST_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: SERVICE_INTER_PLMN_FQDN
              value: "udmsdm.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: SIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: NIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: TRIGGER_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: HOST_IP
              valueFrom:
               fieldRef:
                fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LDAP_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: LDAP_SOCKET_SEND_BUF_SIZE
              value: "2097152"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: SECRET_SOURCE
              value: ZTS          

        - name: sdm-h2p
          image: bcmt-registry:5000/nokia/udm/h2p:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 450m
            requests:
              memory: 400Mi
              cpu: 450m
          ports:
          - name: http2-sbi
            containerPort: 8087
            protocol: TCP
          - name: http-h2phealth
            containerPort: 9906
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmsdm
            - name: CONTAINERTYPE
              value: h2p
            - name: CONTAINER_PSSTARTER
              value: H2P_PsStarter
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9906"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 700Mi
              cpu: 350m
            requests:
              memory: 700Mi
              cpu: 350m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmsdm
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: nudm-sdm.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/udmsdm/envoyReadiness.sh  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - name: envoycerts
             mountPath: /certs
           - name: envoyconfigs
             mountPath: /envoyconfig
           - name: logstore
             mountPath: /logstore/
           - name: tmpfs
             mountPath: /tmpfs/
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true

        - name: sdm-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 300Mi
              cpu: 100m
            requests:
              memory: 300Mi
              cpu: 100m
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          env:
           - name: PODTYPE
             value: udmsdm
           - name: PROCESSES
             value: CMPROXY
           - name: NETYPE
             value: udmsdm
           - name: RELEASENAME
             value: udm2
           - name: SUPERVISOR_ERROR_LEVEL
             value: info
           - name: REL_VERSION
             value: "22.5.0"
           - name: CD_XML_PATH
             value: "/home/rtp99/CounterDef"
           - name: CERT_PATH
             value: /certs
           - name: CONTAINERTYPE
             value: admin
           - name: CONTAINER_PSSTARTER
             value: ADMIN_PsStarter
           - name: ZTSL_IP
             value: 0.0.0.0
           - name: ZTSL_FILESTORE_PORT
             value: "9997"
           - name: ZTSL_FILESTORE_TLS_ENABLED
             value: "false"
           - name: FILESTORE_REL_VERSION
             value: "1"
           - name: MONAME
             value: SDM
           - name: "DUName"
             value: "udm2"
           - name: "Release"
             value: "1"
           - name: SERVICE_MESH_ENABLED
             value: "false"
           - name: CM_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: CM_SERVICE_PORT
             value: "9997"
           - name: SS_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: SS_SERVICE_PORT
             value: "9994"
           - name: EVENT_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: EVENT_SERVICE_PORT
             value: "9995"
           - name: HEALTH_CHECK_PORT
             value: "9905"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"
           - name: POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
           - name: CUSTOM_SECRET_SOURCE
             value: ZTS          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - name: logstore
             mountPath: /logstore/
           - name: tmpfs
             mountPath: /tmpfs/
           - name: envoycerts
             mountPath: /certs
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true
           - name: filestoreconfigs
             mountPath: /filestoreconfig/

      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: tspinst
         emptyDir: {}
       - name: tspinstcip
         emptyDir: {}
       - name: nsscert
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: redisrdb
         emptyDir:
           sizeLimit: 200Mi
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: sdmconfigmap
       - name: config-volume
         configMap:
           name: udm2-fluent-bit-config
       - name: filestoreconfigs
         configMap:
           name: ffsclientconfigmap
       - name: tz-config
         hostPath:
           path: /usr/share/zoneinfo/UTC

status: {}
---
# Source: reg-helm-charts/charts/sim/templates/deploymentSim.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmsim
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmsim
    app.kubernetes.io/version: sim-225.280.0
    app.kubernetes.io/component: SIM
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of SIM POD
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmsim
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmsim
        serviceType: UDMSIM
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMSIM
        vnfcType: SIM
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: li-lan@li
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - udm2-udmsim
            topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        is_edge: "true"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      priorityClassName: udm2-prio-level3
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 400Mi
              cpu: 100m
            requests:
              memory: 400Mi
              cpu: 100m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMSIM"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: sim-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
            postStart:
              exec:
                command:
                - "/bin/bash"
                - "-c"
                - for nexthopv4 in $(ip route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s --connect-timeout 3 -m 3 $nexthopv4 &> /dev/null; done ;for nexthopv6 in $(ip -6 route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s -g --connect-timeout 3 -m 3 [$nexthopv6] &> /dev/null; done; exit 0
          
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
           - name: PODTYPE
             value: udmsim
           - name: CONTAINER_TYPES
             value: xix,admin,cip,transporter
           - name: CONTAINERTYPE
             value: "mcc"
           - name: SERVICE_MESH_ENABLED
             value: "false"
           - name: HEALTH_CHECK_PORT
             value: "9904"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"
           - name: POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - mountPath: /logstore/
             name: logstore
           - mountPath: /writeablelayer/
             name: writeablelayer
           - mountPath: /tmpfs/
             name: tmpfs
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true
          workingDir: /home/rtp99

        - name: sim-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            initialDelaySeconds: 10
            failureThreshold: 2
          resources:
            limits:
              memory: 200Mi
              cpu: 100m
            requests:
              memory: 200Mi
              cpu: 100m
          ports:
          - name: http-debug
            containerPort: 8000
            protocol: TCP
          - name: http-ciphealth
            containerPort: 9902
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmsim
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: SIP
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: IS_XIX_ENABLED
              value: "true"
            - name: IS_X2_PDU_BUFFERING_ENABLED
              value: "false"
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinstcip
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
        - name: sim-transporter
          image: bcmt-registry:5000/nokia/udm/transporter:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 700Mi
              cpu: 450m
            requests:
              memory: 700Mi
              cpu: 450m
          ports:
          - name: http-server
            containerPort: 7443
            protocol: TCP
          - name: http-hc4trans
            containerPort: 9906
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmsim
            - name: CONTAINER_PSSTARTER
              value: TRANSPORTER_PsStarter
            - name: CONTAINERTYPE
              value: transporter
            - name: HTTPSV_LAN_INTERFACE
              value: li
            - name: HXDISP_SERVICENAME_PORT
              value: "li_7443"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9906"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: X1INGRESS_SOCKET_SND_BUF_SIZE
              value: "2097152"
            - name: X1INGRESS_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: X1EGRESS_SOCKET_SND_BUF_SIZE
              value: "2097152"
            - name: X1EGRESS_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: X2EGRESS_SOCKET_SND_BUF_SIZE
              value: "2097152"
            - name: X2EGRESS_SOCKET_RECV_BUF_SIZE
              value: "1048576"
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
   
        - name: sim-xix
          image: bcmt-registry:5000/nokia/udm/xix:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          
          resources:
            limits:
              memory: 400Mi
              cpu: 550m
            requests:
              memory: 400Mi
              cpu: 550m
          ports:
          - name: grpc-one
            containerPort: 20000
            protocol: TCP
          - name: grpc-two
            containerPort: 21000
            protocol: TCP
          - name: http-xixhealth
            containerPort: 9903
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmsim
            - name: CONTAINER_PSSTARTER
              value: XIX_PsStarter
            - name: CONTAINERTYPE
              value: xix
            - name: NETYPE
              value: SIP
            - name: LI_LAN_INTERFACE
              value: li
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: COREDUMP
              value: disabled
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/udmsim/envoyReadiness.sh  
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            initialDelaySeconds: 10
            failureThreshold: 2
          resources:
            limits:
              memory: 300Mi
              cpu: 600m
            requests:
              memory: 300Mi
              cpu: 600m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmsim
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: sim.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: sim-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            initialDelaySeconds: 10
            failureThreshold: 2
          resources:
            limits:
              memory: 300Mi
              cpu: 90m
            requests:
              memory: 300Mi
              cpu: 90m
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          env:
           - name: PODTYPE
             value: udmsim
           - name: PROCESSES
             value: CMPROXY
           - name: NETYPE
             value: sip
           - name: "DUName"
             value: "udm2"
           - name: "Release"
             value: "1"
           - name: RELEASENAME
             value: udm2
           - name: SUPERVISOR_ERROR_LEVEL
             value: info
           - name: REL_VERSION
             value: "22.5.0"
           - name: CD_XML_PATH
             value: "/home/rtp99/CounterDef"
           - name: CERT_PATH
             value: /certs
           - name: CONTAINER_PSSTARTER
             value: ADMIN_PsStarter
           - name: HEALTH_CHECK_PORT
             value: "9905"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"
           - name: POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
           - name: CONTAINERTYPE
             value: admin
           - name: MONAME
             value: SIM
           - name: SERVICE_MESH_ENABLED
             value: "false"
           - name: CM_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: CM_SERVICE_PORT
             value: "9997"
           - name: SS_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: SS_SERVICE_PORT
             value: "9994"
           - name: EVENT_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: EVENT_SERVICE_PORT
             value: "9995"
          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - name: logstore
             mountPath: /logstore/
           - name: tmpfs
             mountPath: /tmpfs/
           - name: envoycerts
             mountPath: /certs
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true

      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: tspinst
         emptyDir: {}
       - name: tspinstcip
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: dump
         emptyDir: {}
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: simconfigmap
       - name: config-volume
         configMap:
           name: udm2-sim-fluent-bit-config
       - name: tz-config
         hostPath:
           path: /usr/share/zoneinfo/UTC

status: {}
---
# Source: reg-helm-charts/charts/trigger/templates/deploymentTrigger.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmtrigger
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmtrigger
    app.kubernetes.io/version: trigger-225.280.0
    app.kubernetes.io/component: UDM-TRIGGER
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of TRIGGER SERVICE POD
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmtrigger
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmtrigger
        serviceType: UDMTFR
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMTFR
        vnfcType: TFR
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: trigger-lan@trigger
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - udm2-udmtrigger
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        is_edge: "true"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      serviceAccountName: udm2-sa
      priorityClassName: udm2-prio-level4
      securityContext:
        fsGroup: 2000
        runAsUser: 2000

      containers:
       - name: fluent-bit
         image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
         imagePullPolicy: IfNotPresent
         lifecycle:
           preStop:
             exec:
               command:
               - /bin/sh
               - -c
               - |
                 sleep 5
         resources:
           limits:
             memory: 400Mi
             cpu: 100m
           requests:
             memory: 400Mi
             cpu: 100m
         ports:
           - name: tcp-monit
             containerPort: 2813
             protocol: TCP
           - name: http-api
             containerPort: 2020
             protocol: TCP
         env:
             - name: TARGET_IP
               value: 0.0.0.0
             - name: TARGET_PORT
               value: "9996"
             - name: VNFNAME
               value: "udm2"
             - name: VNFTYPE
               value: "REGSTR"
             - name: VNFCNAME
               valueFrom:
                 fieldRef:
                   fieldPath: metadata.name
             - name: VNFCTYPE
               value: "UDMTFR"
             - name: "PODNAME"
               valueFrom:
                 fieldRef:
                   fieldPath: metadata.name
             - name: POD_IP
               valueFrom:
                 fieldRef:
                   fieldPath: status.podIP
         volumeMounts:
             - name: logstore
               mountPath: /logstore/
             - name: tmpfs
               mountPath: /tmpfs/
             - name: writeablelayer
               mountPath: /writeablelayer/
             - name: config-volume
               mountPath: /fluent-bit/etc
             - name: tz-config
               mountPath: /etc/localtime
               readOnly: true         
       - name: trigger-mcc
         image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
         imagePullPolicy: "IfNotPresent"
         lifecycle:
           preStop:
             exec:
               command:
               - /bin/sh
               - -c
               - |
                 sleep 5
           postStart:
             exec:
               command:
               - "/bin/bash"
               - "-c"
               - for nexthopv4 in $(ip route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s --connect-timeout 3 -m 3 $nexthopv4 &> /dev/null; done ;for nexthopv6 in $(ip -6 route | grep via | grep -v default | awk '{ print $3 }' | sort -u); do curl -s -g --connect-timeout 3 -m 3 [$nexthopv6] &> /dev/null; done; exit 0
         resources:
          limits:
            memory: 500Mi
            cpu: 100m
          requests:
            memory: 500Mi
            cpu: 100m
         ports:
           - name: http-mcchealth
             containerPort: 9904
             protocol: TCP
         env:
           - name: CONTAINER_TYPES
             value: trigger,admin
           - name: PODTYPE
             value: udmtrigger
           - name: CONTAINERTYPE
             value: "mcc"
           - name: SERVICE_MESH_ENABLED
             value: "false"
           - name: HEALTH_CHECK_PORT
             value: "9904"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"
           - name: POD_IP
             valueFrom:
               fieldRef:
                 fieldPath: status.podIP
         volumeMounts:
          - mountPath: /tcnVol/
            name: tcnvol
          - mountPath: /logstore/
            name: logstore
          - mountPath: /writeablelayer/
            name: writeablelayer
          - mountPath: /tmpfs/
            name: tmpfs
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true
         workingDir: /home/rtp99         
       - name: trigger
         image: bcmt-registry:5000/nokia/udm/trigger:225.280.0
         imagePullPolicy: "IfNotPresent"
         lifecycle:
           preStop:
             exec:
               command:
               - /bin/sh
               - -c
               - |
                 HTTPSV_PID=`ps -ef | grep HTTP_SV_257 | grep -v grep | awk '{print $2}'`
                 kill -s USR2 $HTTPSV_PID
                 sleep 5
         resources:
          limits:
            memory: 500Mi
            cpu: 1350m
          requests:
            memory: 500Mi
            cpu: 1350m
         ports:
           - name: tcp-postgres
             containerPort: 5434
             protocol: TCP
           - name: http-trigger
             containerPort: 30300
             protocol: TCP
           - name: grpc-one
             containerPort: 20000
             protocol: TCP
           - name: http-cafhealth
             containerPort: 9903
             protocol: TCP
         env:
          - name: CONTAINERTYPE
            value: trigger
          - name: CONTAINER_PSSTARTER
            value: TFR_PsStarter
          - name: TRIGGER_LAN_INTERFACE
            value: trigger
          - name: SDM_GRPC_ENDPOINT
            value: "127.0.0.1:8081"
          - name: UECM_GRPC_ENDPOINT
            value: "127.0.0.1:8081"
          - name: NETYPE
            value: trigger
          - name: HEALTH_CHECK_PORT
            value: "9903"
          - name: HEALTH_CHECK_PROCESS_ENABLED
            value: "false"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: KeySource
            value: ZTS
          - name: PODTYPE
            value: udmtrigger
          - name: SERVICE_MESH_ENABLED
            value: "false"
          - name: MEM_PROF_ENABLED
            value: "false"
          - name: HTTPSV_SOCKET_RECV_BUF_SIZE
            value: "1048576"
          - name: HTTPSV_SOCKET_SEND_BUF_SIZE
            value: "2097152"
         volumeMounts:
          - mountPath: /tcnVol/
            name: tcnvol
          - name: logstore
            mountPath: /logstore/
          - name: tmpfs
            mountPath: /tmpfs/
          - name: database
            mountPath: /database/
          - name: dump
            mountPath: /dump/
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true         
         readinessProbe:
           exec:
             command:
             - /bin/sh
             - -c
             - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9903/cafHealth);
               if [ "$status" == "200" ]; then exit 0; else echo "CAF application readiness failed"; exit 1; fi;  
           initialDelaySeconds: 10
           periodSeconds: 5
           timeoutSeconds: 1
           failureThreshold: 2
           successThreshold: 1
       - name: udmenvoy
         image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
         imagePullPolicy: "IfNotPresent"
         lifecycle:
           preStop:
             exec:
               command:
               - /bin/sh
               - -c
               - |
                 sleep 5
         resources:
          limits:
            memory: 300Mi
            cpu: 350m
          requests:
            memory: 300Mi
            cpu: 350m
         ports:
           - name: http-hc4envoy
             containerPort: 9909
             protocol: TCP
         env:
           - name: PODTYPE
             value: udmtrigger
           - name: CONTAINERTYPE
             value: envoy
           - name: HOST_IP
             valueFrom:
              fieldRef:
               fieldPath: status.hostIP
           - name: POD_IP
             valueFrom:
              fieldRef:
               fieldPath: status.podIP
           - name: secretuserzts
             valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
           - name: secretpasswordzts
             valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
           - name: CNNAME
             value: udmtrigger.nokia.com
           - name: CASERVICEFQDN
             value: caserverservice.zts5g.svc.cluster.local.
           - name: ENVOY_CONCURRENCY_NUM
             value: "8"
           - name: EVENT_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: EVENT_SERVICE_PORT
             value: "9995"
           - name: CERT_PATH
             value: /certs
           - name: DUName
             value: udm2
           - name: VNFTYPE
             value: "REGSTR"
           - name: REL_VERSION
             value: "22.5.0"
           - name: HEALTH_CHECK_PORT
             value: "9909"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"

         volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - name: envoycerts
             mountPath: /certs
           - name: envoyconfigs
             mountPath: /envoyconfig
           - name: logstore
             mountPath: /logstore/
           - name: tmpfs
             mountPath: /tmpfs/
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true         
         readinessProbe:
           exec:
             command:
             - sh
             - /tcnVol/udmtrigger/envoyReadiness.sh  
           initialDelaySeconds: 10
           periodSeconds: 5
           timeoutSeconds: 1
           failureThreshold: 2
           successThreshold: 1

       - name: trigger-admin
         image: bcmt-registry:5000/nokia/udm/admin:225.280.0
         imagePullPolicy: "IfNotPresent"
         lifecycle:
           preStop:
             exec:
               command:
               - /bin/sh
               - -c
               - |
                 sleep 5
         resources:
          limits:
            memory: 300Mi
            cpu: 100m
          requests:
            memory: 300Mi
            cpu: 100m
         ports:
           - name: http-eventproc
             containerPort: 9090
             protocol: TCP
           - name: tcp-cafproxy
             containerPort: 3988
             protocol: TCP
           - name: http-admhealth
             containerPort: 9905
             protocol: TCP
         env:
          - name: PODTYPE
            value: udmtrigger
          - name: PROCESSES
            value: CAFPROXY
          - name: NETYPE
            value: trigger
          - name: "DUName"
            value: "udm2"
          - name: "Release"
            value: "1"
          - name: RELEASENAME
            value: udm2
          - name: SUPERVISOR_ERROR_LEVEL
            value: info
          - name: REL_VERSION
            value: "22.5.0"
          - name: CD_XML_PATH
            value: "/home/rtp99/CounterDef"
          - name: CERT_PATH
            value: /certs
          - name: CONTAINERTYPE
            value: admin
          - name: HEALTH_CHECK_PORT
            value: "9905"
          - name: HEALTH_CHECK_PROCESS_ENABLED
            value: "false"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: CONTAINER_PSSTARTER
            value: ADMIN_PsStarter
          - name: MONAME
            value: TFR
          - name: SERVICE_MESH_ENABLED
            value: "false"
          - name: CM_SERVICE_ADDRESS
            value: 0.0.0.0
          - name: CM_SERVICE_PORT
            value: "9997"
          - name: SS_SERVICE_ADDRESS
            value: 0.0.0.0
          - name: SS_SERVICE_PORT
            value: "9994"
          - name: EVENT_SERVICE_ADDRESS
            value: 0.0.0.0
          - name: EVENT_SERVICE_PORT
            value: "9995"
          - name: CUSTOM_SECRET_SOURCE
            value: ZTS
         volumeMounts:
          - mountPath: /tcnVol/
            name: tcnvol
          - name: logstore
            mountPath: /logstore/
          - name: tmpfs
            mountPath: /tmpfs/
          - name: envoycerts
            mountPath: /certs
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true         
         readinessProbe:
           exec:
             command:
             - /bin/sh
             - -c
             - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
               if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
           initialDelaySeconds: 10
           periodSeconds: 5
           timeoutSeconds: 1
           failureThreshold: 2
           successThreshold: 1
      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: database
         emptyDir: {}
       - name: dump
         emptyDir: {}
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: triggerconfigmap
       - name: config-volume
         configMap:
           name: udm2-fluent-bit-config
       - name: tz-config
         hostPath:
           path: /usr/share/zoneinfo/UTC

status: {}
---
# Source: reg-helm-charts/charts/udmueauth/templates/deploymentUeauthn.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmueau
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmueau
    app.kubernetes.io/version: udmueauth-225.280.0
    app.kubernetes.io/component: UDM-UEAU
    app.kubernetes.io/managed-by: helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
     app.kubernetes.io/name: udm2-udmueau
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmueau
        serviceType: UDMUEAUTH
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMUEAUTH
        vnfcType: UDMUEAUTH
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: ldap-lan@ldap
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - udm2-udmueau
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        is_edge: "true"
      tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000

      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 100m
            requests:
              memory: 400Mi
              cpu: 100m
          ports:
            - name: tcp-monit
              containerPort: 2813
              protocol: TCP
            - name: http-api
              containerPort: 2020
              protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMUEAUTHN"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP          
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: ueauthn-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmueau
            - name: CONTAINER_TYPES
              value: ueauth,admin,cip,h2p
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99

        - name: ueauth-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 200Mi
              cpu: 120m
            requests:
              memory: 200Mi
              cpu: 120m
          ports:
            - name: http-debug
              containerPort: 8000
              protocol: TCP
            - name: http-ciphealth
              containerPort: 9902
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmueau
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: NETYPE
              value: UDMUEAU
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinstcip
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true

        - name: ueauth-ueauth
          image: bcmt-registry:5000/nokia/udm/ueauth:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 1800Mi
              cpu: 2380m
            requests:
              memory: 1800Mi
              cpu: 2380m
          ports:
            - name: http-hc4ueauth
              containerPort: 9903
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmueau
            - name: CONTAINERTYPE
              value: ueauth
            - name: CONTAINER_PSSTARTER
              value: UDMUEAUTH_PsStarter
            - name: NETYPE
              value: UDMUEAU
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: REGISTER_5G
              value: "true"
            - name: LDAP_LAN_INTERFACE
              value: ldap
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: SERVICE_INTER_PLMN_FQDN
              value: "udmueauth.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: ENABLE_SIDF_FOR_AUSF
              value: 
            - name: NIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: ARPF_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: SIDF_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: N13_ENABLED
              value: "true"
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: SECRET_SOURCE
              value: ZTS          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinst
            - mountPath: /home/rtp99/99/nssCert/
              name: nsscert
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
          securityContext:
            readOnlyRootFilesystem: true

        - name: ueauthn-h2p
          image: bcmt-registry:5000/nokia/udm/h2p:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 500m
            requests:
              memory: 400Mi
              cpu: 500m
          ports:
            - name: http2-sbi
              containerPort: 8087
              protocol: TCP
            - name: http-h2phealth
              containerPort: 9906
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmueau
            - name: CONTAINERTYPE
              value: h2p
            - name: CONTAINER_PSSTARTER
              value: H2P_PsStarter
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9906"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 700Mi
              cpu: 750m
            requests:
              memory: 700Mi
              cpu: 750m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmueau
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: nudm-ueau.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/udmueau/envoyReadiness.sh  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: ueauthn-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 300Mi
              cpu: 100m
            requests:
              memory: 300Mi
              cpu: 100m
          ports:
            - name: http-eventproc
              containerPort: 9090
              protocol: TCP
            - name: http-admhealth
              containerPort: 9905
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmueau
            - name: PROCESSES
              value: CMPROXY
            - name: NETYPE
              value: udmueau
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: RELEASENAME
              value: udm2
            - name: SUPERVISOR_ERROR_LEVEL
              value: info
            - name: REL_VERSION
              value: "22.5.0"
            - name: CD_XML_PATH
              value: "/home/rtp99/CounterDef"
            - name: CERT_PATH
              value: /certs
            - name: HEALTH_CHECK_PORT
              value: "9905"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONTAINERTYPE
              value: admin
            - name: CONTAINER_PSSTARTER
              value: ADMIN_PsStarter
            - name: ZTSL_IP
              value: 0.0.0.0
            - name: ZTSL_FILESTORE_PORT
              value: "9997"
            - name: ZTSL_FILESTORE_TLS_ENABLED
              value: "false"
            - name: FILESTORE_REL_VERSION
              value: "1"
            - name: MONAME
              value: UDMUEAUTH
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: CM_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: CM_SERVICE_PORT
              value: "9997"
            - name: SS_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: SS_SERVICE_PORT
              value: "9994"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CUSTOM_SECRET_SOURCE
              value: ZTS          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: envoycerts
              mountPath: /certs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: filestoreconfigs
              mountPath: /filestoreconfig/

      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: tspinst
         emptyDir: {}
       - name: tspinstcip
         emptyDir: {}
       - name: nsscert
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: udmueauconfigmap
       - name: config-volume
         configMap:
           name: udm2-fluent-bit-config
       - name: filestoreconfigs
         configMap:
           name: udmueauffsclientconfigmap
       - name: tz-config
         hostPath:
            path: /usr/share/zoneinfo/UTC
status: {}
---
# Source: reg-helm-charts/charts/ueauthn/templates/deploymentUeauthn.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-ausfauth
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-ausfauth
    app.kubernetes.io/version: ueauthn-225.280.0
    app.kubernetes.io/component: AUSF-AUTH
    app.kubernetes.io/managed-by: helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
     app.kubernetes.io/name: udm2-ausfauth
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-ausfauth
        serviceType: AUSFAUTH
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: AUSFAUTH
        vnfcType: AUSFAUTH
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - udm2-ausfauth
              topologyKey: "kubernetes.io/hostname"
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      shareProcessNamespace: true
      restartPolicy: Always
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 100m
            requests:
              memory: 400Mi
              cpu: 100m
          ports:
            - name: tcp-monit
              containerPort: 2813
              protocol: TCP
            - name: http-api
              containerPort: 2020
              protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "AUSFAUTH"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP          
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true
        - name: ueauthn-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: PODTYPE
              value: ausfauth
            - name: CONTAINER_TYPES
              value: ueauth,admin,cip,h2p
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99

        - name: ueauth-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 200Mi
              cpu: 120m
            requests:
              memory: 200Mi
              cpu: 120m
          ports:
            - name: http-debug
              containerPort: 8000
              protocol: TCP
            - name: http-ciphealth
              containerPort: 9902
              protocol: TCP
          env:
            - name: PODTYPE
              value: ausfauth
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: AUSFAUTH
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinstcip
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true

        - name: ueauth-ueauth
          image: bcmt-registry:5000/nokia/ausf/ueauth:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 1600Mi
              cpu: 2330m
            requests:
              memory: 1600Mi
              cpu: 2330m
          ports:
            - name: http-hc4ueauth
              containerPort: 9903
              protocol: TCP
          env:
            - name: PODTYPE
              value: ausfauth
            - name: CONTAINERTYPE
              value: ueauth
            - name: CONTAINER_PSSTARTER
              value: AUSFUEAUTH_PsStarter
            - name: NETYPE
              value: AUSFAUTH
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: REGISTER_5G
              value: "true"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: SERVICE_INTER_PLMN_FQDN
              value: "ausfueauth.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: ENABLE_SIDF_FOR_AUSF
              value: "false"
            - name: NIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: SIDF_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: N13_ENABLED
              value: "true"
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: EXTERNAL_STATE_STORE_ENABLED
              value: "true"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LDAP_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: LDAP_SOCKET_SEND_BUF_SIZE
              value: "2097152"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinst
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
          securityContext:
            readOnlyRootFilesystem: true

        - name: ueauthn-h2p
          image: bcmt-registry:5000/nokia/udm/h2p:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 700m
            requests:
              memory: 400Mi
              cpu: 700m
          ports:
            - name: http2-sbi
              containerPort: 8087
              protocol: TCP
            - name: http-h2phealth
              containerPort: 9906
              protocol: TCP
          env:
            - name: PODTYPE
              value: ausfauth
            - name: CONTAINERTYPE
              value: h2p
            - name: CONTAINER_PSSTARTER
              value: H2P_PsStarter
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9906"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 700Mi
              cpu: 600m
            requests:
              memory: 700Mi
              cpu: 600m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: ausfauth
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: ausfueauthentication.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/ausfauth/envoyReadiness.sh  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: ueauthn-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 300Mi
              cpu: 100m
            requests:
              memory: 300Mi
              cpu: 100m
          ports:
            - name: http-eventproc
              containerPort: 9090
              protocol: TCP
            - name: http-admhealth
              containerPort: 9905
              protocol: TCP
          env:
            - name: PODTYPE
              value: ausfauth
            - name: PROCESSES
              value: CMPROXY
            - name: NETYPE
              value: ausfauth
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: RELEASENAME
              value: udm2
            - name: SUPERVISOR_ERROR_LEVEL
              value: info
            - name: REL_VERSION
              value: "22.5.0"
            - name: CD_XML_PATH
              value: "/home/rtp99/CounterDef"
            - name: CERT_PATH
              value: /certs
            - name: CONTAINERTYPE
              value: admin
            - name: CONTAINER_PSSTARTER
              value: ADMIN_PsStarter
            - name: ZTSL_IP
              value: 0.0.0.0
            - name: ZTSL_FILESTORE_PORT
              value: "9997"
            - name: ZTSL_FILESTORE_TLS_ENABLED
              value: "false"
            - name: FILESTORE_REL_VERSION
              value: "1"
            - name: MONAME
              value: AUSFAUTH
            - name: HEALTH_CHECK_PORT
              value: "9905"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: CM_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: CM_SERVICE_PORT
              value: "9997"
            - name: SS_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: SS_SERVICE_PORT
              value: "9994"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: filestoreconfigs
              mountPath: /filestoreconfig/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: envoycerts
              mountPath: /certs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

      volumes:
       - name: tcnvol
         emptyDir: {}
       - name: tspinst
         emptyDir: {}
       - name: tspinstcip
         emptyDir: {}
       - name: logstore
         emptyDir: {}
       - name: writeablelayer
         emptyDir: {}
       - name: tmpfs
         emptyDir: {}
       - name: envoycerts
         emptyDir: {}
       - name: envoyconfigs
         configMap:
           name: ausfauthconfigmap
       - name: config-volume
         configMap:
           name: udm2-fluent-bit-config
       - name: filestoreconfigs
         configMap:
           name: ausfffsclientconfigmap
       - name: tz-config
         hostPath:
            path: /usr/share/zoneinfo/UTC
status: {}
---
# Source: reg-helm-charts/charts/uecm/templates/deploymentUecm.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-udmuecm
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-udmuecm
    app.kubernetes.io/version: uecm-225.280.0
    app.kubernetes.io/component: UDM-UECM
    app.kubernetes.io/managed-by: helm
  annotations:
    description: Defines deployment of UECM POD
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  selector:
    matchLabels:
      app.kubernetes.io/name: udm2-udmuecm
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-udmuecm
        serviceType: UDMUECM
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: UDMUECM
        vnfcType: UECM
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        k8s.v1.cni.cncf.io/networks: ldap-lan@ldap
    spec:
       affinity:
         podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - udm2-udmuecm
              topologyKey: "kubernetes.io/hostname"
       nodeSelector:
        is_edge: "true"
       tolerations:
        - effect: NoExecute
          key: is_edge
          operator: Equal
          value: "true"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
       shareProcessNamespace: true
       restartPolicy: Always
       serviceAccountName: udm2-sa
       securityContext:
        fsGroup: 2000
        runAsUser: 2000
       containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 100m
            requests:
              memory: 400Mi
              cpu: 100m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: TARGET_IP
                value: 0.0.0.0
              - name: TARGET_PORT
                value: "9996"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "UDMUECM"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP          
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: writeablelayer
                mountPath: /writeablelayer/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true

        - name: uecm-mcc
          image: bcmt-registry:5000/nokia/udm/mcc:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 500Mi
              cpu: 50m
            requests:
              memory: 500Mi
              cpu: 50m
          ports:
            - name: http-mcchealth
              containerPort: 9904
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmuecm
            - name: CONTAINER_TYPES
              value: uecm,admin,cip,h2p
            - name: CONTAINERTYPE
              value: "mcc"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9904"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /logstore/
              name: logstore
            - mountPath: /writeablelayer/
              name: writeablelayer
            - mountPath: /tmpfs/
              name: tmpfs
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          workingDir: /home/rtp99

        - name: uecm-cip
          image: bcmt-registry:5000/nokia/udm/cip:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 200Mi
              cpu: 120m
            requests:
              memory: 200Mi
              cpu: 120m
          ports:
            - name: http-debug
              containerPort: 8000
              protocol: TCP
            - name: http-ciphealth
              containerPort: 9902
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmuecm
            - name: CONTAINER_PSSTARTER
              value: CIP_PsStarter
            - name: CONTAINERTYPE
              value: cip
            - name: NETYPE
              value: UDMUECM
            - name: HEALTH_CHECK_PORT
              value: "9902"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: NODE_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: LAG_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9902/cipHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "CIP readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinstcip
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true

        - name: uecm-uecm
          image: bcmt-registry:5000/nokia/udm/uecm:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 2900Mi
              cpu: 2700m
            requests:
              memory: 2900Mi
              cpu: 2700m
          ports:
          - name: grpc-one
            containerPort: 20000
            protocol: TCP
          - name: grpc-two
            containerPort: 20001
            protocol: TCP
          - name: grpc-three
            containerPort: 20002
            protocol: TCP
          - name: grpc-four
            containerPort: 20003
            protocol: TCP
          - name: grpc-five
            containerPort: 20004
            protocol: TCP
          - name: grpc-six
            containerPort: 20005
            protocol: TCP
          - name: grpc-seven
            containerPort: 20006
            protocol: TCP
          - name: grpc-eight
            containerPort: 20007
            protocol: TCP
          - name: grpc-nine
            containerPort: 20008
            protocol: TCP
          - name: grpc-ten
            containerPort: 20009
            protocol: TCP
          - name: grpc-eleven
            containerPort: 20010
            protocol: TCP
          - name: grpc-twelve
            containerPort: 20011
            protocol: TCP
          - name: http-uecmhealth
            containerPort: 9903
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmuecm
            - name: CONTAINERTYPE
              value: uecm
            - name: CONTAINER_PSSTARTER
              value: UECM_PsStarter
            - name: NETYPE
              value: UDMUECM
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: NUDR_DR_ENABLED
              value: "false"
            - name: SDS_CACHE_NUDR_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: SERVICE_INTER_PLMN_FQDN
              value: "udmuecm.5gc.mnc000.mcc000.3gppnetwork.org"
            - name: IS_XIX_ENABLED
              value: "true"
            - name: NIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: SIM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: EE_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: SDM_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: TRIGGER_GRPC_ENDPOINT
              value: "127.0.0.1:8081"
            - name: REGISTER_5G
              value: "true"
            - name: LDAP_LAN_INTERFACE
              value: ldap
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CASSANDRA_TLS_ENABLED
              value: "false"
            - name: IPV6_EXT_IF_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: LDAP_SOCKET_RECV_BUF_SIZE
              value: "1048576"
            - name: LDAP_SOCKET_SEND_BUF_SIZE
              value: "2097152"
            - name: HEALTH_CHECK_PORT
              value: "9903"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: SECRET_SOURCE
              value: ZTS          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - mountPath: /tspinst/scripts/
              name: tspinst
            - mountPath: /home/rtp99/99/nssCert/
              name: nsscert
            - name: logstore
              mountPath: /logstore/
            - name: redisrdb
              mountPath: /redisRdb/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
            - name: envoycerts
              mountPath: /certs
          securityContext:
            readOnlyRootFilesystem: true

        - name: uecm-h2p
          image: bcmt-registry:5000/nokia/udm/h2p:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 400Mi
              cpu: 480m
            requests:
              memory: 400Mi
              cpu: 480m
          ports:
          - name: http2-sbi
            containerPort: 8087
            protocol: TCP
          - name: http-h2phealth
            containerPort: 9906
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmuecm
            - name: CONTAINERTYPE
              value: h2p
            - name: CONTAINER_PSSTARTER
              value: H2P_PsStarter
            - name: HTTP2_LB_ENABLED
              value: "true"
            - name: HTTP2_LB_TLS_ENABLED
              value: "false"
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: IPV6_INT_IF_ENABLED
              value: "false"
            - name: SERVICE_FQDN
              value: ""
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CMUC_ENABLED
              value: "true"
            - name: MEM_PROF_ENABLED
              value: "false"
            - name: HEALTH_CHECK_PORT
              value: "9906"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
        - name: udmenvoy
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 1000Mi
              cpu: 450m
            requests:
              memory: 1000Mi
              cpu: 450m
          ports:
            - name: http-hc4envoy
              containerPort: 9909
              protocol: TCP
          env:
            - name: PODTYPE
              value: udmuecm
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: nudm-uecm.nokia.com
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: "8"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"          
          readinessProbe:
            exec:
              command:
              - sh
              - /tcnVol/udmuecm/envoyReadiness.sh  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1

          volumeMounts:
            - mountPath: /tcnVol/
              name: tcnvol
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true

        - name: uecm-admin
          image: bcmt-registry:5000/nokia/udm/admin:225.280.0
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  sleep 10
          resources:
            limits:
              memory: 300Mi
              cpu: 100m
            requests:
              memory: 300Mi
              cpu: 100m
          ports:
          - name: http-eventproc
            containerPort: 9090
            protocol: TCP
          - name: http-admhealth
            containerPort: 9905
            protocol: TCP
          env:
            - name: PODTYPE
              value: udmuecm
            - name: PROCESSES
              value: CMPROXY
            - name: NETYPE
              value: udmuecm
            - name: "DUName"
              value: "udm2"
            - name: "Release"
              value: "1"
            - name: RELEASENAME
              value: udm2
            - name: SUPERVISOR_ERROR_LEVEL
              value: info
            - name: REL_VERSION
              value: "22.5.0"
            - name: CD_XML_PATH
              value: "/home/rtp99/CounterDef"
            - name: CERT_PATH
              value: /certs
            - name: CONTAINER_PSSTARTER
              value: ADMIN_PsStarter
            - name: CONTAINERTYPE
              value: admin
            - name: ZTSL_IP
              value: 0.0.0.0
            - name: ZTSL_FILESTORE_PORT
              value: "9997"
            - name: ZTSL_FILESTORE_TLS_ENABLED
              value: "false"
            - name: FILESTORE_REL_VERSION
              value: "1"
            - name: MONAME
              value: UECM
            - name: HEALTH_CHECK_PORT
              value: "9905"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SERVICE_MESH_ENABLED
              value: "false"
            - name: CM_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: CM_SERVICE_PORT
              value: "9997"
            - name: SS_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: SS_SERVICE_PORT
              value: "9994"
            - name: EVENT_SERVICE_ADDRESS
              value: 0.0.0.0
            - name: EVENT_SERVICE_PORT
              value: "9995"
            - name: CUSTOM_SECRET_SOURCE
              value: ZTS          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9905/adminHealth);
                if [ "$status" == "200" ]; then exit 0; else echo "Admin readiness failed"; exit 1; fi;  
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
          volumeMounts:
           - mountPath: /tcnVol/
             name: tcnvol
           - name: logstore
             mountPath: /logstore/
           - name: tmpfs
             mountPath: /tmpfs/
           - name: envoycerts
             mountPath: /certs
           - name: tz-config
             mountPath: /etc/localtime
             readOnly: true
           - name: filestoreconfigs
             mountPath: /filestoreconfig/

       volumes:
        - name: tcnvol
          emptyDir: {}
        - name: logstore
          emptyDir: {}
        - name: tspinst
          emptyDir: {}
        - name: tspinstcip
          emptyDir: {}
        - name: nsscert
          emptyDir: {}
        - name: writeablelayer
          emptyDir: {}
        - name: tmpfs
          emptyDir: {}
        - name: redisrdb
          emptyDir:
            sizeLimit: 200Mi
        - name: envoycerts
          emptyDir: {}
        - name: envoyconfigs
          configMap:
            name: uecmconfigmap
        - name: config-volume
          configMap:
            name: udm2-fluent-bit-config
        - name: filestoreconfigs
          configMap:
            name: uecmffsclientconfigmap
        - name: tz-config
          hostPath:
            path: /usr/share/zoneinfo/UTC

status: {}
---
# Source: reg-helm-charts/charts/vnfclusterenvoylb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: udm2-vnfclusterenvoylb
  namespace: udm2
  labels:
    app.kubernetes.io/name: udm2-vnfclusterenvoylb
    app: vnfclusterenvoylb-label
    chart: vnfclusterenvoylb-225.280.0
    release: udm2
    namespace: udm2
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vnfclusterenvoylb-label
      release: udm2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 20%
  template:
    metadata:
      labels:
        app.kubernetes.io/name: udm2-vnfclusterenvoylb
        app: vnfclusterenvoylb-label
        release: udm2
        serviceType: VNFENVOYLB
        vnfType: REGSTR
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: VNFENVOYLB
        vnfcType: vnfclusterenvoylb
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
    spec:
      serviceAccountName: udm2-sa
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - udm2-vnfclusterenvoylb
            topologyKey: "kubernetes.io/hostname"
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
      containers:
        - name: fluent-bit
          image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 350Mi
              cpu: 100m
            requests:
              memory: 350Mi
              cpu: 100m
          ports:
          - name: tcp-monit
            containerPort: 2813
            protocol: TCP
          - name: http-api
            containerPort: 2020
            protocol: TCP
          env:
              - name: FLUENTBIT_ARGS
                value: "-c /fluent-bit/etc/fluent-bit.conf"
              - name: TARGET_IP
                value: "127.0.0.1"
              - name: TARGET_PORT
                value: "9996"
              - name: "traceLevel"
                value: "error"
              - name: "logRetention"
                value: "2"
              - name: VNFNAME
                value: "udm2"
              - name: VNFTYPE
                value: "REGSTR"
              - name: VNFCNAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: VNFCTYPE
                value: "VNFENVOYLB"
              - name: "PODNAME"
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
          volumeMounts:
              - name: logstore
                mountPath: /logstore/
              - name: tmpfs
                mountPath: /tmpfs/
              - name: config-volume
                mountPath: /fluent-bit/etc
              - name: tz-config
                mountPath: /etc/localtime
                readOnly: true          
        - name: vnfenvoylb
          image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              memory: 550Mi
              cpu: 1900m
            requests:
              memory: 550Mi
              cpu: 1900m
          ports:
          - name: http-admin
            containerPort: 8001
            protocol: TCP
          - name: grpc-cm
            containerPort: 8080
            protocol: TCP
          - name: grpc-log
            containerPort: 8078
            protocol: TCP
          - name: grpc-eps
            containerPort: 8079
            protocol: TCP
          - name: grpc-ss
            containerPort: 7055
            protocol: TCP
          - name: grpc-cms
            containerPort: 7775
            protocol: TCP
          - name: http-hc4envoy
            containerPort: 9909
            protocol: TCP
          env:
            - name: PODTYPE
              value: vnfenvoylb
            - name: CONTAINERTYPE
              value: envoy
            - name: HOST_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
               fieldRef:
                 fieldPath: status.podIP
            - name: secretuserzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: username
            - name: secretpasswordzts
              valueFrom:
               secretKeyRef:
                 name: zts1ztssecret
                 key: password
            - name: CNNAME
              value: dummy.default.svc.cluster.local
            - name: CASERVICEFQDN
              value: caserverservice.zts5g.svc.cluster.local.
            - name: ENVOY_CONCURRENCY_NUM
              value: 
            - name: EVENT_SERVICE_ADDRESS
              value: 
            - name: EVENT_SERVICE_PORT
              value: 
            - name: CERT_PATH
              value: /certs
            - name: DUName
              value: udm2
            - name: VNFTYPE
              value: "REGSTR"
            - name: REL_VERSION
              value: "22.5.0"
            - name: HEALTH_CHECK_PORT
              value: "9909"
            - name: HEALTH_CHECK_PROCESS_ENABLED
              value: "false"

          volumeMounts:
            - name: envoycerts
              mountPath: /certs
            - name: envoyconfigs
              mountPath: /envoyconfig
            - name: logstore
              mountPath: /logstore/
            - name: tmpfs
              mountPath: /tmpfs/
            - name: tz-config
              mountPath: /etc/localtime
              readOnly: true          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - status=$(/bin/curl -s -o /dev/null -w %{http_code} http://$POD_IP:9901/);
                if [ "$status" == "200" ]; then exit 0; else echo "vnfenvoylb readiness probe failed"; exit 1; fi;  
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
            successThreshold: 1
      volumes:
        - name: logstore
          emptyDir: {}
        - name: tmpfs
          emptyDir: {}
        - name: envoycerts
          emptyDir: {}
        - name: envoyconfigs
          configMap:
            name: vnflbconfigmap
        - name: config-volume
          configMap:
            name: udm2-fluent-bit-config
        - name: tz-config
          hostPath:
            path: /usr/share/zoneinfo/UTC
---
# Source: reg-helm-charts/charts/ccasapache/templates/cassandra-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: udm2-ccasapache
  labels:
    app: udm2-ccasapache
    release: "udm2"
    heritage: "Helm"
    
spec:
  serviceName: udm2-ccasapache
  updateStrategy:
    type: RollingUpdate
  replicas: 3
  selector:
    matchLabels:
      app: udm2-ccasapache
      release: "udm2"
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: udm2-ccasapache
        release: "udm2"
        serviceType: CCAS
        vnfType: REGSTR
        
      annotations:
        vnfType: REGSTR
        vnfName: "udm2"
        serviceType: CCAS
        vnfcType: CCAS
        vnfMajorRelease: "22"
        vnfMinorRelease: "5.0"
        checksum/config: |
          1f53fcb0e886adf0d32bdcbf3d17ed02e482ffe30315a93d623f05767f84affa
          ad88428484a388625eea11b773a8edcad9cfcaacc5b94491fb5acb48a3d80fc9
    spec:
      priorityClassName: udm2-prio-level2
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: udm2-ccasapache
                  release: "udm2"
                matchExpressions:
                - key: type
                  operator: In
                  values:
                  - server
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 0
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 0
# UDM specific enahancement on top of CSF begin
      securityContext:
        fsGroup: 2000
        runAsUser: 2000
# UDM specific enahancement on top of CSF end
      initContainers:
      - name: udm2-ccasapache-config
        image: "bcmt-registry:5000/nokia/udm/kubectl:v1.22.1-nano-20211208"
        volumeMounts:
        - name: tmp-cassandra-conf
          mountPath: /tmp/config
        - name: cassandra-conf
          mountPath: /config
        - name: host-timezone
          mountPath: /etc/localtime
          readOnly: true
        resources:
          requests:
            memory: 64Mi
            cpu: 100m
          limits:
            memory: 64Mi
            cpu: 100m
        command:
        - bash
        args:
        - -c
        - |
          echo "Copying config files to RW volume"
          cp /tmp/config/cassandra-env.sh /config/cassandra-env.sh
          cp /tmp/config/cassandra.yaml /config/cassandra.yaml
          cp /tmp/config/jvm.options /config/jvm.options
          cp /tmp/config/logback.xml /config/logback.xml
          cp /tmp/config/env /config/env
      terminationGracePeriodSeconds: 60
      containers:
      - name: udm2-ccasapache
        image: "bcmt-registry:5000/nokia/udm/ccas_apache:3.11.11.900.el7"
        imagePullPolicy: "IfNotPresent"
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                /opt/cass-tools/scripts/cassandra.sh --stop
        resources:
          limits:
            cpu: 3700m
            memory: 8Gi
          requests:
            cpu: 3700m
            memory: 8Gi
        env:
        - name: CONFIG_CASSANDRA_SEEDS
          value: "udm2-ccasapache-0.udm2-ccasapache.udm2.svc.cluster.local"
        #- name: NReplicas
        #  value: "3"
        - name: ETCDCTL_KEY_FILE
          value: "/etc/etcd/ssl/etcd-client-key.pem"
        - name: ETCDCTL_CERT_FILE
          value: "/etc/etcd/ssl/etcd-client.pem"
        - name: ETCDCTL_CA_FILE
          value: "/etc/etcd/ssl/ca.pem"
        - name: SS_CASSANDRA_CLUSTER_NAME
          value: "MyCluster"
        - name: SS_CASSANDRA_DATA_CENTER
          value: "MyCenter"
        - name: USE_ETCD
          value: "nouse"
        - name: SS_CASSANDRA_SETUP_FIREWALL_RULES
          value: "false"
        - name: MAX_HEAP_SIZE
          value: "2g"
        - name: HEAP_NEWSIZE
          value: "512m"
        - name: SS_CASSANDRA_DATADIR_LV_NAME
          value: "CASSANDRA_DD"
        - name: SS_CASSANDRA_COMMITLOG_LV_NAME
          value: "CASSANDRA_DD"
        - name: SS_CASSANDRA_BACKUP_LV_NAME
          value: "CASSANDRA_DD"
        - name: SS_DEPLOYMENT_TYPE
          value: "kube"
        - name: SS_CASSANDRA_SUPERUSER_NAME
          value: "suadmincass"
        - name: SS_CASSANDRA_SUPERUSER_PASS
          valueFrom:
            secretKeyRef:
              name: udm2-ccasapache
              key: cassandra_superpass
        - name: REDUCED_MAX_HEAP_SIZE
          value: "2"
        - name: REDUCED_HEAP_NEWSIZE
          value: "512"
        - name: RPC_SERVER_TYPE
          value: "hsha"
        - name: CONCURRENT_READS
          value: "4"
        - name: CONCURRENT_WRITES
          value: "4"
        - name: COMPACTION_THROUGHPUT
          value: "0"
        - name: CONCURRENT_COMPACTORS
          value: "1"
        - name: RPC_MIN_THREADS
          value: "4"
        - name: RPC_MAX_THREADS
          value: "4"
        - name: KEY_CACHE_SIZE
          value: "32"
        - name: CASSANDRA_TLS_ENABLED
          value: "false"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        envFrom:
        - configMapRef:
            name: udm2-ccasapache-env
        readinessProbe:
          exec:
            command:
            - bash
            - "-c"
            - |
              [ -f /var/lib/cassandra/.lcm_scalein ] || [ -f /var/lib/cassandra/.lcm_cassandra_superpass ] || /opt/cassandra/bin/cqlsh --connect-timeout=60  $HOSTNAME 9042 -u $SS_CASSANDRA_SUPERUSER_NAME -p $SS_CASSANDRA_SUPERUSER_PASS -e "describe keyspaces";
          initialDelaySeconds: 100
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: tcp-intra-node
          containerPort: 7000
        - name: tls-intra-node
          containerPort: 7001
        - name: tcp-jmx
          containerPort: 7199
        - name: tcp-cql
          containerPort: 9042
        volumeMounts:
        - name: cassandra-conf
          mountPath: /config
        - name: "data"
          mountPath: /CASSANDRA_DD
        - name: envoycerts
          mountPath: /certs
        - name: tmpdir
          mountPath: /tmp
        - name: supervisorrundir
          mountPath: /var/run/supervisor
        - name: supervisorlogdir
          mountPath: /var/log/supervisor
        - name: cassandralogdir
          mountPath: /var/log/cassandra
        - name: cassandralibdir
          mountPath: /var/lib/cassandra
        - name: cassandrahomedir
          mountPath: /home/cassandra-home        
        - name: logstore
          mountPath: /logstore/
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
# UDM specific enahancement on top of CSF begin
      
      - name: udmenvoy
        image: bcmt-registry:5000/nokia/udm/udmenvoy:225.280.0
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                sleep 10
        resources:
          limits:
            memory: 300Mi
            cpu: 100m
          requests:
            memory: 300Mi
            cpu: 100m
        ports:
          - name: http-hc4envoy
            containerPort: 9909
            protocol: TCP
        env:
           - name: PODTYPE
             value: udmdatastore
           - name: CONTAINERTYPE
             value: envoy
           - name: HOST_IP
             valueFrom:
              fieldRef:
                fieldPath: status.hostIP
           - name: HEALTH_CHECK_PORT
             value: "9909"
           - name: HEALTH_CHECK_PROCESS_ENABLED
             value: "false"
           - name: POD_IP
             valueFrom:
              fieldRef:
                fieldPath: status.podIP
           - name: secretuserzts
             valueFrom:
              secretKeyRef:
                name: zts1ztssecret
                key: username
           - name: secretpasswordzts
             valueFrom:
              secretKeyRef:
                name: zts1ztssecret
                key: password
           - name: CNNAME
             value: CCAS
           - name: CASERVICEFQDN
             value: caserverservice.zts5g.svc.cluster.local.
           - name: ENVOY_CONCURRENCY_NUM
             value: "8"
           - name: EVENT_SERVICE_ADDRESS
             value: 0.0.0.0
           - name: EVENT_SERVICE_PORT
             value: "9995"
           - name: CERT_PATH
             value: /certs
           - name: DUName
             value: udm2
           - name: VNFTYPE
             value: "REGSTR"
           - name: REL_VERSION
             value: "22.5.0"
        
        volumeMounts:
          - name: envoycerts
            mountPath: /certs
          - name: envoyconfigs
            mountPath: /envoyconfig
          - name: logstore
            mountPath: /logstore/
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true
      
      - name: fluent-bit
        image: bcmt-registry:5000/nokia/udm/lfsclient:1.14.4
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                sleep 10
        resources:
          limits:
             memory: 300Mi
             cpu: 200m
          requests:
             memory: 300Mi
             cpu: 200m
        ports:
        - name: tcp-monit
          containerPort: 2813
          protocol: TCP
        - name: http-api
          containerPort: 2020
          protocol: TCP
        env:
          - name: TARGET_IP
            value: 0.0.0.0
          - name: TARGET_PORT
            value: "9996"
          - name: "traceLevel"
            value: "error"
          - name: "logRetention"
            value: "2"
          - name: "logPath"
            value: "/opt/log"
          - name: VNFNAME
            value: "udm2"
          - name: VNFTYPE
            value: "REGSTR"
          - name: VNFCNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: VNFCTYPE
            value: "UDMCCAS"
          - name: "PODNAME"
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        
        volumeMounts:
          - name: logstore
            mountPath: /logstore/
          - name: config-volume
            mountPath: /fluent-bit/etc
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true
# UDM specific enahancement on top of CSF end #cbur.enabled
      volumes:
        - name: tmp-cassandra-conf
          configMap:
            name: udm2-ccasapache
            defaultMode: 0664
        - name: cassandra-conf
          emptyDir: {}
        - name: tmpdir
          emptyDir: {}
        - name: supervisorrundir
          emptyDir: {}
        - name: supervisorlogdir
          emptyDir: {}
        - name: cassandralogdir
          emptyDir: {}
        - name: cassandralibdir
          emptyDir: {}
        - name: cassandrahomedir
          emptyDir: {}
        - name: host-timezone
          hostPath:
            path: /usr/share/zoneinfo/UTC        
        - name: logstore
          emptyDir: {}
        - name: envoycerts
          emptyDir: {}
        - name: envoyconfigs
          configMap:
            name: ccasconfigmap
        - name: config-volume
          configMap:
            name: udm2-ccas-fluent-bit-config
        - name: tz-config
          hostPath:
            path: /usr/share/zoneinfo/UTC
    ## Add serviceAccount if rbac role to be created
      serviceAccountName: udm2-sa
      hostnetwork: 
  volumeClaimTemplates:
  - metadata:
      name: "data"
      labels:
        app: udm2-ccasapache
        release: "udm2"
        heritage: "Helm"
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "4Gi"
      storageClassName: "csi-cephrbd"
---
# Source: reg-helm-charts/charts/ccasapache/templates/cassandra-cbur-policy.yaml
#cbur.enabled
---
# Source: reg-helm-charts/charts/ccasapache/templates/istio-psp-rbac.yaml
# UDM specific enahancement on top of CSF

